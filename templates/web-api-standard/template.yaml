name: "web-api-standard"
description: "Standard Web API template with Gin framework"
type: "web-api"
architecture: "standard"
version: "1.0.0"
author: "Go-Starter Team"
license: "MIT"

variables:
  - name: "ProjectName"
    description: "Name of the project"
    type: "string"
    required: true
    validation: "^[a-zA-Z0-9_-]+$"

  - name: "ModulePath"
    description: "Go module path"
    type: "string"
    required: true
    validation: "^[a-zA-Z0-9._/-]+$"

  - name: "Author"
    description: "Project author"
    type: "string"
    required: false
    default: ""

  - name: "Email"
    description: "Author email"
    type: "string"
    required: false
    default: ""

  - name: "License"
    description: "Project license"
    type: "string"
    required: false
    default: "MIT"
    choices:
      - "MIT"
      - "Apache-2.0"
      - "GPL-3.0"
      - "BSD-3-Clause"

  - name: "GoVersion"
    description: "Go version to use"
    type: "string"
    required: false
    default: "1.21"

  - name: "Framework"
    description: "Web framework"
    type: "string"
    required: false
    default: "gin"

  - name: "Logger"
    description: "Logging library"
    type: "string"
    required: false
    default: "slog"
    choices:
      - "slog"
      - "zap"
      - "logrus"
      - "zerolog"

  - name: "DatabaseDriver"
    description: "Database driver"
    type: "string"
    required: false
    default: "postgres"
    choices:
      - ""
      - "postgres"
      - "mysql"
      - "sqlite"

  - name: "AuthType"
    description: "Authentication type"
    type: "string"
    required: false
    default: "jwt"
    choices:
      - ""
      - "jwt"
      - "oauth2"
      - "session"

files:
  # Core application files
  - source: "cmd/server/main.go.tmpl"
    destination: "cmd/server/main.go"

  - source: "go.mod.tmpl"
    destination: "go.mod"

  - source: "Makefile.tmpl"
    destination: "Makefile"

  - source: "README.md.tmpl"
    destination: "README.md"

  # Configuration
  - source: "internal/config/config.go.tmpl"
    destination: "internal/config/config.go"

  # Handlers
  - source: "internal/handlers/health.go.tmpl"
    destination: "internal/handlers/health.go"

  - source: "internal/handlers/users.go.tmpl"
    destination: "internal/handlers/users.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "internal/handlers/auth.go.tmpl"
    destination: "internal/handlers/auth.go"
    condition: "{{ne .AuthType \"\"}}"

  # Logger
  - source: "internal/logger/interface.go.tmpl"
    destination: "internal/logger/interface.go"

  - source: "internal/logger/factory.go.tmpl"
    destination: "internal/logger/factory.go"

  - source: "internal/logger/slog.go.tmpl"
    destination: "internal/logger/slog.go"
    condition: "{{eq .Logger \"slog\"}}"

  - source: "internal/logger/zap.go.tmpl"
    destination: "internal/logger/zap.go"
    condition: "{{eq .Logger \"zap\"}}"

  - source: "internal/logger/logrus.go.tmpl"
    destination: "internal/logger/logrus.go"
    condition: "{{eq .Logger \"logrus\"}}"

  - source: "internal/logger/zerolog.go.tmpl"
    destination: "internal/logger/zerolog.go"
    condition: "{{eq .Logger \"zerolog\"}}"

  # Middleware
  - source: "internal/middleware/cors.go.tmpl"
    destination: "internal/middleware/cors.go"

  - source: "internal/middleware/logger.go.tmpl"
    destination: "internal/middleware/logger.go"

  - source: "internal/middleware/recovery.go.tmpl"
    destination: "internal/middleware/recovery.go"

  - source: "internal/middleware/auth.go.tmpl"
    destination: "internal/middleware/auth.go"
    condition: "{{ne .AuthType \"\"}}"

  # Database
  - source: "internal/database/connection.go.tmpl"
    destination: "internal/database/connection.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "internal/database/migrations.go.tmpl"
    destination: "internal/database/migrations.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Models
  - source: "internal/models/base.go.tmpl"
    destination: "internal/models/base.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "internal/models/user.go.tmpl"
    destination: "internal/models/user.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Services
  - source: "internal/services/user.go.tmpl"
    destination: "internal/services/user.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "internal/services/auth.go.tmpl"
    destination: "internal/services/auth.go"
    condition: "{{ne .AuthType \"\"}}"

  # Repository
  - source: "internal/repository/interfaces.go.tmpl"
    destination: "internal/repository/interfaces.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "internal/repository/user.go.tmpl"
    destination: "internal/repository/user.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Docker
  - source: "Dockerfile.tmpl"
    destination: "Dockerfile"

  - source: "docker-compose.yml.tmpl"
    destination: "docker-compose.yml"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Configuration files
  - source: "configs/config.dev.yaml.tmpl"
    destination: "configs/config.dev.yaml"

  - source: "configs/config.prod.yaml.tmpl"
    destination: "configs/config.prod.yaml"

  - source: "configs/config.test.yaml.tmpl"
    destination: "configs/config.test.yaml"

  # Environment and Git
  - source: ".env.example.tmpl"
    destination: ".env.example"

  - source: ".gitignore.tmpl"
    destination: ".gitignore"

  # API Documentation
  - source: "api/openapi.yaml.tmpl"
    destination: "api/openapi.yaml"

  # Database migrations
  - source: "migrations/001_create_users.up.sql.tmpl"
    destination: "migrations/001_create_users.up.sql"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "migrations/001_create_users.down.sql.tmpl"
    destination: "migrations/001_create_users.down.sql"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Tests
  - source: "tests/integration/api_test.go.tmpl"
    destination: "tests/integration/api_test.go"

  - source: "tests/unit/services_test.go.tmpl"
    destination: "tests/unit/services_test.go"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "tests/testdata/fixtures.json.tmpl"
    destination: "tests/testdata/fixtures.json"
    condition: "{{ne .DatabaseDriver \"\"}}"

  # Scripts
  - source: "scripts/migrate.sh.tmpl"
    destination: "scripts/migrate.sh"
    condition: "{{ne .DatabaseDriver \"\"}}"

  - source: "scripts/dev.sh.tmpl"
    destination: "scripts/dev.sh"

dependencies:
  - module: "github.com/gin-gonic/gin"
    version: "v1.9.1"
  - module: "github.com/spf13/viper"
    version: "v1.16.0"
  - module: "go.uber.org/zap"
    version: "v1.26.0"
    condition: "{{eq .Logger \"zap\"}}"
  - module: "github.com/sirupsen/logrus"
    version: "v1.9.3"
    condition: "{{eq .Logger \"logrus\"}}"
  - module: "github.com/rs/zerolog"
    version: "v1.31.0"
    condition: "{{eq .Logger \"zerolog\"}}"
  - module: "github.com/lib/pq"
    version: "v1.10.9"
    condition: "{{eq .DatabaseDriver \"postgres\"}}"
  - module: "gorm.io/gorm"
    version: "v1.25.4"
    condition: "{{ne .DatabaseDriver \"\"}}"
  - module: "gorm.io/driver/postgres"
    version: "v1.5.2"
    condition: "{{eq .DatabaseDriver \"postgres\"}}"
  - module: "gorm.io/driver/mysql"
    version: "v1.5.2"
    condition: "{{eq .DatabaseDriver \"mysql\"}}"
  - module: "gorm.io/driver/sqlite"
    version: "v1.5.4"
    condition: "{{eq .DatabaseDriver \"sqlite\"}}"
  - module: "github.com/golang-jwt/jwt/v5"
    version: "v5.0.0"
    condition: "{{eq .AuthType \"jwt\"}}"
  - module: "github.com/stretchr/testify"
    version: "v1.8.4"

post_hooks:
  - name: "clean_dependencies"
    command: "go mod tidy"
    work_dir: "{{.OutputPath}}"
    
  - name: "format_code"
    command: "go fmt ./..."
    work_dir: "{{.OutputPath}}"

  - name: "make_scripts_executable" 
    command: "chmod +x scripts/*.sh"
    work_dir: "{{.OutputPath}}"

features:
  - name: "logging"
    description: "Structured logging with configurable logger"
    enabled_when: "true"
    
  - name: "database"
    description: "Database integration with GORM"
    enabled_when: "{{ne .DatabaseDriver \"\"}}"
    
  - name: "authentication"
    description: "JWT authentication middleware"
    enabled_when: "{{ne .AuthType \"\"}}"
    
  - name: "docker"
    description: "Docker containerization"
    enabled_when: "true"
    
  - name: "openapi"
    description: "OpenAPI/Swagger documentation"
    enabled_when: "true"

validation:
  - name: "go_version_compatibility"
    description: "Ensure Go version is compatible"
    value: "1.18"
    
  - name: "module_path_format"
    description: "Validate module path format"
    
  - name: "project_name_format"
    description: "Validate project name format"