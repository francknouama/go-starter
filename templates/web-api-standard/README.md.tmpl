# {{.ProjectName}}

{{.ProjectName}} is a modern Go web API built with Gin framework{{if ne .DatabaseDriver ""}} and {{.DatabaseDriver}} database{{end}}.

## Features

- 🚀 **Fast & Lightweight**: Built with Gin framework for high performance
- 🔒 **Secure**: {{if eq .AuthType "jwt"}}JWT authentication{{else if ne .AuthType ""}}{{.AuthType}} authentication{{else}}Ready for authentication integration{{end}}
{{- if ne .DatabaseDriver ""}}
- 💾 **Database**: {{.DatabaseDriver}} with GORM ORM
{{- end}}
- 📝 **API Documentation**: OpenAPI/Swagger specification
- 🐳 **Docker Ready**: Multi-stage Docker builds
- 🧪 **Testing**: Comprehensive test suite
- 📊 **Monitoring**: Health checks and logging
- 🔧 **Development**: Hot reload and development tools

## Quick Start

### Prerequisites

- Go {{.GoVersion}} or later
{{- if ne .DatabaseDriver ""}}
- {{if eq .DatabaseDriver "postgres"}}PostgreSQL{{else if eq .DatabaseDriver "mysql"}}MySQL{{else if eq .DatabaseDriver "sqlite"}}SQLite{{end}} database
{{- end}}
- Docker (optional)

### Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd {{.ProjectName}}
```

2. Install dependencies:
```bash
go mod download
```

{{- if ne .DatabaseDriver ""}}
3. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your database configuration
```

4. Run database migrations:
```bash
make migrate
```
{{- else}}
3. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your configuration
```
{{- end}}

### Development

Start the development server:
```bash
make dev
```

The API will be available at `http://localhost:8080`.

### Building

Build the application:
```bash
make build
```

Run the built binary:
```bash
make run
```

## API Documentation

The API documentation is available at:
- OpenAPI spec: `/api/openapi.yaml`
- When running: `http://localhost:8080/api/openapi.yaml`

## Available Endpoints

### Health Checks
- `GET /health` - Basic health check
- `GET /ready` - Readiness check

{{- if ne .AuthType ""}}
### Authentication
- `POST /api/v1/auth/login` - User login
- `POST /api/v1/auth/register` - User registration
{{- end}}

{{- if ne .DatabaseDriver ""}}
### Users
{{- if ne .AuthType ""}}
- `GET /api/v1/users` - List users (protected)
- `GET /api/v1/users/:id` - Get user (protected)
- `PUT /api/v1/users/:id` - Update user (protected)
- `DELETE /api/v1/users/:id` - Delete user (protected)
{{- else}}
- `GET /api/v1/users` - List users
- `GET /api/v1/users/:id` - Get user
- `POST /api/v1/users` - Create user
- `PUT /api/v1/users/:id` - Update user
- `DELETE /api/v1/users/:id` - Delete user
{{- end}}
{{- end}}

## Configuration

The application can be configured using environment variables or YAML files.

### Environment Variables

{{- if ne .DatabaseDriver ""}}
- `DB_HOST` - Database host
- `DB_PORT` - Database port
- `DB_NAME` - Database name
- `DB_USER` - Database user
- `DB_PASSWORD` - Database password
{{- end}}
- `SERVER_PORT` - Server port (default: 8080)
- `ENVIRONMENT` - Environment (development, production)
{{- if eq .AuthType "jwt"}}
- `JWT_SECRET` - JWT signing secret
{{- end}}

### Configuration Files

Configuration files are located in the `configs/` directory:
- `config.dev.yaml` - Development configuration
- `config.prod.yaml` - Production configuration
- `config.test.yaml` - Test configuration

## Development Commands

```bash
# Development
make dev          # Start development server with hot reload
make build        # Build the application
make run          # Run the built application

# Testing
make test         # Run tests with coverage
make lint         # Run linter

# Database (if enabled)
{{- if ne .DatabaseDriver ""}}
make migrate      # Run database migrations
make migrate-reset # Reset database
{{- end}}

# Docker
make docker-build # Build Docker image
make docker-run   # Run with Docker
{{- if ne .DatabaseDriver ""}}
make docker-up    # Start all services with Docker Compose
make docker-down  # Stop all services
{{- end}}

# Utilities
make clean        # Clean build artifacts
make fmt          # Format code
make tidy         # Tidy dependencies
make help         # Show available commands
```

## Project Structure

```
{{.ProjectName}}/
├── cmd/
│   └── server/           # Application entrypoint
├── internal/
│   ├── config/          # Configuration management
│   ├── handlers/        # HTTP handlers
│   ├── middleware/      # HTTP middleware
{{- if ne .DatabaseDriver ""}}
│   ├── database/        # Database connection and migrations
│   ├── models/          # Data models
│   ├── repository/      # Data access layer
│   ├── services/        # Business logic
{{- end}}
├── api/                 # API documentation
├── configs/             # Configuration files
{{- if ne .DatabaseDriver ""}}
├── migrations/          # Database migrations
{{- end}}
├── tests/               # Test files
├── scripts/             # Development scripts
├── Dockerfile           # Docker configuration
{{- if ne .DatabaseDriver ""}}
├── docker-compose.yml   # Docker Compose configuration
{{- end}}
└── Makefile            # Development commands
```

## Testing

Run the test suite:
```bash
make test
```

This will run all tests and generate a coverage report.

## Docker

### Build and run with Docker:
```bash
make docker-run
```

{{- if ne .DatabaseDriver ""}}
### Using Docker Compose:
```bash
# Start all services
make docker-up

# View logs
make logs

# Stop services
make docker-down
```
{{- end}}

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the {{.License}} License - see the LICENSE file for details.

## Support

If you have any questions or need help, please:
- Check the [API documentation](api/openapi.yaml)
- Review the configuration files in `configs/`
- Look at the example requests in `tests/`

---

Generated with [go-starter](https://github.com/your-org/go-starter) 🚀