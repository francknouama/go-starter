package logger

import (
	"context"
	"io"
	"os"

	"github.com/sirupsen/logrus"
)

// LogrusLogger wraps Logrus logger to implement our Logger interface
type LogrusLogger struct {
	logger *logrus.Logger
	entry  *logrus.Entry
	level  Level
	output io.Writer
}

// NewLogrusLogger creates a new logrus-based logger
func NewLogrusLogger(level Level, format Format, output io.Writer, structured bool) (*LogrusLogger, error) {
	if output == nil {
		output = os.Stdout
	}

	logger := logrus.New()
	logger.SetOutput(output)
	logger.SetLevel(convertToLogrusLevel(level))

	// Configure formatter based on format
	switch format {
	case JSONFormat:
		logger.SetFormatter(&logrus.JSONFormatter{
			TimestampFormat: "2006-01-02T15:04:05.000Z",
		})
	case TextFormat:
		logger.SetFormatter(&logrus.TextFormatter{
			FullTimestamp:   true,
			TimestampFormat: "2006-01-02T15:04:05.000Z",
		})
	case ConsoleFormat:
		logger.SetFormatter(&logrus.TextFormatter{
			FullTimestamp:   true,
			TimestampFormat: "15:04:05",
			ForceColors:     true,
		})
	default:
		logger.SetFormatter(&logrus.JSONFormatter{
			TimestampFormat: "2006-01-02T15:04:05.000Z",
		})
	}

	return &LogrusLogger{
		logger: logger,
		entry:  logger.WithFields(logrus.Fields{}),
		level:  level,
		output: output,
	}, nil
}

// Debug logs a debug message
func (l *LogrusLogger) Debug(msg string, args ...interface{}) {
	l.entry.Debugf(msg, args...)
}

// Info logs an info message
func (l *LogrusLogger) Info(msg string, args ...interface{}) {
	l.entry.Infof(msg, args...)
}

// Warn logs a warning message
func (l *LogrusLogger) Warn(msg string, args ...interface{}) {
	l.entry.Warnf(msg, args...)
}

// Error logs an error message
func (l *LogrusLogger) Error(msg string, args ...interface{}) {
	l.entry.Errorf(msg, args...)
}

// DebugWith logs a debug message with structured fields
func (l *LogrusLogger) DebugWith(msg string, fields Fields) {
	l.entry.WithFields(fieldsToLogrusFields(fields)).Debug(msg)
}

// InfoWith logs an info message with structured fields
func (l *LogrusLogger) InfoWith(msg string, fields Fields) {
	l.entry.WithFields(fieldsToLogrusFields(fields)).Info(msg)
}

// WarnWith logs a warning message with structured fields
func (l *LogrusLogger) WarnWith(msg string, fields Fields) {
	l.entry.WithFields(fieldsToLogrusFields(fields)).Warn(msg)
}

// ErrorWith logs an error message with structured fields
func (l *LogrusLogger) ErrorWith(msg string, fields Fields) {
	l.entry.WithFields(fieldsToLogrusFields(fields)).Error(msg)
}

// WithContext returns a logger with context
func (l *LogrusLogger) WithContext(ctx context.Context) Logger {
	return &LogrusLogger{
		logger: l.logger,
		entry:  l.entry.WithContext(ctx),
		level:  l.level,
		output: l.output,
	}
}

// WithFields returns a logger with additional fields
func (l *LogrusLogger) WithFields(fields Fields) Logger {
	return &LogrusLogger{
		logger: l.logger,
		entry:  l.entry.WithFields(fieldsToLogrusFields(fields)),
		level:  l.level,
		output: l.output,
	}
}

// SetLevel sets the log level
func (l *LogrusLogger) SetLevel(level Level) {
	l.level = level
	l.logger.SetLevel(convertToLogrusLevel(level))
}

// SetOutput sets the output writer
func (l *LogrusLogger) SetOutput(w io.Writer) {
	l.output = w
	l.logger.SetOutput(w)
}

// Sync flushes any buffered log entries (no-op for logrus)
func (l *LogrusLogger) Sync() error {
	// Logrus doesn't require explicit syncing
	return nil
}

// Helper functions

// convertToLogrusLevel converts our Level type to logrus.Level
func convertToLogrusLevel(level Level) logrus.Level {
	switch level {
	case DebugLevel:
		return logrus.DebugLevel
	case InfoLevel:
		return logrus.InfoLevel
	case WarnLevel:
		return logrus.WarnLevel
	case ErrorLevel:
		return logrus.ErrorLevel
	default:
		return logrus.InfoLevel
	}
}

// fieldsToLogrusFields converts Fields to logrus fields
func fieldsToLogrusFields(fields Fields) logrus.Fields {
	logrusFields := make(logrus.Fields, len(fields))
	for key, value := range fields {
		logrusFields[key] = value
	}
	return logrusFields
}