package integration

import (
	{{- if ne .DatabaseDriver ""}}
	"bytes"
	"database/sql"
	{{- end}}
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
	{{- if ne .AuthType ""}}
	"time"
	{{- end}}

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	{{- if ne .DatabaseDriver ""}}
	"gorm.io/gorm"
	{{- end}}
	{{- if ne .AuthType ""}}
	"github.com/golang-jwt/jwt/v5"
	{{- end}}

	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/logger"
	"{{.ModulePath}}/internal/middleware"
	{{- if ne .DatabaseDriver ""}}
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/models"
	"{{.ModulePath}}/internal/repository"
	"{{.ModulePath}}/internal/services"
	{{- end}}
)

type APITestSuite struct {
	suite.Suite
	router    *gin.Engine
	logger    logger.Logger
	{{- if ne .DatabaseDriver ""}}
	db          interface{} // Can be *gorm.DB or *sql.DB depending on ORM choice
	userService services.UserService
	{{- if ne .AuthType ""}}
	authService services.AuthService
	{{- end}}
	{{- end}}
}

func (suite *APITestSuite) SetupSuite() {
	// Set Gin to test mode
	gin.SetMode(gin.TestMode)

	// Initialize logger for tests
	loggerFactory := logger.NewFactory()
	var err error
	suite.logger, err = loggerFactory.CreateFromProjectConfig("{{.Logger}}", "error", "text", false)
	suite.Require().NoError(err)

	{{- if ne .DatabaseDriver ""}}
	// Setup test database (you might want to use SQLite for tests)
	cfg := config.DatabaseConfig{
		{{- if eq .DatabaseDriver "sqlite"}}
		Name: ":memory:", // In-memory SQLite for tests
		{{- else}}
		Host:     "localhost",
		Port:     {{if eq .DatabaseDriver "postgres"}}5432{{else}}3306{{end}},
		User:     "test",
		Password: "test",
		Name:     "test_{{lower .ProjectName}}",
		{{- end}}
		LogLevel: "error",
	}

	suite.db, err = database.Connect(cfg, suite.logger)
	suite.Require().NoError(err)

	// Run migrations
	{{- if eq .DatabaseORM "gorm"}}
	err = database.Migrate(suite.db.(*gorm.DB), suite.logger)
	{{- else}}
	err = database.Migrate(suite.db.(*sql.DB), suite.logger)
	{{- end}}
	suite.Require().NoError(err)

	// Setup services
	{{- if eq .DatabaseORM "gorm"}}
	userRepo := repository.NewUserRepository(suite.db.(*gorm.DB))
	{{- else}}
	userRepo := repository.NewUserRepository(suite.db.(*sql.DB))
	{{- end}}
	suite.userService = services.NewUserService(userRepo)

	{{- if ne .AuthType ""}}
	suite.authService = services.NewAuthService(suite.userService, "test-secret", time.Hour)
	{{- end}}
	{{- end}}

	// Setup router
	suite.router = gin.New()
	
	// Add middleware
	suite.router.Use(middleware.CORS())
	suite.router.Use(middleware.Logger(suite.logger))
	suite.router.Use(middleware.Recovery(suite.logger))

	// Setup routes
	suite.setupRoutes()
}

func (suite *APITestSuite) TearDownSuite() {
	{{- if ne .DatabaseDriver ""}}
	// Clean up database connection
	if suite.db != nil {
		database.Close()
	}
	{{- end}}
}

func (suite *APITestSuite) setupRoutes() {
	// Health routes
	healthHandler := handlers.NewHealthHandler()
	suite.router.GET("/health", healthHandler.Health)
	suite.router.GET("/ready", healthHandler.Ready)

	{{- if ne .DatabaseDriver ""}}
	// API routes
	api := suite.router.Group("/api/v1")
	
	{{- if ne .AuthType ""}}
	// Auth routes
	authHandler := handlers.NewAuthHandler(suite.authService)
	auth := api.Group("/auth")
	{
		auth.POST("/login", authHandler.Login)
		auth.POST("/register", authHandler.Register)
		auth.POST("/refresh", authHandler.Refresh)
		auth.POST("/logout", authHandler.Logout)
	}

	// Protected routes
	authMiddleware := middleware.NewAuthMiddleware(suite.authService)
	protected := api.Group("/")
	protected.Use(authMiddleware.RequireAuth())
	{{- end}}

	// User routes
	userHandler := handlers.NewUsersHandler(suite.userService)
	{{- if ne .AuthType ""}}
	users := protected.Group("/users")
	{{- else}}
	users := api.Group("/users")
	{{- end}}
	{
		users.GET("", userHandler.GetUsers)
		users.POST("", userHandler.CreateUser)
		users.GET("/:id", userHandler.GetUser)
		users.PUT("/:id", userHandler.UpdateUser)
		users.DELETE("/:id", userHandler.DeleteUser)
	}
	{{- end}}
}

// Test health endpoints
func (suite *APITestSuite) TestHealthEndpoints() {
	tests := []struct {
		name           string
		endpoint       string
		expectedStatus int
	}{
		{
			name:           "Health check should return 200",
			endpoint:       "/health",
			expectedStatus: http.StatusOK,
		},
		{
			name:           "Ready check should return 200",
			endpoint:       "/ready",
			expectedStatus: http.StatusOK,
		},
	}

	for _, tt := range tests {
		suite.Run(tt.name, func() {
			req, _ := http.NewRequest("GET", tt.endpoint, nil)
			w := httptest.NewRecorder()
			suite.router.ServeHTTP(w, req)

			assert.Equal(suite.T(), tt.expectedStatus, w.Code)
			
			var response map[string]interface{}
			err := json.Unmarshal(w.Body.Bytes(), &response)
			assert.NoError(suite.T(), err)
			assert.Equal(suite.T(), "healthy", response["status"])
		})
	}
}

{{- if ne .DatabaseDriver ""}}
{{- if ne .AuthType ""}}
// Test authentication endpoints
func (suite *APITestSuite) TestAuthEndpoints() {
	// Test registration
	suite.Run("Register new user", func() {
		payload := models.RegisterRequest{
			Name:     "Test User",
			Email:    "test@example.com",
			Password: "password123",
		}
		
		jsonPayload, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/api/v1/auth/register", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)

		assert.Equal(suite.T(), http.StatusCreated, w.Code)
		
		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(suite.T(), err)
		assert.Contains(suite.T(), response, "data")
	})

	// Test login
	suite.Run("Login with valid credentials", func() {
		payload := models.LoginRequest{
			Email:    "test@example.com",
			Password: "password123",
		}
		
		jsonPayload, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/api/v1/auth/login", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)

		assert.Equal(suite.T(), http.StatusOK, w.Code)
		
		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(suite.T(), err)
		assert.Contains(suite.T(), response, "token")
		assert.Contains(suite.T(), response, "user")
	})

	// Test login with invalid credentials
	suite.Run("Login with invalid credentials", func() {
		payload := models.LoginRequest{
			Email:    "test@example.com",
			Password: "wrongpassword",
		}
		
		jsonPayload, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/api/v1/auth/login", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)

		assert.Equal(suite.T(), http.StatusUnauthorized, w.Code)
	})
}
{{- end}}

// Test user endpoints
func (suite *APITestSuite) TestUserEndpoints() {
	{{- if ne .AuthType ""}}
	// First, register and login to get a token
	var token string
	suite.Run("Setup: Register and login user", func() {
		// Register
		payload := models.RegisterRequest{
			Name:     "API Test User",
			Email:    "apitest@example.com",
			Password: "password123",
		}
		
		jsonPayload, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/api/v1/auth/register", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)
		assert.Equal(suite.T(), http.StatusCreated, w.Code)

		// Login
		loginPayload := models.LoginRequest{
			Email:    "apitest@example.com",
			Password: "password123",
		}
		
		jsonPayload, _ = json.Marshal(loginPayload)
		req, _ = http.NewRequest("POST", "/api/v1/auth/login", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		
		w = httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)
		assert.Equal(suite.T(), http.StatusOK, w.Code)
		
		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(suite.T(), err)
		token = response["token"].(string)
	})
	{{- end}}

	// Test creating a user
	suite.Run("Create user", func() {
		payload := models.CreateUserRequest{
			Name:  "New User",
			Email: "newuser@example.com",
		}
		
		jsonPayload, _ := json.Marshal(payload)
		req, _ := http.NewRequest("POST", "/api/v1/users", bytes.NewBuffer(jsonPayload))
		req.Header.Set("Content-Type", "application/json")
		{{- if ne .AuthType ""}}
		req.Header.Set("Authorization", "Bearer "+token)
		{{- end}}
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)

		assert.Equal(suite.T(), http.StatusCreated, w.Code)
		
		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(suite.T(), err)
		assert.Contains(suite.T(), response, "data")
	})

	// Test getting users
	suite.Run("Get users", func() {
		req, _ := http.NewRequest("GET", "/api/v1/users", nil)
		{{- if ne .AuthType ""}}
		req.Header.Set("Authorization", "Bearer "+token)
		{{- end}}
		
		w := httptest.NewRecorder()
		suite.router.ServeHTTP(w, req)

		assert.Equal(suite.T(), http.StatusOK, w.Code)
		
		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(suite.T(), err)
		assert.Contains(suite.T(), response, "data")
		assert.Contains(suite.T(), response, "pagination")
	})
}
{{- end}}

// Run the test suite
func TestAPITestSuite(t *testing.T) {
	suite.Run(t, new(APITestSuite))
}