package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"{{.ModulePath}}/internal/logger"
)

var (
	cfgFile string
	verbose bool
	appLogger logger.Logger
)

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "{{.ProjectName}}",
	Short: "A CLI application built with Go",
	Long: `{{.ProjectName}} is a command-line application built with Go and Cobra.
	
This application provides a foundation for building robust CLI tools with:
- Structured logging ({{.Logger}})
- Configuration management
- Subcommand support
- Environment variable integration`,
	
	Run: func(cmd *cobra.Command, args []string) {
		appLogger.InfoWith("{{.ProjectName}} started", logger.Fields{
			"args": args,
			"logger": "{{.Logger}}",
		})
		
		fmt.Printf("Welcome to %s!\n", "{{.ProjectName}}")
		fmt.Println("Use --help to see available commands.")
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute(log logger.Logger) error {
	appLogger = log
	return rootCmd.Execute()
}

func init() {
	cobra.OnInitialize(initConfig)

	// Global flags
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.{{.ProjectName}}.yaml)")
	rootCmd.PersistentFlags().BoolVar(&verbose, "verbose", false, "verbose output")
	
	// Bind flags to viper
	viper.BindPFlag("verbose", rootCmd.PersistentFlags().Lookup("verbose"))
}

// initConfig reads in config file and ENV variables.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".{{.ProjectName}}" (without extension).
		viper.AddConfigPath(home)
		viper.AddConfigPath("./configs")
		viper.AddConfigPath(".")
		viper.SetConfigType("yaml")
		viper.SetConfigName(".{{.ProjectName}}")
	}

	viper.AutomaticEnv() // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil && verbose {
		fmt.Fprintln(os.Stderr, "Using config file:", viper.ConfigFileUsed())
	}
}