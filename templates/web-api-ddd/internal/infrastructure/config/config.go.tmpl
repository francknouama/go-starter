package config

import (
	"fmt"
	"os"
	{{if ne .DatabaseDriver ""}}
	"strconv"
	{{end}}
	"strings"

	"github.com/spf13/viper"
)

// Config holds all application configuration
type Config struct {
	Server   *ServerConfig   `mapstructure:"server"`
	{{if ne .DatabaseDriver ""}}
	Database *DatabaseConfig `mapstructure:"database"`
	{{end}}
	{{if ne .AuthType ""}}
	Auth     *AuthConfig     `mapstructure:"auth"`
	{{end}}
	Logger   *LoggerConfig   `mapstructure:"logger"`
	Email    *EmailConfig    `mapstructure:"email"`
}

// ServerConfig holds server configuration
type ServerConfig struct {
	Host         string `mapstructure:"host"`
	Port         string `mapstructure:"port"`
	Environment  string `mapstructure:"environment"`
	ReadTimeout  int    `mapstructure:"read_timeout"`
	WriteTimeout int    `mapstructure:"write_timeout"`
	IdleTimeout  int    `mapstructure:"idle_timeout"`
}

{{if ne .DatabaseDriver ""}}
// DatabaseConfig holds database configuration
type DatabaseConfig struct {
	Driver          string `mapstructure:"driver"`
	Host            string `mapstructure:"host"`
	Port            int    `mapstructure:"port"`
	Database        string `mapstructure:"database"`
	Username        string `mapstructure:"username"`
	Password        string `mapstructure:"password"`
	SSLMode         string `mapstructure:"ssl_mode"`
	MaxOpenConns    int    `mapstructure:"max_open_conns"`
	MaxIdleConns    int    `mapstructure:"max_idle_conns"`
	ConnMaxLifetime int    `mapstructure:"conn_max_lifetime"`
}

// GetDSN returns the database connection string
func (dc *DatabaseConfig) GetDSN() string {
	switch dc.Driver {
	case "postgres":
		return fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
			dc.Host, dc.Port, dc.Username, dc.Password, dc.Database, dc.SSLMode)
	case "mysql":
		return fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local",
			dc.Username, dc.Password, dc.Host, dc.Port, dc.Database)
	case "sqlite":
		return dc.Database
	default:
		return ""
	}
}
{{end}}

{{if ne .AuthType ""}}
// AuthConfig holds authentication configuration
type AuthConfig struct {
	JWTSecret           string `mapstructure:"jwt_secret"`
	AccessTokenExpiry   int    `mapstructure:"access_token_expiry"`   // in minutes
	RefreshTokenExpiry  int    `mapstructure:"refresh_token_expiry"`  // in days
	PasswordMinLength   int    `mapstructure:"password_min_length"`
	SessionTimeout      int    `mapstructure:"session_timeout"`       // in minutes
	MaxActiveSessions   int    `mapstructure:"max_active_sessions"`
}
{{end}}

// LoggerConfig holds logging configuration
type LoggerConfig struct {
	Level  string `mapstructure:"level"`
	Format string `mapstructure:"format"`
	Output string `mapstructure:"output"`
}

// EmailConfig holds email service configuration
type EmailConfig struct {
	Provider  string `mapstructure:"provider"`
	SMTPHost  string `mapstructure:"smtp_host"`
	SMTPPort  int    `mapstructure:"smtp_port"`
	SMTPUser  string `mapstructure:"smtp_user"`
	SMTPPass  string `mapstructure:"smtp_pass"`
	FromEmail string `mapstructure:"from_email"`
	FromName  string `mapstructure:"from_name"`
}

// Load loads configuration from various sources
func Load() (*Config, error) {
	// Set default configuration file name and paths
	viper.SetConfigName("config")
	viper.SetConfigType("yaml")
	viper.AddConfigPath("./configs")
	viper.AddConfigPath(".")

	// Enable environment variable support
	viper.AutomaticEnv()
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))

	// Set default values
	setDefaults()

	// Read configuration file
	if err := viper.ReadInConfig(); err != nil {
		if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
			return nil, fmt.Errorf("failed to read config file: %w", err)
		}
		// Config file not found, will use defaults and environment variables
	}

	// Override with environment variables
	loadFromEnvironment()

	// Unmarshal configuration
	var config Config
	if err := viper.Unmarshal(&config); err != nil {
		return nil, fmt.Errorf("failed to unmarshal config: %w", err)
	}

	// Validate configuration
	if err := config.Validate(); err != nil {
		return nil, fmt.Errorf("config validation failed: %w", err)
	}

	return &config, nil
}

// setDefaults sets default configuration values
func setDefaults() {
	// Server defaults
	viper.SetDefault("server.host", "0.0.0.0")
	viper.SetDefault("server.port", "8080")
	viper.SetDefault("server.environment", "development")
	viper.SetDefault("server.read_timeout", 30)
	viper.SetDefault("server.write_timeout", 30)
	viper.SetDefault("server.idle_timeout", 60)

	{{if ne .DatabaseDriver ""}}
	// Database defaults
	viper.SetDefault("database.driver", "{{.DatabaseDriver}}")
	viper.SetDefault("database.host", "localhost")
	{{if eq .DatabaseDriver "postgres"}}
	viper.SetDefault("database.port", 5432)
	{{else if eq .DatabaseDriver "mysql"}}
	viper.SetDefault("database.port", 3306)
	{{end}}
	viper.SetDefault("database.database", "{{.ProjectName}}")
	viper.SetDefault("database.username", "{{.ProjectName}}")
	viper.SetDefault("database.password", "password")
	viper.SetDefault("database.ssl_mode", "disable")
	viper.SetDefault("database.max_open_conns", 25)
	viper.SetDefault("database.max_idle_conns", 5)
	viper.SetDefault("database.conn_max_lifetime", 300)
	{{end}}

	{{if ne .AuthType ""}}
	// Auth defaults
	viper.SetDefault("auth.jwt_secret", "your-super-secret-jwt-key-change-this-in-production")
	viper.SetDefault("auth.access_token_expiry", 15)   // 15 minutes
	viper.SetDefault("auth.refresh_token_expiry", 7)   // 7 days
	viper.SetDefault("auth.password_min_length", 8)
	viper.SetDefault("auth.session_timeout", 60)       // 1 hour
	viper.SetDefault("auth.max_active_sessions", 5)
	{{end}}

	// Logger defaults
	viper.SetDefault("logger.level", "info")
	viper.SetDefault("logger.format", "json")
	viper.SetDefault("logger.output", "stdout")

	// Email defaults
	viper.SetDefault("email.provider", "smtp")
	viper.SetDefault("email.smtp_host", "localhost")
	viper.SetDefault("email.smtp_port", 587)
	viper.SetDefault("email.from_email", "noreply@{{.ProjectName}}.com")
	viper.SetDefault("email.from_name", "{{.ProjectName}}")
}

// loadFromEnvironment loads configuration from environment variables
func loadFromEnvironment() {
	// Server configuration
	if port := os.Getenv("PORT"); port != "" {
		viper.Set("server.port", port)
	}
	if env := os.Getenv("ENVIRONMENT"); env != "" {
		viper.Set("server.environment", env)
	}

	{{if ne .DatabaseDriver ""}}
	// Database configuration
	if dbURL := os.Getenv("DATABASE_URL"); dbURL != "" {
		// Parse DATABASE_URL if provided (common in cloud environments)
		// This is a simplified implementation - you might want to use a proper URL parser
		viper.Set("database.url", dbURL)
	}
	if dbHost := os.Getenv("DB_HOST"); dbHost != "" {
		viper.Set("database.host", dbHost)
	}
	if dbPort := os.Getenv("DB_PORT"); dbPort != "" {
		if port, err := strconv.Atoi(dbPort); err == nil {
			viper.Set("database.port", port)
		}
	}
	if dbName := os.Getenv("DB_NAME"); dbName != "" {
		viper.Set("database.database", dbName)
	}
	if dbUser := os.Getenv("DB_USER"); dbUser != "" {
		viper.Set("database.username", dbUser)
	}
	if dbPass := os.Getenv("DB_PASSWORD"); dbPass != "" {
		viper.Set("database.password", dbPass)
	}
	{{end}}

	{{if ne .AuthType ""}}
	// Auth configuration
	if jwtSecret := os.Getenv("JWT_SECRET"); jwtSecret != "" {
		viper.Set("auth.jwt_secret", jwtSecret)
	}
	{{end}}

	// Email configuration
	if smtpHost := os.Getenv("SMTP_HOST"); smtpHost != "" {
		viper.Set("email.smtp_host", smtpHost)
	}
	if smtpUser := os.Getenv("SMTP_USER"); smtpUser != "" {
		viper.Set("email.smtp_user", smtpUser)
	}
	if smtpPass := os.Getenv("SMTP_PASSWORD"); smtpPass != "" {
		viper.Set("email.smtp_pass", smtpPass)
	}
}

// Validate validates the configuration
func (c *Config) Validate() error {
	if c.Server.Port == "" {
		return fmt.Errorf("server port is required")
	}

	{{if ne .DatabaseDriver ""}}
	if c.Database.Driver == "" {
		return fmt.Errorf("database driver is required")
	}
	{{end}}

	{{if ne .AuthType ""}}
	if c.Auth.JWTSecret == "" || c.Auth.JWTSecret == "your-super-secret-jwt-key-change-this-in-production" {
		if c.Server.Environment == "production" {
			return fmt.Errorf("JWT secret must be set in production")
		}
	}
	{{end}}

	return nil
}

// LoadConfig loads configuration using the Load function (alias for convenience)
func LoadConfig() *Config {
	config, err := Load()
	if err != nil {
		panic(fmt.Sprintf("Failed to load configuration: %v", err))
	}
	return config
}