package logger

import (
	{{if eq .Logger "zap"}}
	"fmt"
	{{end}}
	"os"
{{- if eq .Logger "zap"}}
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
{{- else if eq .Logger "logrus"}}
	"github.com/sirupsen/logrus"
{{- else if eq .Logger "zerolog"}}
	"github.com/rs/zerolog"
{{- else}}
	"log/slog"
{{- end}}
)

// LoggerType represents the type of logger to create
type LoggerType string

const (
	SlogLogger   LoggerType = "slog"
	ZapLogger    LoggerType = "zap"
	LogrusLogger LoggerType = "logrus"
	ZerologLogger LoggerType = "zerolog"
)

// Factory creates loggers based on configuration
type Factory struct {
	loggerType LoggerType
	level      string
}

// NewFactory creates a new logger factory
func NewFactory(loggerType LoggerType, level string) *Factory {
	return &Factory{
		loggerType: loggerType,
		level:      level,
	}
}

// CreateLogger creates a logger instance based on the configured type
func (f *Factory) CreateLogger() (DomainLogger, error) {
	switch f.loggerType {
{{- if eq .Logger "slog"}}
	case SlogLogger:
		return f.createSlogLogger()
{{- else if eq .Logger "zap"}}
	case ZapLogger:
		return f.createZapLogger()
{{- else if eq .Logger "logrus"}}
	case LogrusLogger:
		return f.createLogrusLogger()
{{- else if eq .Logger "zerolog"}}
	case ZerologLogger:
		return f.createZerologLogger()
{{- end}}
	default:
		return f.createSlogLogger() // Default fallback
	}
}

{{- if eq .Logger "slog"}}
func (f *Factory) createSlogLogger() (DomainLogger, error) {
	level := f.parseLevel(f.level)
	opts := &slog.HandlerOptions{
		Level: level,
	}
	
	handler := slog.NewJSONHandler(os.Stdout, opts)
	logger := slog.New(handler)
	
	return NewSlogDomainLogger(logger), nil
}
{{- else if eq .Logger "zap"}}
func (f *Factory) createZapLogger() (DomainLogger, error) {
	level := f.parseZapLevel(f.level)
	
	config := zap.Config{
		Level:    zap.NewAtomicLevelAt(level),
		Encoding: "json",
		EncoderConfig: zapcore.EncoderConfig{
			TimeKey:        "timestamp",
			LevelKey:       "level",
			NameKey:        "logger",
			CallerKey:      "caller",
			MessageKey:     "message",
			StacktraceKey:  "stacktrace",
			LineEnding:     zapcore.DefaultLineEnding,
			EncodeLevel:    zapcore.LowercaseLevelEncoder,
			EncodeTime:     zapcore.ISO8601TimeEncoder,
			EncodeDuration: zapcore.SecondsDurationEncoder,
			EncodeCaller:   zapcore.ShortCallerEncoder,
		},
		OutputPaths:      []string{"stdout"},
		ErrorOutputPaths: []string{"stderr"},
	}
	
	logger, err := config.Build()
	if err != nil {
		return nil, fmt.Errorf("failed to create zap logger: %w", err)
	}
	
	return NewZapDomainLogger(logger), nil
}
{{- else if eq .Logger "logrus"}}
func (f *Factory) createLogrusLogger() (DomainLogger, error) {
	logger := logrus.New()
	logger.SetFormatter(&logrus.JSONFormatter{})
	logger.SetOutput(os.Stdout)
	
	level := f.parseLogrusLevel(f.level)
	logger.SetLevel(level)
	
	return NewLogrusDomainLogger(logger), nil
}
{{- else if eq .Logger "zerolog"}}
func (f *Factory) createZerologLogger() (DomainLogger, error) {
	level := f.parseZerologLevel(f.level)
	
	logger := zerolog.New(os.Stdout).
		With().
		Timestamp().
		Logger().
		Level(level)
	
	return NewZerologDomainLogger(&logger), nil
}
{{- end}}

func (f *Factory) parseLevel(level string) slog.Level {
	switch level {
	case "debug":
		return slog.LevelDebug
	case "info":
		return slog.LevelInfo
	case "warn":
		return slog.LevelWarn
	case "error":
		return slog.LevelError
	default:
		return slog.LevelInfo
	}
}

{{- if eq .Logger "zap"}}
func (f *Factory) parseZapLevel(level string) zapcore.Level {
	switch level {
	case "debug":
		return zapcore.DebugLevel
	case "info":
		return zapcore.InfoLevel
	case "warn":
		return zapcore.WarnLevel
	case "error":
		return zapcore.ErrorLevel
	default:
		return zapcore.InfoLevel
	}
}
{{- else if eq .Logger "logrus"}}
func (f *Factory) parseLogrusLevel(level string) logrus.Level {
	switch level {
	case "debug":
		return logrus.DebugLevel
	case "info":
		return logrus.InfoLevel
	case "warn":
		return logrus.WarnLevel
	case "error":
		return logrus.ErrorLevel
	default:
		return logrus.InfoLevel
	}
}
{{- else if eq .Logger "zerolog"}}
func (f *Factory) parseZerologLevel(level string) zerolog.Level {
	switch level {
	case "debug":
		return zerolog.DebugLevel
	case "info":
		return zerolog.InfoLevel
	case "warn":
		return zerolog.WarnLevel
	case "error":
		return zerolog.ErrorLevel
	default:
		return zerolog.InfoLevel
	}
}
{{- end}}