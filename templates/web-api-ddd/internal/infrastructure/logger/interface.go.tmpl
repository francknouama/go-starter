package logger

import "context"

// Logger defines the interface for logging throughout the application
type Logger interface {
	// Debug logs debug messages
	Debug(msg string, keysAndValues ...interface{})
	
	// Info logs info messages
	Info(msg string, keysAndValues ...interface{})
	
	// Warn logs warning messages
	Warn(msg string, keysAndValues ...interface{})
	
	// Error logs error messages
	Error(msg string, keysAndValues ...interface{})
	
	// WithContext returns a logger with context
	WithContext(ctx context.Context) Logger
	
	// WithFields returns a logger with predefined fields
	WithFields(fields map[string]interface{}) Logger
}

// DomainLogger extends Logger with domain-specific logging capabilities
type DomainLogger interface {
	Logger
	
	// LogDomainEvent logs domain events
	LogDomainEvent(event string, entity string, entityID string, keysAndValues ...interface{})
	
	// LogCommand logs command execution
	LogCommand(command string, keysAndValues ...interface{})
	
	// LogQuery logs query execution
	LogQuery(query string, keysAndValues ...interface{})
}