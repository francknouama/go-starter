{{- if ne .AuthType ""}}
package handlers

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"{{.ModulePath}}/internal/application/auth"
	"{{.ModulePath}}/internal/infrastructure/logger"
)

// AuthEchoHandlers handles authentication HTTP requests using Echo framework
type AuthEchoHandlers struct {
	authService *auth.Service
	logger      *logger.Logger
}

// NewAuthEchoHandlers creates a new auth Echo handlers instance
func NewAuthEchoHandlers(
	authSvc *auth.Service,
	log *logger.Logger,
) *AuthEchoHandlers {
	return &AuthEchoHandlers{
		authService: authSvc,
		logger:      log,
	}
}

// RegisterRoutes registers all authentication routes
func (h *AuthEchoHandlers) RegisterRoutes(e *echo.Echo) {
	api := e.Group("/api/v1")
	authGroup := api.Group("/auth")
	{
		authGroup.POST("/login", h.Login)
		authGroup.POST("/register", h.Register)
		authGroup.POST("/refresh", h.RefreshToken)
		authGroup.POST("/logout", h.Logout)
	}
}

// Login handles user login
func (h *AuthEchoHandlers) Login(c echo.Context) error {
	var req auth.LoginRequest
	if err := c.Bind(&req); err != nil {
		h.logger.Error("Failed to bind login request", "error", err)
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request format"})
	}

	cmd := req.ToLoginCommand()
	result, err := h.authService.HandleLogin(c.Request().Context(), cmd)
	if err != nil {
		h.logger.Error("Login failed", "error", err, "name", req.Name)
		return c.JSON(http.StatusUnauthorized, map[string]string{"error": "Invalid credentials"})
	}

	return c.JSON(http.StatusOK, result)
}

// Register handles user registration
func (h *AuthEchoHandlers) Register(c echo.Context) error {
	var req auth.RegisterRequest
	if err := c.Bind(&req); err != nil {
		h.logger.Error("Failed to bind register request", "error", err)
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request format"})
	}

	cmd := req.ToRegisterCommand()
	result, err := h.authService.HandleRegister(c.Request().Context(), cmd)
	if err != nil {
		h.logger.Error("Registration failed", "error", err, "name", req.Name)
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Registration failed"})
	}

	return c.JSON(http.StatusCreated, result)
}

// RefreshToken handles token refresh
func (h *AuthEchoHandlers) RefreshToken(c echo.Context) error {
	var req auth.RefreshTokenRequest
	if err := c.Bind(&req); err != nil {
		h.logger.Error("Failed to bind refresh token request", "error", err)
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request format"})
	}

	cmd := req.ToRefreshTokenCommand()
	result, err := h.authService.HandleRefreshToken(c.Request().Context(), cmd)
	if err != nil {
		h.logger.Error("Token refresh failed", "error", err)
		return c.JSON(http.StatusUnauthorized, map[string]string{"error": "Invalid refresh token"})
	}

	return c.JSON(http.StatusOK, result)
}

// Logout handles user logout
func (h *AuthEchoHandlers) Logout(c echo.Context) error {
	// In a real implementation, you would extract the user ID from the JWT token
	// For now, we'll just return success as logout is handled client-side
	// by removing the token
	
	return c.JSON(http.StatusOK, map[string]string{"message": "Logged out successfully"})
}
{{- end}}