{{- if ne .DatabaseDriver ""}}
package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"{{.ModulePath}}/internal/application/{{.DomainName}}"
	"{{.ModulePath}}/internal/infrastructure/logger"
)

// ChiHandlers handles HTTP requests using Chi framework
type ChiHandlers struct {
	commandHandlers *{{.DomainName}}.CommandHandlers
	queryHandlers   *{{.DomainName}}.QueryHandlers
	logger          logger.Logger
}

// NewChiHandlers creates a new Chi handlers instance
func NewChiHandlers(
	commandHandlers *{{.DomainName}}.CommandHandlers,
	queryHandlers *{{.DomainName}}.QueryHandlers,
	log logger.Logger,
) *ChiHandlers {
	return &ChiHandlers{
		commandHandlers: commandHandlers,
		queryHandlers:   queryHandlers,
		logger:          log,
	}
}

// RegisterRoutes registers all routes for the {{.DomainName}} domain
func (h *ChiHandlers) RegisterRoutes(r chi.Router) {
	r.Route("/api/v1/{{.DomainName}}s", func(r chi.Router) {
		r.Post("/", h.Create{{.DomainName | title}})
		r.Get("/{id}", h.Get{{.DomainName | title}}ByID)
		r.Put("/{id}", h.Update{{.DomainName | title}})
		r.Delete("/{id}", h.Delete{{.DomainName | title}})
		r.Get("/", h.List{{.DomainName | title}}s)
		r.Get("/email/{email}", h.Get{{.DomainName | title}}ByEmail)
	})
}

// Create{{.DomainName | title}} handles creating a new {{.DomainName}}
func (h *ChiHandlers) Create{{.DomainName | title}}(w http.ResponseWriter, r *http.Request) {
	var req {{.DomainName}}.Create{{.DomainName | title}}Request
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Error("Failed to decode request", "error", err)
		respondWithError(w, http.StatusBadRequest, "Invalid request format")
		return
	}

	cmd := req.ToCommand()
	{{.DomainName}}DTO, err := h.commandHandlers.HandleCreate{{.DomainName | title}}(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Failed to create {{.DomainName}}", "error", err)
		respondWithError(w, http.StatusInternalServerError, "Failed to create {{.DomainName}}")
		return
	}

	respondWithJSON(w, http.StatusCreated, {{.DomainName}}DTO)
}

// Get{{.DomainName | title}}ByID handles getting a {{.DomainName}} by ID
func (h *ChiHandlers) Get{{.DomainName | title}}ByID(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	if id == "" {
		respondWithError(w, http.StatusBadRequest, "ID is required")
		return
	}

	query := {{.DomainName}}.Get{{.DomainName | title}}ByIDQuery{ID: id}
	{{.DomainName}}DTO, err := h.queryHandlers.HandleGet{{.DomainName | title}}ByID(r.Context(), query)
	if err != nil {
		h.logger.Error("Failed to get {{.DomainName}}", "error", err, "id", id)
		respondWithError(w, http.StatusNotFound, "{{.DomainName | title}} not found")
		return
	}

	respondWithJSON(w, http.StatusOK, {{.DomainName}}DTO)
}

// Get{{.DomainName | title}}ByEmail handles getting a {{.DomainName}} by email
func (h *ChiHandlers) Get{{.DomainName | title}}ByEmail(w http.ResponseWriter, r *http.Request) {
	email := chi.URLParam(r, "email")
	if email == "" {
		respondWithError(w, http.StatusBadRequest, "Email is required")
		return
	}

	query := {{.DomainName}}.Get{{.DomainName | title}}ByEmailQuery{Email: email}
	{{.DomainName}}DTO, err := h.queryHandlers.HandleGet{{.DomainName | title}}ByEmail(r.Context(), query)
	if err != nil {
		h.logger.Error("Failed to get {{.DomainName}} by email", "error", err, "email", email)
		respondWithError(w, http.StatusNotFound, "{{.DomainName | title}} not found")
		return
	}

	respondWithJSON(w, http.StatusOK, {{.DomainName}}DTO)
}

// Update{{.DomainName | title}} handles updating a {{.DomainName}}
func (h *ChiHandlers) Update{{.DomainName | title}}(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	if id == "" {
		respondWithError(w, http.StatusBadRequest, "ID is required")
		return
	}

	var req {{.DomainName}}.Update{{.DomainName | title}}Request
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Error("Failed to decode request", "error", err)
		respondWithError(w, http.StatusBadRequest, "Invalid request format")
		return
	}

	cmd := req.ToCommand(id)
	{{.DomainName}}DTO, err := h.commandHandlers.HandleUpdate{{.DomainName | title}}(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Failed to update {{.DomainName}}", "error", err, "id", id)
		respondWithError(w, http.StatusInternalServerError, "Failed to update {{.DomainName}}")
		return
	}

	respondWithJSON(w, http.StatusOK, {{.DomainName}}DTO)
}

// Delete{{.DomainName | title}} handles deleting a {{.DomainName}}
func (h *ChiHandlers) Delete{{.DomainName | title}}(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")
	if id == "" {
		respondWithError(w, http.StatusBadRequest, "ID is required")
		return
	}

	cmd := {{.DomainName}}.Delete{{.DomainName | title}}Command{ID: id}
	err := h.commandHandlers.HandleDelete{{.DomainName | title}}(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Failed to delete {{.DomainName}}", "error", err, "id", id)
		respondWithError(w, http.StatusInternalServerError, "Failed to delete {{.DomainName}}")
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

// List{{.DomainName | title}}s handles listing {{.DomainName}}s with pagination
func (h *ChiHandlers) List{{.DomainName | title}}s(w http.ResponseWriter, r *http.Request) {
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	limit, _ := strconv.Atoi(r.URL.Query().Get("limit"))

	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 10
	}

	query := {{.DomainName}}.List{{.DomainName | title}}sQuery{
		Page:  page,
		Limit: limit,
	}

	{{.DomainName}}List, err := h.queryHandlers.HandleList{{.DomainName | title}}s(r.Context(), query)
	if err != nil {
		h.logger.Error("Failed to list {{.DomainName}}s", "error", err)
		respondWithError(w, http.StatusInternalServerError, "Failed to list {{.DomainName}}s")
		return
	}

	respondWithJSON(w, http.StatusOK, {{.DomainName}}List)
}

// Helper functions for Chi handlers
func respondWithJSON(w http.ResponseWriter, code int, payload interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	if payload != nil {
		json.NewEncoder(w).Encode(payload)
	}
}

func respondWithError(w http.ResponseWriter, code int, message string) {
	respondWithJSON(w, code, map[string]string{"error": message})
}
{{- end}}