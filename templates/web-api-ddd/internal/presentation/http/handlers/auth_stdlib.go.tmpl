{{- if ne .AuthType ""}}
package handlers

import (
	"encoding/json"
	"net/http"

	"{{.ModulePath}}/internal/application/auth"
	"{{.ModulePath}}/internal/infrastructure/logger"
)

// AuthStdlibHandlers handles authentication HTTP requests using the standard library
type AuthStdlibHandlers struct {
	authService *auth.Service
	logger      *logger.Logger
}

// NewAuthStdlibHandlers creates a new auth standard library handlers instance
func NewAuthStdlibHandlers(
	authSvc *auth.Service,
	log *logger.Logger,
) *AuthStdlibHandlers {
	return &AuthStdlibHandlers{
		authService: authSvc,
		logger:      log,
	}
}

// RegisterRoutes registers all authentication routes
func (h *AuthStdlibHandlers) RegisterRoutes(mux *http.ServeMux) {
	mux.HandleFunc("/api/v1/auth/login", h.Login)
	mux.HandleFunc("/api/v1/auth/register", h.Register)
	mux.HandleFunc("/api/v1/auth/refresh", h.RefreshToken)
	mux.HandleFunc("/api/v1/auth/logout", h.Logout)
}

// Login handles user login
func (h *AuthStdlibHandlers) Login(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.jsonError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req auth.LoginRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Error("Failed to bind login request", "error", err)
		h.jsonError(w, "Invalid request format", http.StatusBadRequest)
		return
	}

	cmd := req.ToLoginCommand()
	result, err := h.authService.HandleLogin(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Login failed", "error", err, "name", req.Name)
		h.jsonError(w, "Invalid credentials", http.StatusUnauthorized)
		return
	}

	h.jsonResponse(w, result, http.StatusOK)
}

// Register handles user registration
func (h *AuthStdlibHandlers) Register(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.jsonError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req auth.RegisterRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Error("Failed to bind register request", "error", err)
		h.jsonError(w, "Invalid request format", http.StatusBadRequest)
		return
	}

	cmd := req.ToRegisterCommand()
	result, err := h.authService.HandleRegister(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Registration failed", "error", err, "name", req.Name)
		h.jsonError(w, "Registration failed", http.StatusBadRequest)
		return
	}

	h.jsonResponse(w, result, http.StatusCreated)
}

// RefreshToken handles token refresh
func (h *AuthStdlibHandlers) RefreshToken(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.jsonError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req auth.RefreshTokenRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.logger.Error("Failed to bind refresh token request", "error", err)
		h.jsonError(w, "Invalid request format", http.StatusBadRequest)
		return
	}

	cmd := req.ToRefreshTokenCommand()
	result, err := h.authService.HandleRefreshToken(r.Context(), cmd)
	if err != nil {
		h.logger.Error("Token refresh failed", "error", err)
		h.jsonError(w, "Invalid refresh token", http.StatusUnauthorized)
		return
	}

	h.jsonResponse(w, result, http.StatusOK)
}

// Logout handles user logout
func (h *AuthStdlibHandlers) Logout(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		h.jsonError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// In a real implementation, you would extract the user ID from the JWT token
	// For now, we'll just return success as logout is handled client-side
	// by removing the token
	
	h.jsonResponse(w, map[string]string{"message": "Logged out successfully"}, http.StatusOK)
}

// jsonError writes an error response in JSON format
func (h *AuthStdlibHandlers) jsonError(w http.ResponseWriter, message string, status int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(map[string]string{"error": message})
}

// jsonResponse writes a success response in JSON format
func (h *AuthStdlibHandlers) jsonResponse(w http.ResponseWriter, data interface{}, status int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(data)
}
{{- end}}