{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"{{.ModulePath}}/internal/shared/events"
	"{{.ModulePath}}/internal/shared/valueobjects"
)

// Event types
const (
	{{.DomainName | title}}CreatedEventType      = "{{.DomainName}}.created"
	{{.DomainName | title}}UpdatedEventType      = "{{.DomainName}}.updated"
	{{.DomainName | title}}StatusChangedEventType = "{{.DomainName}}.status_changed"
)

// {{.DomainName | title}}CreatedEvent represents the event when a {{.DomainName}} is created
type {{.DomainName | title}}CreatedEvent struct {
	events.BaseDomainEvent
	Name string
}

// New{{.DomainName | title}}CreatedEvent creates a new {{.DomainName}} created event
func New{{.DomainName | title}}CreatedEvent({{.DomainName}}ID valueobjects.ID, name string) {{.DomainName | title}}CreatedEvent {
	data := map[string]interface{}{
		"name": name,
	}
	
	return {{.DomainName | title}}CreatedEvent{
		BaseDomainEvent: events.NewBaseDomainEvent(
			{{.DomainName | title}}CreatedEventType,
			{{.DomainName}}ID,
			"{{.DomainName}}",
			data,
		),
		Name: name,
	}
}

// {{.DomainName | title}}UpdatedEvent represents the event when a {{.DomainName}} is updated
type {{.DomainName | title}}UpdatedEvent struct {
	events.BaseDomainEvent
	Field    string
	OldValue interface{}
	NewValue interface{}
}

// New{{.DomainName | title}}UpdatedEvent creates a new {{.DomainName}} updated event
func New{{.DomainName | title}}UpdatedEvent({{.DomainName}}ID valueobjects.ID, field string, oldValue, newValue interface{}) {{.DomainName | title}}UpdatedEvent {
	data := map[string]interface{}{
		"field":     field,
		"old_value": oldValue,
		"new_value": newValue,
	}
	
	return {{.DomainName | title}}UpdatedEvent{
		BaseDomainEvent: events.NewBaseDomainEvent(
			{{.DomainName | title}}UpdatedEventType,
			{{.DomainName}}ID,
			"{{.DomainName}}",
			data,
		),
		Field:    field,
		OldValue: oldValue,
		NewValue: newValue,
	}
}

// {{.DomainName | title}}StatusChangedEvent represents the event when a {{.DomainName}}'s status changes
type {{.DomainName | title}}StatusChangedEvent struct {
	events.BaseDomainEvent
	OldStatus Status
	NewStatus Status
}

// New{{.DomainName | title}}StatusChangedEvent creates a new {{.DomainName}} status changed event
func New{{.DomainName | title}}StatusChangedEvent({{.DomainName}}ID valueobjects.ID, oldStatus, newStatus Status) {{.DomainName | title}}StatusChangedEvent {
	data := map[string]interface{}{
		"old_status": oldStatus.String(),
		"new_status": newStatus.String(),
	}
	
	return {{.DomainName | title}}StatusChangedEvent{
		BaseDomainEvent: events.NewBaseDomainEvent(
			{{.DomainName | title}}StatusChangedEventType,
			{{.DomainName}}ID,
			"{{.DomainName}}",
			data,
		),
		OldStatus: oldStatus,
		NewStatus: newStatus,
	}
}
{{- end}}