{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"{{.ModulePath}}/internal/shared/valueobjects"
	"{{.ModulePath}}/internal/shared/errors"
)

// Specification represents a business rule specification
type Specification interface {
	IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool
	WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error
}

// CompositeSpecification provides base functionality for composite specifications
type CompositeSpecification struct{}

// And creates an AND specification
func (s CompositeSpecification) And(other Specification) Specification {
	return &AndSpecification{left: s, right: other}
}

// Or creates an OR specification
func (s CompositeSpecification) Or(other Specification) Specification {
	return &OrSpecification{left: s, right: other}
}

// Not creates a NOT specification
func (s CompositeSpecification) Not() Specification {
	return &NotSpecification{spec: s}
}

// AndSpecification combines two specifications with AND logic
type AndSpecification struct {
	left  Specification
	right Specification
}

// IsSatisfiedBy checks if both specifications are satisfied
func (s *AndSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return s.left.IsSatisfiedBy({{.DomainName}}) && s.right.IsSatisfiedBy({{.DomainName}})
}

// WhyNotSatisfiedBy returns why the specification is not satisfied
func (s *AndSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if !s.left.IsSatisfiedBy({{.DomainName}}) {
		return s.left.WhyNotSatisfiedBy({{.DomainName}})
	}
	if !s.right.IsSatisfiedBy({{.DomainName}}) {
		return s.right.WhyNotSatisfiedBy({{.DomainName}})
	}
	return nil
}

// OrSpecification combines two specifications with OR logic
type OrSpecification struct {
	left  Specification
	right Specification
}

// IsSatisfiedBy checks if either specification is satisfied
func (s *OrSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return s.left.IsSatisfiedBy({{.DomainName}}) || s.right.IsSatisfiedBy({{.DomainName}})
}

// WhyNotSatisfiedBy returns why the specification is not satisfied
func (s *OrSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if s.left.IsSatisfiedBy({{.DomainName}}) || s.right.IsSatisfiedBy({{.DomainName}}) {
		return nil
	}
	return errors.ErrBusinessRuleViolation.WithDetails("reason", "neither condition is satisfied")
}

// NotSpecification negates a specification
type NotSpecification struct {
	spec Specification
}

// IsSatisfiedBy checks if the specification is NOT satisfied
func (s *NotSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return !s.spec.IsSatisfiedBy({{.DomainName}})
}

// WhyNotSatisfiedBy returns why the specification is not satisfied
func (s *NotSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if s.IsSatisfiedBy({{.DomainName}}) {
		return nil
	}
	return errors.ErrBusinessRuleViolation.WithDetails("reason", "negated condition failed")
}

// ActiveSpecification checks if a {{.DomainName}} is active
type ActiveSpecification struct {
	CompositeSpecification
}

// NewActiveSpecification creates a new active specification
func NewActiveSpecification() *ActiveSpecification {
	return &ActiveSpecification{}
}

// IsSatisfiedBy checks if the {{.DomainName}} is active
func (s *ActiveSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return {{.DomainName}} != nil && {{.DomainName}}.IsActive()
}

// WhyNotSatisfiedBy returns why the {{.DomainName}} is not active
func (s *ActiveSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if {{.DomainName}} == nil {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is nil")
	}
	if !{{.DomainName}}.IsActive() {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is not active")
	}
	return nil
}

// ValidEmailSpecification checks if a {{.DomainName}} has a valid email
type ValidEmailSpecification struct {
	CompositeSpecification
}

// NewValidEmailSpecification creates a new valid email specification
func NewValidEmailSpecification() *ValidEmailSpecification {
	return &ValidEmailSpecification{}
}

// IsSatisfiedBy checks if the {{.DomainName}} has a valid email
func (s *ValidEmailSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return {{.DomainName}} != nil && {{.DomainName}}.Email().IsValid()
}

// WhyNotSatisfiedBy returns why the {{.DomainName}} doesn't have a valid email
func (s *ValidEmailSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if {{.DomainName}} == nil {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is nil")
	}
	if !{{.DomainName}}.Email().IsValid() {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} email is invalid")
	}
	return nil
}

// EmailDomainSpecification checks if a {{.DomainName}}'s email belongs to allowed domains
type EmailDomainSpecification struct {
	CompositeSpecification
	allowedDomains []string
}

// NewEmailDomainSpecification creates a new email domain specification
func NewEmailDomainSpecification(allowedDomains []string) *EmailDomainSpecification {
	return &EmailDomainSpecification{
		allowedDomains: allowedDomains,
	}
}

// IsSatisfiedBy checks if the {{.DomainName}}'s email domain is allowed
func (s *EmailDomainSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	if {{.DomainName}} == nil {
		return false
	}
	
	if len(s.allowedDomains) == 0 {
		return true // No restrictions
	}
	
	{{.DomainName}}Domain := {{.DomainName}}.Email().Domain()
	for _, allowedDomain := range s.allowedDomains {
		if {{.DomainName}}Domain == allowedDomain {
			return true
		}
	}
	
	return false
}

// WhyNotSatisfiedBy returns why the {{.DomainName}}'s email domain is not allowed
func (s *EmailDomainSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if {{.DomainName}} == nil {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is nil")
	}
	
	if s.IsSatisfiedBy({{.DomainName}}) {
		return nil
	}
	
	return errors.ErrBusinessRuleViolation.WithDetails(
		"reason", 
		"email domain not allowed",
	).WithDetails("domain", {{.DomainName}}.Email().Domain())
}

// CanBeUpdatedSpecification checks if a {{.DomainName}} can be updated
type CanBeUpdatedSpecification struct {
	CompositeSpecification
}

// NewCanBeUpdatedSpecification creates a new can be updated specification
func NewCanBeUpdatedSpecification() *CanBeUpdatedSpecification {
	return &CanBeUpdatedSpecification{}
}

// IsSatisfiedBy checks if the {{.DomainName}} can be updated
func (s *CanBeUpdatedSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return {{.DomainName}} != nil && !{{.DomainName}}.IsDeleted()
}

// WhyNotSatisfiedBy returns why the {{.DomainName}} cannot be updated
func (s *CanBeUpdatedSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if {{.DomainName}} == nil {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is nil")
	}
	if {{.DomainName}}.IsDeleted() {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is deleted")
	}
	return nil
}

// CanBeDeletedSpecification checks if a {{.DomainName}} can be deleted
type CanBeDeletedSpecification struct {
	CompositeSpecification
}

// NewCanBeDeletedSpecification creates a new can be deleted specification
func NewCanBeDeletedSpecification() *CanBeDeletedSpecification {
	return &CanBeDeletedSpecification{}
}

// IsSatisfiedBy checks if the {{.DomainName}} can be deleted
func (s *CanBeDeletedSpecification) IsSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) bool {
	return {{.DomainName}} != nil && !{{.DomainName}}.IsDeleted()
}

// WhyNotSatisfiedBy returns why the {{.DomainName}} cannot be deleted
func (s *CanBeDeletedSpecification) WhyNotSatisfiedBy({{.DomainName}} *{{.DomainName | title}}) error {
	if {{.DomainName}} == nil {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is nil")
	}
	if {{.DomainName}}.IsDeleted() {
		return errors.ErrBusinessRuleViolation.WithDetails("reason", "{{.DomainName}} is already deleted")
	}
	return nil
}
{{- end}}