{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"fmt"
	"strings"
	"{{.ModulePath}}/internal/shared/errors"
)

// Name represents a person's name value object
type Name struct {
	firstName string
	lastName  string
}

// NewName creates a new name value object
func NewName(firstName, lastName string) (Name, error) {
	firstName = strings.TrimSpace(firstName)
	lastName = strings.TrimSpace(lastName)
	
	if firstName == "" {
		return Name{}, errors.ErrInvalidValueObject.WithDetails("field", "firstName").WithDetails("reason", "empty first name")
	}
	
	if lastName == "" {
		return Name{}, errors.ErrInvalidValueObject.WithDetails("field", "lastName").WithDetails("reason", "empty last name")
	}
	
	if len(firstName) > 50 {
		return Name{}, errors.ErrInvalidValueObject.WithDetails("field", "firstName").WithDetails("reason", "first name too long")
	}
	
	if len(lastName) > 50 {
		return Name{}, errors.ErrInvalidValueObject.WithDetails("field", "lastName").WithDetails("reason", "last name too long")
	}
	
	return Name{
		firstName: firstName,
		lastName:  lastName,
	}, nil
}

// FirstName returns the first name
func (n Name) FirstName() string {
	return n.firstName
}

// LastName returns the last name
func (n Name) LastName() string {
	return n.lastName
}

// FullName returns the full name
func (n Name) FullName() string {
	return fmt.Sprintf("%s %s", n.firstName, n.lastName)
}

// Initials returns the initials
func (n Name) Initials() string {
	return fmt.Sprintf("%s.%s.", string(n.firstName[0]), string(n.lastName[0]))
}

// Equals checks if two names are equal
func (n Name) Equals(other Name) bool {
	return n.firstName == other.firstName && n.lastName == other.lastName
}

// String returns the string representation
func (n Name) String() string {
	return n.FullName()
}

// Status represents the status of a {{.DomainName}}
type Status int

const (
	// StatusActive represents an active {{.DomainName}}
	StatusActive Status = iota
	// StatusInactive represents an inactive {{.DomainName}}
	StatusInactive
	// StatusDeleted represents a deleted {{.DomainName}}
	StatusDeleted
)

// String returns the string representation of the status
func (s Status) String() string {
	switch s {
	case StatusActive:
		return "active"
	case StatusInactive:
		return "inactive"
	case StatusDeleted:
		return "deleted"
	default:
		return "unknown"
	}
}

// IsValid checks if the status is valid
func (s Status) IsValid() bool {
	return s == StatusActive || s == StatusInactive || s == StatusDeleted
}

// ParseStatus parses a string into a Status
func ParseStatus(s string) (Status, error) {
	switch strings.ToLower(s) {
	case "active":
		return StatusActive, nil
	case "inactive":
		return StatusInactive, nil
	case "deleted":
		return StatusDeleted, nil
	default:
		return StatusActive, errors.ErrInvalidValueObject.WithDetails("field", "status").WithDetails("value", s)
	}
}

// MarshalText implements encoding.TextMarshaler
func (s Status) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (s *Status) UnmarshalText(text []byte) error {
	status, err := ParseStatus(string(text))
	if err != nil {
		return err
	}
	*s = status
	return nil
}
{{- end}}