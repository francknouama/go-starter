{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"time"
	"{{.ModulePath}}/internal/shared/valueobjects"
	"{{.ModulePath}}/internal/shared/events"
	"{{.ModulePath}}/internal/shared/errors"
)

// {{.DomainName | title}} represents the {{.DomainName}} aggregate root
type {{.DomainName | title}} struct {
	id           valueobjects.ID
	name         string          // Simple name field - customize as needed
	description  string          // Optional description - customize as needed
	status       Status          // Active, Inactive, etc.
	createdAt    time.Time
	updatedAt    time.Time
	version      int             // For optimistic locking
	domainEvents []events.DomainEvent
}

// New{{.DomainName | title}} creates a new {{.DomainName}} aggregate
func New{{.DomainName | title}}(name string, description string) (*{{.DomainName | title}}, error) {
	// Validate inputs
	if name == "" {
		return nil, errors.ErrInvalidValueObject.WithDetails("reason", "name cannot be empty")
	}
	
	{{.DomainName}} := &{{.DomainName | title}}{
		id:           valueobjects.GenerateID(),
		name:         name,
		description:  description,
		status:       StatusActive,
		createdAt:    time.Now().UTC(),
		updatedAt:    time.Now().UTC(),
		version:      1,
		domainEvents: make([]events.DomainEvent, 0),
	}
	
	// Raise domain event
	event := New{{.DomainName | title}}CreatedEvent({{.DomainName}}.id, {{.DomainName}}.name)
	{{.DomainName}}.addDomainEvent(event)
	
	return {{.DomainName}}, nil
}

// Reconstruct{{.DomainName | title}} reconstructs a {{.DomainName}} from persistence
func Reconstruct{{.DomainName | title}}(
	id valueobjects.ID,
	name string,
	description string,
	status Status,
	createdAt, updatedAt time.Time,
	version int,
) *{{.DomainName | title}} {
	return &{{.DomainName | title}}{
		id:           id,
		name:         name,
		description:  description,
		status:       status,
		createdAt:    createdAt,
		updatedAt:    updatedAt,
		version:      version,
		domainEvents: make([]events.DomainEvent, 0),
	}
}

// ID returns the {{.DomainName}} ID
func (e *{{.DomainName | title}}) ID() valueobjects.ID {
	return e.id
}

// Name returns the {{.DomainName}} name
func (e *{{.DomainName | title}}) Name() string {
	return e.name
}

// Description returns the {{.DomainName}} description
func (e *{{.DomainName | title}}) Description() string {
	return e.description
}

// Status returns the {{.DomainName}} status
func (e *{{.DomainName | title}}) Status() Status {
	return e.status
}

// CreatedAt returns when the {{.DomainName}} was created
func (e *{{.DomainName | title}}) CreatedAt() time.Time {
	return e.createdAt
}

// UpdatedAt returns when the {{.DomainName}} was last updated
func (e *{{.DomainName | title}}) UpdatedAt() time.Time {
	return e.updatedAt
}

// Version returns the {{.DomainName}} version for optimistic locking
func (e *{{.DomainName | title}}) Version() int {
	return e.version
}

// UpdateName updates the {{.DomainName}}'s name
func (e *{{.DomainName | title}}) UpdateName(name string) error {
	if name == "" {
		return errors.ErrInvalidValueObject.WithDetails("reason", "name cannot be empty")
	}
	
	if e.name == name {
		return nil // No change needed
	}
	
	oldName := e.name
	e.name = name
	e.updatedAt = time.Now().UTC()
	e.version++
	
	// Raise domain event
	event := New{{.DomainName | title}}UpdatedEvent(e.id, "name", oldName, name)
	e.addDomainEvent(event)
	
	return nil
}

// UpdateDescription updates the {{.DomainName}}'s description
func (e *{{.DomainName | title}}) UpdateDescription(description string) error {
	if e.description == description {
		return nil // No change needed
	}
	
	oldDescription := e.description
	e.description = description
	e.updatedAt = time.Now().UTC()
	e.version++
	
	// Raise domain event
	event := New{{.DomainName | title}}UpdatedEvent(e.id, "description", oldDescription, description)
	e.addDomainEvent(event)
	
	return nil
}

// Activate activates the {{.DomainName}}
func (e *{{.DomainName | title}}) Activate() error {
	if e.status == StatusActive {
		return nil // Already active
	}
	
	if e.status == StatusDeleted {
		return errors.ErrInvalidEntityState.WithDetails("reason", "cannot activate deleted {{.DomainName}}")
	}
	
	e.status = StatusActive
	e.updatedAt = time.Now().UTC()
	e.version++
	
	// Raise domain event
	event := New{{.DomainName | title}}StatusChangedEvent(e.id, StatusInactive, StatusActive)
	e.addDomainEvent(event)
	
	return nil
}

// Deactivate deactivates the {{.DomainName}}
func (e *{{.DomainName | title}}) Deactivate() error {
	if e.status == StatusInactive {
		return nil // Already inactive
	}
	
	if e.status == StatusDeleted {
		return errors.ErrInvalidEntityState.WithDetails("reason", "cannot deactivate deleted {{.DomainName}}")
	}
	
	e.status = StatusInactive
	e.updatedAt = time.Now().UTC()
	e.version++
	
	// Raise domain event
	event := New{{.DomainName | title}}StatusChangedEvent(e.id, StatusActive, StatusInactive)
	e.addDomainEvent(event)
	
	return nil
}

// Delete marks the {{.DomainName}} as deleted (soft delete)
func (e *{{.DomainName | title}}) Delete() error {
	if e.status == StatusDeleted {
		return nil // Already deleted
	}
	
	oldStatus := e.status
	e.status = StatusDeleted
	e.updatedAt = time.Now().UTC()
	e.version++
	
	// Raise domain event
	event := New{{.DomainName | title}}StatusChangedEvent(e.id, oldStatus, StatusDeleted)
	e.addDomainEvent(event)
	
	return nil
}

// IsActive checks if the {{.DomainName}} is active
func (e *{{.DomainName | title}}) IsActive() bool {
	return e.status == StatusActive
}

// IsInactive checks if the {{.DomainName}} is inactive
func (e *{{.DomainName | title}}) IsInactive() bool {
	return e.status == StatusInactive
}

// IsDeleted checks if the {{.DomainName}} is deleted
func (e *{{.DomainName | title}}) IsDeleted() bool {
	return e.status == StatusDeleted
}

// DomainEvents returns the domain events
func (e *{{.DomainName | title}}) DomainEvents() []events.DomainEvent {
	return e.domainEvents
}

// ClearDomainEvents clears the domain events
func (e *{{.DomainName | title}}) ClearDomainEvents() {
	e.domainEvents = make([]events.DomainEvent, 0)
}

// addDomainEvent adds a domain event
func (e *{{.DomainName | title}}) addDomainEvent(event events.DomainEvent) {
	e.domainEvents = append(e.domainEvents, event)
}

// Equals checks if two {{.DomainName}}s are equal
func (e *{{.DomainName | title}}) Equals(other *{{.DomainName | title}}) bool {
	if other == nil {
		return false
	}
	return e.id.Equals(other.id)
}
{{- end}}