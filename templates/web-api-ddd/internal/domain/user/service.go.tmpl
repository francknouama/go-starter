{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"context"
	"{{.ModulePath}}/internal/shared/valueobjects"
	"{{.ModulePath}}/internal/shared/errors"
)

// Service provides domain services for {{.DomainName}} operations
type Service interface {
	// IsNameUnique checks if a name is unique
	IsNameUnique(ctx context.Context, name string, excludeID *valueobjects.ID) (bool, error)
	
	// CanChangeStatus determines if a {{.DomainName}} can change to a specific status
	CanChangeStatus({{.DomainName}} *{{.DomainName | title}}, newStatus Status) error
	
	// ValidateForCreation validates a {{.DomainName}} before creation
	ValidateForCreation(name string) error
	
	// ValidateForUpdate validates a {{.DomainName}} before update
	ValidateForUpdate({{.DomainName}} *{{.DomainName | title}}, newName *string) error
}

// DomainService implements the {{.DomainName}} domain service
type DomainService struct {
	repository ReadOnlyRepository
}

// NewDomainService creates a new {{.DomainName}} domain service
func NewDomainService(repository ReadOnlyRepository) *DomainService {
	return &DomainService{
		repository: repository,
	}
}

// NewService creates a new {{.DomainName}} domain service (alias for compatibility)
func NewService(repository Repository) Service {
	return NewDomainService(repository)
}

// IsNameUnique checks if a name is unique
func (s *DomainService) IsNameUnique(ctx context.Context, name string, excludeID *valueobjects.ID) (bool, error) {
	exists, err := s.repository.ExistsByName(ctx, name)
	if err != nil {
		return false, err
	}
	
	if !exists {
		return true, nil
	}
	
	// If excludeID is provided, check if the existing {{.DomainName}} is the one being excluded
	if excludeID != nil {
		existing{{.DomainName | title}}, err := s.repository.FindByName(ctx, name)
		if err != nil {
			return false, err
		}
		
		if existing{{.DomainName | title}} != nil && existing{{.DomainName | title}}.ID().Equals(*excludeID) {
			return true, nil
		}
	}
	
	return false, nil
}

// CanChangeStatus determines if a {{.DomainName}} can change to a specific status
func (s *DomainService) CanChangeStatus({{.DomainName}} *{{.DomainName | title}}, newStatus Status) error {
	if {{.DomainName}} == nil {
		return errors.ErrInvalidEntityState.WithDetails("reason", "{{.DomainName}} is nil")
	}
	
	currentStatus := {{.DomainName}}.Status()
	
	// Define valid status transitions
	switch currentStatus {
	case StatusActive:
		// Active {{.DomainName}}s can become inactive or deleted
		if newStatus != StatusInactive && newStatus != StatusDeleted {
			return errors.ErrBusinessRuleViolation.WithDetails(
				"reason", 
				"active {{.DomainName}} can only be changed to inactive or deleted",
			)
		}
	case StatusInactive:
		// Inactive {{.DomainName}}s can become active or deleted
		if newStatus != StatusActive && newStatus != StatusDeleted {
			return errors.ErrBusinessRuleViolation.WithDetails(
				"reason", 
				"inactive {{.DomainName}} can only be changed to active or deleted",
			)
		}
	case StatusDeleted:
		// Deleted {{.DomainName}}s cannot change status
		return errors.ErrBusinessRuleViolation.WithDetails(
			"reason", 
			"deleted {{.DomainName}} cannot change status",
		)
	default:
		return errors.ErrInvalidEntityState.WithDetails("reason", "unknown status")
	}
	
	return nil
}

// ValidateForCreation validates a {{.DomainName}} before creation
func (s *DomainService) ValidateForCreation(name string) error {
	// Check name uniqueness
	unique, err := s.IsNameUnique(context.Background(), name, nil)
	if err != nil {
		return err
	}
	
	if !unique {
		return errors.ErrBusinessRuleViolation.WithDetails(
			"reason", 
			"name already exists",
		).WithDetails("name", name)
	}
	
	// Additional business rules can be added here
	// For example: checking against banned name patterns, length restrictions, etc.
	
	return nil
}

// ValidateForUpdate validates a {{.DomainName}} before update
func (s *DomainService) ValidateForUpdate({{.DomainName}} *{{.DomainName | title}}, newName *string) error {
	if {{.DomainName}} == nil {
		return errors.ErrInvalidEntityState.WithDetails("reason", "{{.DomainName}} is nil")
	}
	
	// Check if {{.DomainName}} is in a valid state for updates
	if {{.DomainName}}.IsDeleted() {
		return errors.ErrBusinessRuleViolation.WithDetails(
			"reason", 
			"cannot update deleted {{.DomainName}}",
		)
	}
	
	// If name is being changed, check uniqueness
	if newName != nil && {{.DomainName}}.Name() != *newName {
		{{.DomainName}}ID := {{.DomainName}}.ID()
		unique, err := s.IsNameUnique(context.Background(), *newName, &{{.DomainName}}ID)
		if err != nil {
			return err
		}
		
		if !unique {
			return errors.ErrBusinessRuleViolation.WithDetails(
				"reason", 
				"name already exists",
			).WithDetails("name", *newName)
		}
	}
	
	// Additional validation rules can be added here
	
	return nil
}
{{- end}}