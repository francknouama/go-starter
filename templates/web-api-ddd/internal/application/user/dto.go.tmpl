{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"time"
	"{{.ModulePath}}/internal/domain/{{.DomainName}}"
)

// {{.DomainName | title}}DTO represents a {{.DomainName}} data transfer object
type {{.DomainName | title}}DTO struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Status      string    `json:"status"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Version     int       `json:"version"`
}

// From{{.DomainName | title}} creates a DTO from a domain entity
func From{{.DomainName | title}}({{.DomainName}}Entity *{{.DomainName}}.{{.DomainName | title}}) {{.DomainName | title}}DTO {
	return {{.DomainName | title}}DTO{
		ID:          {{.DomainName}}Entity.ID().String(),
		Name:        {{.DomainName}}Entity.Name(),
		Description: {{.DomainName}}Entity.Description(),
		Status:      {{.DomainName}}Entity.Status().String(),
		CreatedAt:   {{.DomainName}}Entity.CreatedAt(),
		UpdatedAt:   {{.DomainName}}Entity.UpdatedAt(),
		Version:     {{.DomainName}}Entity.Version(),
	}
}

// From{{.DomainName | title}}s creates DTOs from domain entities
func From{{.DomainName | title}}s({{.DomainName}}Entities []*{{.DomainName}}.{{.DomainName | title}}) []{{.DomainName | title}}DTO {
	dtos := make([]{{.DomainName | title}}DTO, len({{.DomainName}}Entities))
	for i, entity := range {{.DomainName}}Entities {
		dtos[i] = From{{.DomainName | title}}(entity)
	}
	return dtos
}

// {{.DomainName | title}}ListDTO represents a paginated list of {{.DomainName}}s
type {{.DomainName | title}}ListDTO struct {
	{{.DomainName | title}}s []{{.DomainName | title}}DTO `json:"{{.DomainName}}s"`
	Total      int                          `json:"total"`
	Page       int                          `json:"page"`
	Limit      int                          `json:"limit"`
	TotalPages int                          `json:"totalPages"`
}

// NewPaginated{{.DomainName | title}}ListDTO creates a new paginated list DTO
func NewPaginated{{.DomainName | title}}ListDTO({{.DomainName}}s []{{.DomainName | title}}DTO, total, page, limit int) {{.DomainName | title}}ListDTO {
	totalPages := (total + limit - 1) / limit
	if totalPages < 1 {
		totalPages = 1
	}
	
	return {{.DomainName | title}}ListDTO{
		{{.DomainName | title}}s: {{.DomainName}}s,
		Total:      total,
		Page:       page,
		Limit:      limit,
		TotalPages: totalPages,
	}
}
{{- end}}