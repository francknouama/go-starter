package application_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"{{.ModulePath}}/internal/application/{{.DomainName}}"
	"{{.ModulePath}}/internal/shared/valueobjects"
)

func TestCreate{{.DomainName | title}}Command_Validation(t *testing.T) {
	t.Run("Valid command", func(t *testing.T) {
		cmd := {{.DomainName}}.Create{{.DomainName | title}}Command{
			Email: "test@example.com",
			Name:  "Test User",
		}

		assert.NotEmpty(t, cmd.Email)
		assert.NotEmpty(t, cmd.Name)
		assert.Contains(t, cmd.Email, "@")
	})

	t.Run("Invalid email", func(t *testing.T) {
		cmd := {{.DomainName}}.Create{{.DomainName | title}}Command{
			Email: "invalid-email",
			Name:  "Test User",
		}

		_, err := valueobjects.NewEmail(cmd.Email)
		assert.Error(t, err)
	})
}

func TestUpdate{{.DomainName | title}}Command_Validation(t *testing.T) {
	t.Run("Valid command", func(t *testing.T) {
		userID, _ := valueobjects.NewID("123e4567-e89b-12d3-a456-426614174000")
		cmd := {{.DomainName}}.Update{{.DomainName | title}}Command{
			ID:   userID,
			Name: "Updated User",
		}

		assert.NotEmpty(t, cmd.ID.String())
		assert.NotEmpty(t, cmd.Name)
	})
}

func Test{{.DomainName | title}}Query_Validation(t *testing.T) {
	t.Run("Valid get by ID query", func(t *testing.T) {
		userID, _ := valueobjects.NewID("123e4567-e89b-12d3-a456-426614174000")
		query := {{.DomainName}}.Get{{.DomainName | title}}ByIDQuery{
			ID: userID,
		}

		assert.NotEmpty(t, query.ID.String())
	})

	t.Run("Valid get by email query", func(t *testing.T) {
		email, _ := valueobjects.NewEmail("test@example.com")
		query := {{.DomainName}}.Get{{.DomainName | title}}ByEmailQuery{
			Email: email,
		}

		assert.NotEmpty(t, query.Email.String())
		assert.Contains(t, query.Email.String(), "@")
	})
}