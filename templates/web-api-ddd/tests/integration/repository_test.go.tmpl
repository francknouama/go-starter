package integration_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"{{.ModulePath}}/internal/infrastructure/config"
	"{{.ModulePath}}/internal/domain/{{.DomainName}}"
	"{{.ModulePath}}/internal/infrastructure/persistence"
	"{{.ModulePath}}/internal/infrastructure/logger"
	"{{.ModulePath}}/internal/shared/valueobjects"
)

func TestIntegration_{{.DomainName | title}}Repository(t *testing.T) {
	// Load config for test database
	cfg := config.LoadConfig()
	cfg.Database.Database = cfg.Database.Database + "_test_repo"

	// Setup logger
	appLogger := logger.NewLogger(&cfg.Logger)

	// Connect to test database
	db, err := persistence.NewDatabaseConnection(&cfg.Database)
	assert.NoError(t, err)
	defer db.Close()

	// Run migrations
	err = persistence.RunMigrations(db, cfg.Database.Driver)
	assert.NoError(t, err)

	// Create repository
	repo := persistence.New{{.DomainName | title}}Repository(db, appLogger)
	ctx := context.Background()

	// Test Save and FindByID
	entity, err := {{.DomainName}}.New{{.DomainName | title}}("test-{{.DomainName}}", "Test {{.DomainName}} for repository")
	assert.NoError(t, err)

	err = repo.Save(ctx, entity)
	assert.NoError(t, err)
	assert.NotEmpty(t, entity.ID().String())

	found{{.DomainName | title}}, err := repo.FindByID(ctx, entity.ID())
	assert.NoError(t, err)
	assert.NotNil(t, found{{.DomainName | title}})
	assert.Equal(t, entity.ID(), found{{.DomainName | title}}.ID())
	assert.Equal(t, entity.Name(), found{{.DomainName | title}}.Name())

	// Test FindByName
	found{{.DomainName | title}}, err = repo.FindByName(ctx, entity.Name())
	assert.NoError(t, err)
	assert.NotNil(t, found{{.DomainName | title}})
	assert.Equal(t, entity.ID(), found{{.DomainName | title}}.ID())

	// Test Update
	entity.UpdateDescription("Updated description")
	err = repo.Save(ctx, entity)
	assert.NoError(t, err)

	found{{.DomainName | title}}, err = repo.FindByID(ctx, entity.ID())
	assert.NoError(t, err)
	assert.Equal(t, "Updated description", found{{.DomainName | title}}.Description())

	// Test Delete
	err = repo.Delete(ctx, entity.ID())
	assert.NoError(t, err)

	found{{.DomainName | title}}, err = repo.FindByID(ctx, entity.ID())
	assert.Error(t, err)
	assert.Nil(t, found{{.DomainName | title}})
}
