package persistence

import (
	"fmt"

	"{{.ModulePath}}/internal/domain/ports"
	"gorm.io/gorm"
)

// MigrationManager handles database migrations
type MigrationManager struct {
	db     *gorm.DB
	logger ports.Logger
}

// NewMigrationManager creates a new migration manager
func NewMigrationManager(db *gorm.DB, logger ports.Logger) *MigrationManager {
	return &MigrationManager{
		db:     db,
		logger: logger,
	}
}

// RunMigrations runs all pending migrations
func (m *MigrationManager) RunMigrations() error {
	m.logger.Info("Running database migrations")

	// Auto-migrate the models
	models := []interface{}{
		&UserModel{},
	}
	{{if ne .AuthType ""}}
	models = append(models, &AuthSessionModel{})
	{{end}}
	
	if err := m.db.AutoMigrate(models...); err != nil {
		m.logger.Error("Failed to run auto-migrations", "error", err)
		return fmt.Errorf("auto-migration failed: %w", err)
	}

	m.logger.Info("Database migrations completed successfully")
	return nil
}

// CreateTables creates the database tables
func (m *MigrationManager) CreateTables() error {
	m.logger.Info("Creating database tables")

	// Create tables if they don't exist
	models := []interface{}{
		&UserModel{},
	}
	{{if ne .AuthType ""}}
	models = append(models, &AuthSessionModel{})
	{{end}}
	
	if err := m.db.AutoMigrate(models...); err != nil {
		m.logger.Error("Failed to create tables", "error", err)
		return fmt.Errorf("table creation failed: %w", err)
	}

	m.logger.Info("Database tables created successfully")
	return nil
}

// DropTables drops all application tables (use with caution)
func (m *MigrationManager) DropTables() error {
	m.logger.Warn("Dropping all database tables")

	models := []interface{}{
		&UserModel{},
	}
	{{if ne .AuthType ""}}
	models = append(models, &AuthSessionModel{})
	{{end}}
	
	if err := m.db.Migrator().DropTable(models...); err != nil {
		m.logger.Error("Failed to drop tables", "error", err)
		return fmt.Errorf("table drop failed: %w", err)
	}

	m.logger.Info("Database tables dropped successfully")
	return nil
}

// GetMigrationStatus returns the current migration status
func (m *MigrationManager) GetMigrationStatus() (map[string]bool, error) {
	status := make(map[string]bool)

	// Check if tables exist
	status["users"] = m.db.Migrator().HasTable(&UserModel{})
	{{if ne .AuthType ""}}
	status["auth_sessions"] = m.db.Migrator().HasTable(&AuthSessionModel{})
	{{end}}

	return status, nil
}