package middleware

import (
	"time"

	"{{.ModulePath}}/internal/domain/ports"
)

// RequestLogger returns a request logging middleware
func RequestLogger(logger ports.Logger) ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		start := time.Now()
		path := ctx.GetRequest().URL.Path
		method := ctx.GetRequest().Method

		// Process request
		ctx.Next()

		// Calculate request duration
		duration := time.Since(start)
		status := ctx.GetStatusCode()

		// Log request details
		logger.Info("HTTP Request",
			"method", method,
			"path", path,
			"status", status,
			"duration", duration.String(),
			"ip", ctx.GetClientIP(),
			"user_agent", ctx.GetRequest().UserAgent(),
		)

		// Log errors if status >= 400
		if status >= 400 {
			errors := ctx.GetErrors()
			if len(errors) > 0 {
				logger.Error("Request completed with errors",
					"method", method,
					"path", path,
					"status", status,
					"errors", errors,
				)
			}
		}
	}
}

// SecurityHeaders adds security headers to responses
func SecurityHeaders() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		ctx.SetHeader("X-Content-Type-Options", "nosniff")
		ctx.SetHeader("X-Frame-Options", "DENY")
		ctx.SetHeader("X-XSS-Protection", "1; mode=block")
		ctx.SetHeader("Referrer-Policy", "strict-origin-when-cross-origin")
		ctx.SetHeader("Content-Security-Policy", "default-src 'self'")
		
		ctx.Next()
	}
}