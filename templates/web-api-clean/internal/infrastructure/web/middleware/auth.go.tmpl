package middleware

import (
	"net/http"
	"strings"

	"{{.ModulePath}}/internal/domain/entities"
	"{{.ModulePath}}/internal/domain/ports"
	"{{.ModulePath}}/internal/domain/usecases"
)

// Auth returns an authentication middleware using domain interfaces
func Auth(authUseCase *usecases.AuthUseCase, logger ports.Logger) ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		// Extract token from Authorization header
		token := extractTokenFromHeader(ctx)
		if token == "" {
			logger.Debug("Missing or invalid authorization header")
			ctx.JSON(http.StatusUnauthorized, map[string]interface{}{
				"error":   "MISSING_TOKEN",
				"message": "Authorization token is required",
			})
			return
		}

		// Validate token and get user
		user, err := authUseCase.ValidateSession(ctx.GetRequestContext(), token)
		if err != nil {
			logger.Debug("Token validation failed", "error", err)
			
			switch err {
			case entities.ErrInvalidToken:
				ctx.JSON(http.StatusUnauthorized, map[string]interface{}{
					"error":   "INVALID_TOKEN",
					"message": "The provided token is invalid",
				})
			case entities.ErrTokenExpired, entities.ErrSessionExpired:
				ctx.JSON(http.StatusUnauthorized, map[string]interface{}{
					"error":   "TOKEN_EXPIRED",
					"message": "The token has expired",
				})
			case entities.ErrSessionNotFound:
				ctx.JSON(http.StatusUnauthorized, map[string]interface{}{
					"error":   "SESSION_NOT_FOUND",
					"message": "No active session found",
				})
			default:
				ctx.JSON(http.StatusUnauthorized, map[string]interface{}{
					"error":   "AUTHENTICATION_FAILED",
					"message": "Authentication failed",
				})
			}
			
			return
		}

		// Store user in context for use by handlers (framework-specific implementation)
		// In a real implementation, this would be handled by the adapter layer
		logger.Debug("User authenticated successfully", "user_id", user.ID)
		
		ctx.Next()
	}
}

// extractTokenFromHeader extracts the token from the Authorization header
func extractTokenFromHeader(ctx ports.HTTPContext) string {
	authHeader := ctx.GetHeader("Authorization")
	if authHeader == "" {
		return ""
	}

	// Expected format: "Bearer <token>"
	parts := strings.SplitN(authHeader, " ", 2)
	if len(parts) != 2 || parts[0] != "Bearer" {
		return ""
	}

	return parts[1]
}