package services

import (
	"crypto/rand"
	"crypto/subtle"
	"encoding/base64"
	"errors"
	"fmt"
	"strings"

	"golang.org/x/crypto/argon2"
	"{{.ModulePath}}/internal/domain/ports"
)

// PasswordService implements password hashing and verification using Argon2
type PasswordService struct {
	logger ports.Logger
	params *Argon2Params
}

// Argon2Params holds the parameters for Argon2 hashing
type Argon2Params struct {
	Memory      uint32
	Iterations  uint32
	Parallelism uint8
	SaltLength  uint32
	KeyLength   uint32
}

// NewPasswordService creates a new PasswordService instance
func NewPasswordService(logger ports.Logger) ports.PasswordService {
	return &PasswordService{
		logger: logger,
		params: &Argon2Params{
			Memory:      64 * 1024, // 64 MB
			Iterations:  3,
			Parallelism: 2,
			SaltLength:  16,
			KeyLength:   32,
		},
	}
}

// Hash generates a secure hash of the password using Argon2
func (ps *PasswordService) Hash(password string) (string, error) {
	if password == "" {
		return "", errors.New("password cannot be empty")
	}

	// Generate a random salt
	salt, err := ps.generateRandomBytes(ps.params.SaltLength)
	if err != nil {
		ps.logger.Error("Failed to generate salt", "error", err)
		return "", err
	}

	// Generate the hash using Argon2
	hash := argon2.IDKey(
		[]byte(password),
		salt,
		ps.params.Iterations,
		ps.params.Memory,
		ps.params.Parallelism,
		ps.params.KeyLength,
	)

	// Encode the hash in the format: $argon2id$v=19$m=memory,t=time,p=threads$salt$hash
	b64Salt := base64.RawStdEncoding.EncodeToString(salt)
	b64Hash := base64.RawStdEncoding.EncodeToString(hash)

	encodedHash := fmt.Sprintf(
		"$argon2id$v=%d$m=%d,t=%d,p=%d$%s$%s",
		argon2.Version,
		ps.params.Memory,
		ps.params.Iterations,
		ps.params.Parallelism,
		b64Salt,
		b64Hash,
	)

	return encodedHash, nil
}

// Verify checks if the provided password matches the hash
func (ps *PasswordService) Verify(password, encodedHash string) error {
	if password == "" {
		return errors.New("password cannot be empty")
	}

	if encodedHash == "" {
		return errors.New("hash cannot be empty")
	}

	// Parse the encoded hash to extract parameters
	params, salt, hash, err := ps.decodeHash(encodedHash)
	if err != nil {
		ps.logger.Debug("Failed to decode hash", "error", err)
		return errors.New("invalid hash format")
	}

	// Derive the key from the password using the same parameters
	otherHash := argon2.IDKey(
		[]byte(password),
		salt,
		params.Iterations,
		params.Memory,
		params.Parallelism,
		params.KeyLength,
	)

	// Compare the hashes using constant-time comparison
	if subtle.ConstantTimeCompare(hash, otherHash) == 1 {
		return nil
	}

	return errors.New("password verification failed")
}

// generateRandomBytes generates random bytes of the specified length
func (ps *PasswordService) generateRandomBytes(length uint32) ([]byte, error) {
	bytes := make([]byte, length)
	_, err := rand.Read(bytes)
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

// decodeHash parses the encoded hash string and extracts the parameters, salt, and hash
func (ps *PasswordService) decodeHash(encodedHash string) (*Argon2Params, []byte, []byte, error) {
	parts := strings.Split(encodedHash, "$")
	if len(parts) != 6 {
		return nil, nil, nil, errors.New("invalid hash format")
	}

	// Check the algorithm
	if parts[1] != "argon2id" {
		return nil, nil, nil, errors.New("incompatible algorithm")
	}

	// Parse version
	var version int
	if _, err := fmt.Sscanf(parts[2], "v=%d", &version); err != nil {
		return nil, nil, nil, err
	}
	if version != argon2.Version {
		return nil, nil, nil, errors.New("incompatible version")
	}

	// Parse parameters
	params := &Argon2Params{}
	if _, err := fmt.Sscanf(parts[3], "m=%d,t=%d,p=%d", &params.Memory, &params.Iterations, &params.Parallelism); err != nil {
		return nil, nil, nil, err
	}

	// Decode salt
	salt, err := base64.RawStdEncoding.DecodeString(parts[4])
	if err != nil {
		return nil, nil, nil, err
	}
	params.SaltLength = uint32(len(salt))

	// Decode hash
	hash, err := base64.RawStdEncoding.DecodeString(parts[5])
	if err != nil {
		return nil, nil, nil, err
	}
	params.KeyLength = uint32(len(hash))

	return params, salt, hash, nil
}