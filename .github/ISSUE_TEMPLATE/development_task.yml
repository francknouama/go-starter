name: Development Task (TDD Required)
description: Internal development task following Test-Driven Development
title: "[Dev]: "
labels: ["development", "tdd-required", "needs-review"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        # 🛠️ Development Task Template
        
        This template is for internal development tasks that must follow **strict TDD principles**. 
        All development work in this project requires comprehensive testing.

  - type: dropdown
    id: task-type
    attributes:
      label: Task Type
      description: What type of development task is this?
      options:
        - New Blueprint Implementation
        - Blueprint Enhancement
        - New Architecture Pattern
        - Framework Integration
        - Logger Integration Enhancement
        - Database/ORM Integration
        - Authentication Enhancement
        - Progressive Disclosure Improvement
        - Enhanced ATDD Testing
        - CLI Enhancement
        - Performance Improvement
        - Bug Fix
        - Refactoring
        - Security Enhancement
        - Code Quality Improvement
        - Technical Debt Reduction
        - Documentation Update
        - Other
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Priority Level
      description: What is the priority of this task?
      options:
        - Critical (blocks release)
        - High (important for next release)
        - Medium (should be included if time permits)
        - Low (nice to have)
    validations:
      required: true

  - type: textarea
    id: task-description
    attributes:
      label: Task Description
      description: |
        Provide a clear, detailed description of what needs to be implemented.
        Include technical specifications and requirements.
      placeholder: |
        Implement X functionality that allows users to Y by doing Z.
        
        Technical Requirements:
        - Must support A, B, C
        - Should integrate with existing X system
        - Must handle edge cases D, E, F
      value: |
        ## Overview
        
        
        ## Technical Requirements
        - [ ] 
        - [ ] 
        - [ ] 
        
        ## Constraints
        - [ ] 
        - [ ] 
    validations:
      required: true

  - type: markdown
    attributes:
      value: |
        ## 🧪 TDD Implementation Plan (MANDATORY)
        
        **This section is required for ALL development tasks.** Following TDD is not optional.

  - type: textarea
    id: test-first-plan
    attributes:
      label: Test-First Development Plan
      description: |
        Define your testing strategy BEFORE writing implementation code.
        This follows the Red-Green-Refactor TDD cycle.
      placeholder: |
        ## Red Phase (Write Failing Tests)
        1. Write test for basic functionality - should fail
        2. Write test for edge case X - should fail  
        3. Write test for error handling Y - should fail
        
        ## Green Phase (Make Tests Pass)
        1. Implement minimal code to pass test 1
        2. Implement minimal code to pass test 2
        3. Implement minimal code to pass test 3
        
        ## Refactor Phase (Improve Code Quality)
        1. Optimize implementation while keeping tests green
        2. Improve code structure and readability
        3. Add performance optimizations if needed
      value: |
        ## Red Phase (Write Failing Tests First)
        - [ ] Test case 1: 
        - [ ] Test case 2: 
        - [ ] Test case 3: 
        - [ ] Edge case tests: 
        - [ ] Error handling tests: 

        ## Green Phase (Minimal Implementation)
        - [ ] Implement basic functionality
        - [ ] Make all tests pass
        - [ ] Verify test coverage >70%

        ## Refactor Phase (Code Quality)
        - [ ] Optimize implementation
        - [ ] Improve code structure
        - [ ] Add documentation
        - [ ] Final test run
    validations:
      required: true

  - type: textarea
    id: test-coverage-plan
    attributes:
      label: Test Coverage Requirements
      description: |
        Define specific test coverage goals and testing strategies.
        Minimum 70% coverage required for all new code.
      value: |
        ## Unit Tests
        - [ ] Function/method X: test with valid inputs
        - [ ] Function/method X: test with invalid inputs  
        - [ ] Function/method Y: test edge cases
        - [ ] Error handling: test all error paths
        - [ ] Boundary conditions: test limits and extremes

        ## Integration Tests
        - [ ] Component integration with existing system
        - [ ] API endpoint testing (if applicable)
        - [ ] Database operations (if applicable)
        - [ ] Cross-module functionality

        ## Coverage Goals
        - [ ] >70% line coverage for new code
        - [ ] >80% branch coverage for critical paths
        - [ ] 100% coverage for error handling paths
        - [ ] All public functions/methods tested

        ## Test Strategy
        - [ ] Table-driven tests for multiple scenarios
        - [ ] Mock external dependencies
        - [ ] Test both happy path and error scenarios
        - [ ] Performance tests (if applicable)
    validations:
      required: true

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Definition of Done (DoD)
      description: |
        Specific, testable criteria that must be met for this task to be considered complete.
        Each item must be verifiable through automated tests or clear validation steps.
      value: |
        ## Functional Requirements
        - [ ] Feature/fix works as specified
        - [ ] All user scenarios tested and working
        - [ ] Edge cases handled appropriately
        - [ ] Error messages are clear and helpful

        ## Quality Requirements  
        - [ ] All tests pass (unit, integration, existing)
        - [ ] Test coverage >70% for new code
        - [ ] No reduction in overall project coverage
        - [ ] Code follows project style guidelines
        - [ ] golangci-lint passes with no new issues
        - [ ] go vet passes with no issues

        ## Documentation Requirements
        - [ ] Code is self-documenting with clear function/method names
        - [ ] Complex logic has explanatory comments
        - [ ] Public APIs have Go doc comments
        - [ ] README/docs updated if user-facing changes

        ## Integration Requirements
        - [ ] No existing functionality broken
        - [ ] Backward compatibility maintained
        - [ ] Performance does not degrade
        - [ ] Memory usage remains reasonable
    validations:
      required: true

  - type: textarea
    id: implementation-files
    attributes:
      label: Files to Modify/Create
      description: |
        List the specific files that will be modified or created.
        This helps with code review and change tracking.
      placeholder: |
        ## New Files
        - path/to/new/file.go
        - path/to/new/file_test.go
        
        ## Modified Files
        - path/to/existing/file.go (add function X)
        - path/to/existing/file_test.go (add tests for function X)
        
        ## Documentation Updates
        - README.md (update usage section)
        - docs/API.md (add new endpoint documentation)
      value: |
        ## New Files
        - [ ] 
        - [ ] 

        ## Modified Files  
        - [ ] 
        - [ ] 

        ## Test Files
        - [ ] 
        - [ ] 

        ## Documentation
        - [ ] 
    validations:
      required: false

  - type: dropdown
    id: estimated-effort
    attributes:
      label: Estimated Development Time
      description: Including TDD implementation (testing + coding + refactoring)
      options:
        - 1-2 hours (simple change)
        - Half day (4 hours)
        - 1 day
        - 2-3 days
        - 1 week
        - More than 1 week
    validations:
      required: true

  - type: checkboxes
    id: dependencies
    attributes:
      label: Dependencies & Blockers
      description: Check any items that must be completed before starting this task
      options:
        - label: No dependencies - can start immediately
        - label: Requires completion of issue #[number]
        - label: Requires design/architecture review
        - label: Requires external library evaluation
        - label: Requires breaking change approval
        - label: Requires performance benchmarking setup

  - type: checkboxes
    id: tdd-enforcement
    attributes:
      label: TDD Enforcement Commitment
      description: By checking these boxes, you commit to strict TDD practices
      options:
        - label: I will write tests FIRST, before any implementation code (Red phase)
          required: true
        - label: I will implement the minimal code needed to make tests pass (Green phase)
          required: true
        - label: I will refactor for quality while keeping tests green (Refactor phase)
          required: true
        - label: I will achieve >70% test coverage for all new code
          required: true
        - label: I will test both happy paths and error scenarios comprehensively
          required: true
        - label: I will run the full test suite before each commit
          required: true
        - label: I understand that PRs without proper TDD implementation will be rejected
          required: true

  - type: checkboxes
    id: code-quality
    attributes:
      label: Code Quality Standards
      description: Commitment to maintaining high code quality
      options:
        - label: I will follow Go best practices and project conventions
          required: true
        - label: I will ensure golangci-lint passes with no new issues
          required: true
        - label: I will write clear, self-documenting code
          required: true
        - label: I will add appropriate error handling and logging
          required: true
        - label: I will consider performance implications
          required: true

  - type: textarea
    id: notes
    attributes:
      label: Additional Notes
      description: Any additional context, research, or considerations for this task
      placeholder: |
        - Research findings
        - Alternative approaches considered
        - Potential risks or concerns
        - Links to relevant documentation or issues

  - type: checkboxes
    id: final-commitment
    attributes:
      label: Final Development Commitment
      description: Final acknowledgment of TDD requirements
      options:
        - label: I commit to following Test-Driven Development for this task
          required: true
        - label: I understand that code review will verify TDD compliance
          required: true
        - label: I agree that insufficient testing will result in change requests
          required: true
        - label: I will maintain the project's high standards for code quality
          required: true