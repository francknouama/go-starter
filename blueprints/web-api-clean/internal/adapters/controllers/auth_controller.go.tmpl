package controllers

import (
	"net/http"

	"{{.ModulePath}}/internal/adapters/presenters"
	"{{.ModulePath}}/internal/domain/entities"
	"{{.ModulePath}}/internal/domain/usecases"
	"{{.ModulePath}}/internal/domain/ports"
)

// AuthController handles authentication-related HTTP requests
type AuthController struct {
	authUseCase   *usecases.AuthUseCase
	authPresenter *presenters.AuthPresenter
	logger        ports.Logger
}

// LoginRequest represents the login request payload
type LoginRequest struct {
	Identifier string `json:"identifier" binding:"required"` // email or username
	Password   string `json:"password" binding:"required"`
}

// RefreshTokenRequest represents the refresh token request payload
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token" binding:"required"`
}

// NewAuthController creates a new AuthController instance
func NewAuthController(
	authUseCase *usecases.AuthUseCase,
	authPresenter *presenters.AuthPresenter,
	logger ports.Logger,
) *AuthController {
	return &AuthController{
		authUseCase:   authUseCase,
		authPresenter: authPresenter,
		logger:        logger,
	}
}

// Login authenticates a user and returns tokens
// @Summary User login
// @Description Authenticate user and return access/refresh tokens
// @Tags auth
// @Accept json
// @Produce json
// @Param request body LoginRequest true "Login credentials"
// @Success 200 {object} presenters.LoginResponse
// @Failure 400 {object} presenters.ErrorResponse
// @Failure 401 {object} presenters.ErrorResponse
// @Failure 500 {object} presenters.ErrorResponse
// @Router /auth/login [post]
func (ac *AuthController) Login() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		var req LoginRequest
		if err := ctx.BindJSON(&req); err != nil {
			ac.logger.Warn("Invalid login request", "error", err)
			ctx.JSON(http.StatusBadRequest, ac.authPresenter.PresentError(err))
			return
		}

		// Get client information
		ipAddress := ctx.GetClientIP()
		userAgent := ctx.GetHeader("User-Agent")

		// Convert request to use case input
		input := usecases.LoginInput{
			Identifier: req.Identifier,
			Password:   req.Password,
			IPAddress:  ipAddress,
			UserAgent:  userAgent,
		}

		// Execute use case
		output, err := ac.authUseCase.Login(ctx.GetRequestContext(), input)
		if err != nil {
			ac.handleAuthError(ctx, err)
			return
		}

		// Present response
		response := ac.authPresenter.PresentLogin(output)
		ctx.JSON(http.StatusOK, response)
	}
}

// RefreshToken generates new tokens from a refresh token
// @Summary Refresh access token
// @Description Generate new access token using refresh token
// @Tags auth
// @Accept json
// @Produce json
// @Param request body RefreshTokenRequest true "Refresh token"
// @Success 200 {object} presenters.LoginResponse
// @Failure 400 {object} presenters.ErrorResponse
// @Failure 401 {object} presenters.ErrorResponse
// @Failure 500 {object} presenters.ErrorResponse
// @Router /auth/refresh [post]
func (ac *AuthController) RefreshToken() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		var req RefreshTokenRequest
		if err := ctx.BindJSON(&req); err != nil {
			ac.logger.Warn("Invalid refresh token request", "error", err)
			ctx.JSON(http.StatusBadRequest, ac.authPresenter.PresentError(err))
			return
		}

		// Get client information
		ipAddress := ctx.GetClientIP()
		userAgent := ctx.GetHeader("User-Agent")

		// Convert request to use case input
		input := usecases.RefreshTokenInput{
			RefreshToken: req.RefreshToken,
			IPAddress:    ipAddress,
			UserAgent:    userAgent,
		}

		// Execute use case
		output, err := ac.authUseCase.RefreshToken(ctx.GetRequestContext(), input)
		if err != nil {
			ac.handleAuthError(ctx, err)
			return
		}

		// Present response
		response := ac.authPresenter.PresentLogin(output)
		ctx.JSON(http.StatusOK, response)
	}
}

// Logout invalidates the current session
// @Summary User logout
// @Description Logout user and invalidate session
// @Tags auth
// @Accept json
// @Produce json
// @Success 204
// @Failure 401 {object} presenters.ErrorResponse
// @Failure 500 {object} presenters.ErrorResponse
// @Security ApiKeyAuth
// @Router /auth/logout [post]
func (ac *AuthController) Logout() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		// Get access token from Authorization header
		token := ac.extractTokenFromHeader(ctx)
		if token == "" {
			ctx.JSON(http.StatusUnauthorized, ac.authPresenter.PresentError(entities.ErrInvalidToken))
			return
		}

		// Execute use case
		if err := ac.authUseCase.Logout(ctx.GetRequestContext(), token); err != nil {
			ac.handleAuthError(ctx, err)
			return
		}

		ctx.NoContent(http.StatusNoContent)
	}
}

// LogoutAll invalidates all sessions for the current user
// @Summary Logout from all devices
// @Description Logout user from all devices and invalidate all sessions
// @Tags auth
// @Accept json
// @Produce json
// @Success 204
// @Failure 401 {object} presenters.ErrorResponse
// @Failure 500 {object} presenters.ErrorResponse
// @Security ApiKeyAuth
// @Router /auth/logout-all [post]
func (ac *AuthController) LogoutAll() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		// Get user from context (set by auth middleware)
		user, exists := ctx.Get("user")
		if !exists {
			ctx.JSON(http.StatusUnauthorized, ac.authPresenter.PresentError(entities.ErrInvalidToken))
			return
		}

		userEntity, ok := user.(*entities.User)
		if !ok {
			ac.logger.Error("Invalid user type in context")
			ctx.JSON(http.StatusInternalServerError, ac.authPresenter.PresentError(entities.ErrInvalidToken))
			return
		}

		// Execute use case
		if err := ac.authUseCase.LogoutAll(ctx.GetRequestContext(), userEntity.ID); err != nil {
			ac.handleAuthError(ctx, err)
			return
		}

		ctx.NoContent(http.StatusNoContent)
	}
}

// Me returns the current authenticated user information
// @Summary Get current user
// @Description Get current authenticated user information
// @Tags auth
// @Accept json
// @Produce json
// @Success 200 {object} presenters.UserResponse
// @Failure 401 {object} presenters.ErrorResponse
// @Security ApiKeyAuth
// @Router /auth/me [get]
func (ac *AuthController) Me() ports.HTTPHandler {
	return func(ctx ports.HTTPContext) {
		// Get user from context (set by auth middleware)
		user, exists := ctx.Get("user")
		if !exists {
			ctx.JSON(http.StatusUnauthorized, ac.authPresenter.PresentError(entities.ErrInvalidToken))
			return
		}

		userEntity, ok := user.(*entities.User)
		if !ok {
			ac.logger.Error("Invalid user type in context")
			ctx.JSON(http.StatusInternalServerError, ac.authPresenter.PresentError(entities.ErrInvalidToken))
			return
		}

		// Present user response (reuse user presenter)
		userPresenter := presenters.NewUserPresenter()
		response := userPresenter.PresentUser(userEntity)
		ctx.JSON(http.StatusOK, response)
	}
}


// extractTokenFromHeader extracts the access token from Authorization header
func (ac *AuthController) extractTokenFromHeader(ctx ports.HTTPContext) string {
	authHeader := ctx.GetHeader("Authorization")
	if authHeader == "" {
		return ""
	}

	// Expected format: "Bearer <token>"
	const bearerPrefix = "Bearer "
	if len(authHeader) < len(bearerPrefix) {
		return ""
	}

	if authHeader[:len(bearerPrefix)] != bearerPrefix {
		return ""
	}

	return authHeader[len(bearerPrefix):]
}

// handleAuthError handles authentication-related errors and returns appropriate HTTP responses
func (ac *AuthController) handleAuthError(ctx ports.HTTPContext, err error) {
	switch err {
	case entities.ErrInvalidCredentials, entities.ErrInvalidToken:
		ctx.JSON(http.StatusUnauthorized, ac.authPresenter.PresentError(err))
	case entities.ErrTokenExpired, entities.ErrSessionExpired, entities.ErrSessionNotFound:
		ctx.JSON(http.StatusUnauthorized, ac.authPresenter.PresentError(err))
	default:
		ac.logger.Error("Unexpected error in auth controller", "error", err)
		ctx.JSON(http.StatusInternalServerError, ac.authPresenter.PresentError(err))
	}
}