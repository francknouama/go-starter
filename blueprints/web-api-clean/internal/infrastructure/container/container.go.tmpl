package container

import (
	"{{.ModulePath}}/internal/adapters/controllers"
	{{if ne .DatabaseDriver ""}}
	"{{.ModulePath}}/internal/adapters/presenters"
	"{{.ModulePath}}/internal/domain/usecases"
	"{{.ModulePath}}/internal/infrastructure/persistence"
	{{end}}
	"{{.ModulePath}}/internal/domain/ports"
	"{{.ModulePath}}/internal/infrastructure/config"
	"{{.ModulePath}}/internal/infrastructure/logger"
	"{{.ModulePath}}/internal/infrastructure/services"
	"{{.ModulePath}}/internal/infrastructure/web"
)

// Container holds all application dependencies
// This implements dependency injection for Clean Architecture
type Container struct {
	// Configuration
	Config *config.Config

	// Infrastructure Services
	Logger          ports.Logger
	{{if ne .DatabaseDriver ""}}
	Repository      ports.Repository
	{{end}}
	PasswordService ports.PasswordService
	{{if ne .AuthType ""}}
	TokenService    ports.TokenService
	{{end}}
	EmailService    ports.EmailService

	{{if ne .DatabaseDriver ""}}
	// Use Cases
	UserUseCase *usecases.UserUseCase
	{{end}}
	{{if ne .AuthType ""}}
	AuthUseCase *usecases.AuthUseCase
	{{end}}

	{{if ne .DatabaseDriver ""}}
	// Presenters
	UserPresenter *presenters.UserPresenter
	{{end}}
	{{if ne .AuthType ""}}
	AuthPresenter *presenters.AuthPresenter
	{{end}}

	// Controllers
	HealthController *controllers.HealthController
	{{if ne .DatabaseDriver ""}}
	UserController   *controllers.UserController
	{{end}}
	{{if ne .AuthType ""}}
	AuthController   *controllers.AuthController
	{{end}}

	// Web Infrastructure
	Router *web.RouterService
}

// NewContainer creates and wires all dependencies
func NewContainer(cfg *config.Config) (*Container, error) {
	container := &Container{
		Config: cfg,
	}

	// Initialize infrastructure services
	if err := container.initInfrastructure(); err != nil {
		return nil, err
	}

	// Initialize use cases
	if err := container.initUseCases(); err != nil {
		return nil, err
	}

	// Initialize presenters
	if err := container.initPresenters(); err != nil {
		return nil, err
	}

	// Initialize controllers
	if err := container.initControllers(); err != nil {
		return nil, err
	}

	// Initialize web layer
	if err := container.initWeb(); err != nil {
		return nil, err
	}

	return container, nil
}

// initInfrastructure initializes all infrastructure services
func (c *Container) initInfrastructure() error {
	// Initialize logger
	loggerFactory := logger.NewFactory(c.Config.Logger)
	c.Logger = loggerFactory.CreateLogger()

	{{if ne .DatabaseDriver ""}}
	// Initialize database and repository
	db, err := persistence.NewDatabase(c.Config.Database, c.Logger)
	if err != nil {
		return err
	}

	c.Repository = persistence.NewRepository(db.GetDB(), c.Logger)
	{{end}}

	{{if ne .AuthType ""}}
	// Initialize external services
	c.PasswordService = services.NewPasswordService(c.Logger)
	{{end}}
	
	{{if ne .AuthType ""}}
	c.TokenService = services.NewTokenService(c.Config.Auth, c.Logger)
	{{end}}
	
	c.EmailService = services.NewEmailService(c.Config.Email, c.Logger)

	return nil
}

// initUseCases initializes all use cases with their dependencies
func (c *Container) initUseCases() error {
	{{if ne .DatabaseDriver ""}}
	// Initialize user use case
	c.UserUseCase = usecases.NewUserUseCase(
		c.Repository.UserRepository(),
		c.PasswordService,
		c.Logger,
		c.EmailService,
	)
	{{end}}

	{{if and (ne .AuthType "") (ne .DatabaseDriver "")}}
	// Initialize auth use case (requires database for session storage)
	c.AuthUseCase = usecases.NewAuthUseCase(
		c.Repository.UserRepository(),
		c.Repository.AuthSessionRepository(),
		c.PasswordService,
		c.TokenService,
		c.Logger,
	)
	{{end}}

	return nil
}

// initPresenters initializes all presenters
func (c *Container) initPresenters() error {
	{{if ne .DatabaseDriver ""}}
	c.UserPresenter = presenters.NewUserPresenter()
	{{end}}
	{{if ne .AuthType ""}}
	c.AuthPresenter = presenters.NewAuthPresenter()
	{{end}}
	return nil
}

// initControllers initializes all controllers with their dependencies
func (c *Container) initControllers() error {
	// Health controller (always available)
	c.HealthController = controllers.NewHealthController()

	{{if ne .DatabaseDriver ""}}
	// User controller
	c.UserController = controllers.NewUserController(
		c.UserUseCase,
		c.UserPresenter,
		c.Logger,
	)
	{{end}}

	{{if ne .AuthType ""}}
	// Auth controller
	c.AuthController = controllers.NewAuthController(
		c.AuthUseCase,
		c.AuthPresenter,
		c.Logger,
	)
	{{end}}

	return nil
}

// initWeb initializes the web layer
func (c *Container) initWeb() error {
	router, err := web.NewRouterService(c.Config.Server, c.Logger)
	if err != nil {
		return err
	}
	c.Router = router

	{{if and (ne .AuthType "") (ne .DatabaseDriver "")}}
	// Set auth use case for middleware
	c.Router.SetAuthUseCase(c.AuthUseCase)
	{{end}}

	// Register routes
	c.registerRoutes()

	return nil
}

// registerRoutes registers all application routes
func (c *Container) registerRoutes() {
	// Health routes
	c.Router.RegisterHealthRoutes(c.HealthController)

	{{if ne .DatabaseDriver ""}}
	// User routes
	c.Router.RegisterUserRoutes(c.UserController)
	{{end}}

	{{if ne .AuthType ""}}
	// Auth routes
	c.Router.RegisterAuthRoutes(c.AuthController)
	{{end}}
}

// GetRouter returns the configured router
func (c *Container) GetRouter() *web.RouterService {
	return c.Router
}

// Cleanup performs cleanup operations
func (c *Container) Cleanup() error {
	c.Logger.Info("Cleaning up application resources")

	{{if ne .DatabaseDriver ""}}
	// Close database connections
	if repo, ok := c.Repository.(*persistence.Repository); ok {
		if err := repo.Close(); err != nil {
			c.Logger.Error("Failed to close repository", "error", err)
			return err
		}
	}
	{{end}}

	c.Logger.Info("Application cleanup completed")
	return nil
}