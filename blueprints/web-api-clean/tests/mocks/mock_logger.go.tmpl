package mocks

import (
	"github.com/stretchr/testify/mock"
	"{{.ModulePath}}/internal/domain/ports"
)

// MockLogger is a mock implementation of ports.Logger
type MockLogger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: msg, fields
func (m *MockLogger) Debug(msg string, fields ...interface{}) {
	m.Called(msg, fields)
}

// Info provides a mock function with given fields: msg, fields
func (m *MockLogger) Info(msg string, fields ...interface{}) {
	m.Called(msg, fields)
}

// Warn provides a mock function with given fields: msg, fields
func (m *MockLogger) Warn(msg string, fields ...interface{}) {
	m.Called(msg, fields)
}

// Error provides a mock function with given fields: msg, fields
func (m *MockLogger) Error(msg string, fields ...interface{}) {
	m.Called(msg, fields)
}

// Fatal provides a mock function with given fields: msg, fields
func (m *MockLogger) Fatal(msg string, fields ...interface{}) {
	m.Called(msg, fields)
}

// With provides a mock function with given fields: fields
func (m *MockLogger) With(fields ...interface{}) ports.Logger {
	args := m.Called(fields)
	if args.Get(0) == nil {
		return m // Return self as a safe default
	}
	return args.Get(0).(ports.Logger)
}

// AssertDebugCalled asserts that Debug was called with the given message
func (m *MockLogger) AssertDebugCalled(t mock.TestingT, msg string) bool {
	return m.AssertCalled(t, "Debug", msg, mock.Anything)
}

// AssertInfoCalled asserts that Info was called with the given message
func (m *MockLogger) AssertInfoCalled(t mock.TestingT, msg string) bool {
	return m.AssertCalled(t, "Info", msg, mock.Anything)
}

// AssertWarnCalled asserts that Warn was called with the given message
func (m *MockLogger) AssertWarnCalled(t mock.TestingT, msg string) bool {
	return m.AssertCalled(t, "Warn", msg, mock.Anything)
}

// AssertErrorCalled asserts that Error was called with the given message
func (m *MockLogger) AssertErrorCalled(t mock.TestingT, msg string) bool {
	return m.AssertCalled(t, "Error", msg, mock.Anything)
}

// ExpectDebug sets up an expectation for Debug to be called
func (m *MockLogger) ExpectDebug(msg string) *mock.Call {
	return m.On("Debug", msg, mock.Anything)
}

// ExpectInfo sets up an expectation for Info to be called
func (m *MockLogger) ExpectInfo(msg string) *mock.Call {
	return m.On("Info", msg, mock.Anything)
}

// ExpectWarn sets up an expectation for Warn to be called
func (m *MockLogger) ExpectWarn(msg string) *mock.Call {
	return m.On("Warn", msg, mock.Anything)
}

// ExpectError sets up an expectation for Error to be called
func (m *MockLogger) ExpectError(msg string) *mock.Call {
	return m.On("Error", msg, mock.Anything)
}
