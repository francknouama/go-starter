package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"{{.ModulePath}}/internal/domain/entities"
)

// mockUserRepository is a mock implementation of ports.UserRepository
type mockUserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (m *mockUserRepository) Create(ctx context.Context, user *entities.User) error {
	args := m.Called(ctx, user)
	return args.Error(0)
}

// GetByID provides a mock function with given fields: ctx, id
func (m *mockUserRepository) GetByID(ctx context.Context, id string) (*entities.User, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.User), args.Error(1)
}

// GetByEmail provides a mock function with given fields: ctx, email
func (m *mockUserRepository) GetByEmail(ctx context.Context, email string) (*entities.User, error) {
	args := m.Called(ctx, email)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.User), args.Error(1)
}

// GetByUsername provides a mock function with given fields: ctx, username
func (m *mockUserRepository) GetByUsername(ctx context.Context, username string) (*entities.User, error) {
	args := m.Called(ctx, username)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.User), args.Error(1)
}

// Update provides a mock function with given fields: ctx, user
func (m *mockUserRepository) Update(ctx context.Context, user *entities.User) error {
	args := m.Called(ctx, user)
	return args.Error(0)
}

// Delete provides a mock function with given fields: ctx, id
func (m *mockUserRepository) Delete(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// List provides a mock function with given fields: ctx, offset, limit
func (m *mockUserRepository) List(ctx context.Context, offset, limit int) ([]*entities.User, error) {
	args := m.Called(ctx, offset, limit)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.User), args.Error(1)
}

// ExistsByEmail provides a mock function with given fields: ctx, email
func (m *mockUserRepository) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	args := m.Called(ctx, email)
	return args.Bool(0), args.Error(1)
}

// ExistsByUsername provides a mock function with given fields: ctx, username
func (m *mockUserRepository) ExistsByUsername(ctx context.Context, username string) (bool, error) {
	args := m.Called(ctx, username)
	return args.Bool(0), args.Error(1)
}
