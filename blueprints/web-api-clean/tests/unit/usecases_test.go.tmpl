package unit_test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"{{.ModulePath}}/internal/domain/entities"
	"{{.ModulePath}}/internal/domain/usecases"
	"{{.ModulePath}}/tests/mocks"
)

func TestUserUseCase_CreateUser(t *testing.T) {
	mockRepo := new(mocks.mockUserRepository)
	mockLogger := new(mocks.mockLogger)
	mockPasswordService := new(mocks.mockPasswordService)
	mockEmailService := new(mocks.mockEmailService)
	useCase := usecases.NewUserUseCase(mockRepo, mockPasswordService, mockLogger, mockEmailService)

	ctx := context.Background()
	input := usecases.UserUseCaseInput{
		Email:     "test@example.com",
		Username:  "testuser",
		FirstName: "Test",
		LastName:  "User",
		Password:  "password123",
	}

	// Test case 1: Successful user creation
	mockRepo.On("ExistsByEmail", ctx, input.Email).Return(false, nil).Once()
	mockRepo.On("ExistsByUsername", ctx, input.Username).Return(false, nil).Once()
	mockPasswordService.On("Hash", input.Password).Return("hashed_password", nil).Once()
	mockRepo.On("Create", ctx, mock.AnythingOfType("*entities.User")).Return(nil).Once()
	mockEmailService.On("SendWelcomeEmail", mock.Anything, mock.AnythingOfType("*entities.User")).Return(nil).Maybe()
	mockLogger.ExpectInfo("Creating new user").Return().Once()
	mockLogger.ExpectInfo("User created successfully").Return().Once()

	output, err := useCase.CreateUser(ctx, input)
	assert.NoError(t, err)
	assert.NotNil(t, output)
	assert.NotNil(t, output.User)
	assert.Equal(t, input.Email, output.User.Email)
	assert.Equal(t, input.Username, output.User.Username)
	mockRepo.AssertExpectations(t)
	mockLogger.AssertExpectations(t)

	// Test case 2: Email already exists
	mockRepo.On("ExistsByEmail", ctx, input.Email).Return(true, nil).Once()
	mockLogger.ExpectInfo("Creating new user").Return().Once()

	output, err = useCase.CreateUser(ctx, input)
	assert.Error(t, err)
	assert.Equal(t, entities.ErrEmailAlreadyExists, err)
	assert.Nil(t, output)
	mockRepo.AssertExpectations(t)
	mockLogger.AssertExpectations(t)
}
