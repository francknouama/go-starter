name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GO_VERSION: '{{.GoVersion}}'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{`{{ runner.os }}`}}-go-${{`{{ env.GO_VERSION }}`}}-${{`{{ hashFiles('**/go.sum') }}`}}

    - name: Run tests
      run: go test -v ./...

    - name: Create build directory
      run: mkdir -p dist

    - name: Build binaries for multiple platforms
      run: |
        # Linux builds
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-linux-amd64 .
        
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-linux-arm64 .

        # macOS builds
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-darwin-amd64 .
        
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-darwin-arm64 .

        # Windows builds
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-windows-amd64.exe .
        
        GOOS=windows GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags="-w -s -X main.version=${{`{{ github.ref_name }}`}} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o dist/{{.ProjectName}}-windows-arm64.exe .

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "## Changes in ${{`{{ github.ref_name }}`}}" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Commits since $LAST_TAG:" >> $GITHUB_ENV
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> $GITHUB_ENV
        else
          echo "### Recent commits:" >> $GITHUB_ENV
          git log --pretty=format:"- %s (%h)" -10 >> $GITHUB_ENV
        fi
        echo "" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/{{.ProjectName}}-*
          dist/checksums.txt
        body: |
          ${{`{{ env.CHANGELOG }}`}}
          
          ## Installation

          ### Download Binary
          
          **Linux (x86_64)**:
          ```bash
          curl -L -o {{.ProjectName}} https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-linux-amd64
          chmod +x {{.ProjectName}}
          sudo mv {{.ProjectName}} /usr/local/bin/
          ```

          **macOS (Intel)**:
          ```bash
          curl -L -o {{.ProjectName}} https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-darwin-amd64
          chmod +x {{.ProjectName}}
          sudo mv {{.ProjectName}} /usr/local/bin/
          ```

          **macOS (Apple Silicon)**:
          ```bash
          curl -L -o {{.ProjectName}} https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-darwin-arm64
          chmod +x {{.ProjectName}}
          sudo mv {{.ProjectName}} /usr/local/bin/
          ```

          **Windows (PowerShell)**:
          ```powershell
          Invoke-WebRequest -Uri "https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-windows-amd64.exe" -OutFile "{{.ProjectName}}.exe"
          ```

          ### Verify Installation
          ```bash
          {{.ProjectName}} --version
          {{.ProjectName}} --help
          ```

          ## Checksums
          
          Verify your download with SHA256:
          ```
          ${{`{{ hashFiles('dist/checksums.txt') }}`}}
          ```
          
          Full checksums are available in the `checksums.txt` file attached to this release.
        draft: false
        prerelease: ${{`{{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}`}}
      env:
        GITHUB_TOKEN: ${{`{{ secrets.GITHUB_TOKEN }}`}}

    - name: Upload to package registries
      run: |
        echo "üöÄ Binaries uploaded to GitHub Releases"
        echo "üì¶ Release ${{`{{ github.ref_name }}`}} created successfully"
        
        # Future: Add Homebrew formula update
        # Future: Add Chocolatey package update
        # Future: Add Scoop manifest update

  homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc')

    steps:
    - name: Update Homebrew formula
      run: |
        echo "üìù TODO: Update Homebrew formula"
        echo "Version: ${{`{{ github.ref_name }}`}}"
        echo "Linux AMD64: https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-linux-amd64"
        echo "Darwin AMD64: https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-darwin-amd64"
        echo "Darwin ARM64: https://github.com/${{`{{ github.repository }}`}}/releases/download/${{`{{ github.ref_name }}`}}/{{.ProjectName}}-darwin-arm64"
        
        # Future implementation:
        # 1. Fork homebrew-core or create homebrew tap
        # 2. Update formula with new version and checksums
        # 3. Create PR to homebrew repository

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: build-and-release
    if: always()

    steps:
    - name: Notify success
      if: needs.build-and-release.result == 'success'
      run: |
        echo "‚úÖ Release ${{`{{ github.ref_name }}`}} published successfully!"
        echo "üì¶ Binaries available at: https://github.com/${{`{{ github.repository }}`}}/releases/tag/${{`{{ github.ref_name }}`}}"

    - name: Notify failure
      if: needs.build-and-release.result == 'failure'
      run: |
        echo "‚ùå Release ${{`{{ github.ref_name }}`}} failed!"
        echo "Please check the build logs and retry."
        exit 1