name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '{{.GoVersion}}'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [{{.GoVersion}}, '1.22', '1.23']

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ matrix.go-version }}`}}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{`{{ runner.os }}`}}-go-${{`{{ matrix.go-version }}`}}-${{`{{ hashFiles('**/go.sum') }}`}}
        restore-keys: |
          ${{`{{ runner.os }}`}}-go-${{`{{ matrix.go-version }}`}}-
          ${{`{{ runner.os }}`}}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        CGO_ENABLED: 1

    - name: Upload coverage to Codecov
      if: matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      env:
        CODECOV_TOKEN: ${{`{{ secrets.CODECOV_TOKEN }}`}}

    - name: Test CLI commands
      run: |
        go build -o ./{{.ProjectName}} .
        ./{{.ProjectName}} --help
        ./{{.ProjectName}} --version

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}
        check-latest: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=10m

  build:
    name: Build
    runs-on: ${{`{{ matrix.os }}`}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}

    - name: Build binary
      run: |
        go build -ldflags="-w -s -X main.version=${{`{{ github.sha }}`}}" -o ./bin/{{.ProjectName}} .
      env:
        CGO_ENABLED: 0
        GOOS: ${{`{{ matrix.goos }}`}}
        GOARCH: ${{`{{ matrix.goarch }}`}}

    - name: Test binary
      run: |
        ./bin/{{.ProjectName}} --version
        ./bin/{{.ProjectName}} --help
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: {{.ProjectName}}-${{`{{ matrix.goos }}`}}-${{`{{ matrix.goarch }}`}}
        path: ./bin/{{.ProjectName}}*
        retention-days: 7

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    steps:
    - name: All checks passed
      run: echo "âœ… All CI checks passed successfully!"