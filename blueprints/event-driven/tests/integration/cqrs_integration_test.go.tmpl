package integration_test

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"

	"{{.ModulePath}}/internal/cqrs"
	"{{.ModulePath}}/internal/domain"
	"{{.ModulePath}}/internal/eventstore"
	"{{.ModulePath}}/internal/handlers/commands"
	"{{.ModulePath}}/internal/handlers/queries"
)

// CQRSIntegrationTestSuite tests the complete CQRS flow
type CQRSIntegrationTestSuite struct {
	suite.Suite
	commandBus cqrs.CommandBus
	queryBus   cqrs.QueryBus
	eventStore eventstore.EventStore
	repository domain.Repository
}

func (suite *CQRSIntegrationTestSuite) SetupSuite() {
	// Initialize event store (in-memory for testing)
	suite.eventStore = eventstore.NewInMemoryEventStore()
	
	// Initialize repository
	suite.repository = domain.NewRepository(suite.eventStore)
	
	// Initialize command bus
	suite.commandBus = cqrs.NewCommandBusBuilder().
		WithHandler("CreateUser", commands.NewCreateUserHandler(suite.repository)).
		WithHandler("UpdateUser", commands.NewUpdateUserHandler(suite.repository)).
		WithHandler("DeleteUser", commands.NewDeleteUserHandler(suite.repository)).
		WithMiddleware(cqrs.TimeoutMiddleware(5 * time.Second)).
		Build()
	
	// Initialize query bus
	suite.queryBus = cqrs.NewQueryBusBuilder().
		WithHandler("GetUser", queries.NewGetUserHandler(suite.repository)).
		WithHandler("GetUsers", queries.NewGetUsersHandler(suite.repository)).
		WithMiddleware(cqrs.QueryTimeoutMiddleware(3 * time.Second)).
		Build()
}

func (suite *CQRSIntegrationTestSuite) TearDownTest() {
	// Clear event store between tests
	if store, ok := suite.eventStore.(*eventstore.InMemoryEventStore); ok {
		store.Clear()
	}
}

func (suite *CQRSIntegrationTestSuite) TestCreateUserFlow() {
	ctx := context.Background()
	userID := "user-123"
	userName := "John Doe"
	userEmail := "john@example.com"
	
	// Step 1: Create user via command
	createCmd := commands.NewCreateUserCommand(userID, userName, userEmail)
	result, err := suite.commandBus.Dispatch(ctx, createCmd)
	
	require.NoError(suite.T(), err)
	require.NotNil(suite.T(), result)
	assert.True(suite.T(), result.Success)
	assert.Equal(suite.T(), createCmd.CommandID(), result.CommandID)
	assert.Equal(suite.T(), userID, result.AggregateID)
	assert.NotEmpty(suite.T(), result.Events)
	
	// Step 2: Query user to verify creation
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	
	require.NoError(suite.T(), err)
	require.NotNil(suite.T(), queryResult)
	assert.True(suite.T(), queryResult.Success)
	
	// Verify user data
	user, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	assert.Equal(suite.T(), userID, user.GetID())
	assert.Equal(suite.T(), userName, user.Name)
	assert.Equal(suite.T(), userEmail, user.Email)
}

func (suite *CQRSIntegrationTestSuite) TestUpdateUserFlow() {
	ctx := context.Background()
	userID := "user-456"
	
	// Step 1: Create user first
	createCmd := commands.NewCreateUserCommand(userID, "Jane Doe", "jane@example.com")
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Step 2: Update user
	newName := "Jane Smith"
	newEmail := "jane.smith@example.com"
	updateCmd := commands.NewUpdateUserCommand(userID, newName, newEmail)
	updateResult, err := suite.commandBus.Dispatch(ctx, updateCmd)
	
	require.NoError(suite.T(), err)
	require.NotNil(suite.T(), updateResult)
	assert.True(suite.T(), updateResult.Success)
	assert.Equal(suite.T(), userID, updateResult.AggregateID)
	assert.NotEmpty(suite.T(), updateResult.Events)
	
	// Step 3: Query updated user
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	
	// Verify updated data
	user, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	assert.Equal(suite.T(), userID, user.GetID())
	assert.Equal(suite.T(), newName, user.Name)
	assert.Equal(suite.T(), newEmail, user.Email)
	assert.Greater(suite.T(), user.GetVersion(), 1)
}

func (suite *CQRSIntegrationTestSuite) TestDeleteUserFlow() {
	ctx := context.Background()
	userID := "user-789"
	
	// Step 1: Create user first
	createCmd := commands.NewCreateUserCommand(userID, "Bob Johnson", "bob@example.com")
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Step 2: Delete user
	deleteCmd := commands.NewDeleteUserCommand(userID)
	deleteResult, err := suite.commandBus.Dispatch(ctx, deleteCmd)
	
	require.NoError(suite.T(), err)
	require.NotNil(suite.T(), deleteResult)
	assert.True(suite.T(), deleteResult.Success)
	assert.Equal(suite.T(), userID, deleteResult.AggregateID)
	assert.NotEmpty(suite.T(), deleteResult.Events)
	
	// Step 3: Query deleted user should fail
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	
	// Should return error or empty result
	assert.True(suite.T(), err != nil || !queryResult.Success || queryResult.Data == nil)
}

func (suite *CQRSIntegrationTestSuite) TestGetUsersFlow() {
	ctx := context.Background()
	
	// Step 1: Create multiple users
	userIDs := []string{"user-001", "user-002", "user-003"}
	for i, userID := range userIDs {
		createCmd := commands.NewCreateUserCommand(
			userID,
			fmt.Sprintf("User %d", i+1),
			fmt.Sprintf("user%d@example.com", i+1),
		)
		result, err := suite.commandBus.Dispatch(ctx, createCmd)
		require.NoError(suite.T(), err)
		require.True(suite.T(), result.Success)
	}
	
	// Step 2: Query all users
	getUsersQuery := queries.NewGetUsersQuery(&cqrs.Pagination{
		Page:     1,
		PageSize: 10,
		Offset:   0,
		Limit:    10,
	})
	queryResult, err := suite.queryBus.Execute(ctx, getUsersQuery)
	
	require.NoError(suite.T(), err)
	require.NotNil(suite.T(), queryResult)
	assert.True(suite.T(), queryResult.Success)
	
	// Verify users data
	users, ok := queryResult.Data.([]*domain.User)
	require.True(suite.T(), ok)
	assert.Len(suite.T(), users, 3)
	assert.Equal(suite.T(), 3, queryResult.Count)
	assert.Equal(suite.T(), 3, queryResult.Total)
}

func (suite *CQRSIntegrationTestSuite) TestEventStoreConsistency() {
	ctx := context.Background()
	userID := "user-consistency"
	
	// Create user
	createCmd := commands.NewCreateUserCommand(userID, "Test User", "test@example.com")
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Update user multiple times
	for i := 0; i < 5; i++ {
		updateCmd := commands.NewUpdateUserCommand(
			userID,
			fmt.Sprintf("Test User %d", i+1),
			fmt.Sprintf("test%d@example.com", i+1),
		)
		updateResult, err := suite.commandBus.Dispatch(ctx, updateCmd)
		require.NoError(suite.T(), err)
		require.True(suite.T(), updateResult.Success)
	}
	
	// Verify event store has all events
	events, err := suite.eventStore.GetEvents(ctx, userID, 0)
	require.NoError(suite.T(), err)
	assert.Len(suite.T(), events, 6) // 1 create + 5 updates
	
	// Verify aggregate version consistency
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	
	user, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	assert.Equal(suite.T(), 6, user.GetVersion())
}

func (suite *CQRSIntegrationTestSuite) TestConcurrencyControl() {
	ctx := context.Background()
	userID := "user-concurrency"
	
	// Create user
	createCmd := commands.NewCreateUserCommand(userID, "Concurrent User", "concurrent@example.com")
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Simulate concurrent updates
	results := make(chan *cqrs.CommandResult, 10)
	errors := make(chan error, 10)
	
	for i := 0; i < 10; i++ {
		go func(index int) {
			updateCmd := commands.NewUpdateUserCommand(
				userID,
				fmt.Sprintf("Concurrent User %d", index),
				fmt.Sprintf("concurrent%d@example.com", index),
			)
			result, err := suite.commandBus.Dispatch(ctx, updateCmd)
			if err != nil {
				errors <- err
			} else {
				results <- result
			}
		}(i)
	}
	
	// Collect results
	successCount := 0
	conflictCount := 0
	
	for i := 0; i < 10; i++ {
		select {
		case result := <-results:
			if result.Success {
				successCount++
			}
		case err := <-errors:
			if cqrs.GetCommandErrorCode(err) == "CONCURRENCY_CONFLICT" {
				conflictCount++
			}
		case <-time.After(5 * time.Second):
			suite.T().Fatal("timeout waiting for concurrent operations")
		}
	}
	
	// At least one operation should succeed
	assert.Greater(suite.T(), successCount, 0)
	
	// Verify final state is consistent
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	
	user, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	assert.Greater(suite.T(), user.GetVersion(), 1)
}

func (suite *CQRSIntegrationTestSuite) TestPerformanceCharacteristics() {
	ctx := context.Background()
	
	// Measure command latency
	start := time.Now()
	createCmd := commands.NewCreateUserCommand("perf-user", "Performance User", "perf@example.com")
	result, err := suite.commandBus.Dispatch(ctx, createCmd)
	commandLatency := time.Since(start)
	
	require.NoError(suite.T(), err)
	require.True(suite.T(), result.Success)
	assert.Less(suite.T(), commandLatency.Milliseconds(), int64(50), "Command latency should be < 50ms")
	
	// Measure query latency
	start = time.Now()
	getUserQuery := queries.NewGetUserQuery("perf-user")
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	queryLatency := time.Since(start)
	
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	assert.Less(suite.T(), queryLatency.Milliseconds(), int64(10), "Query latency should be < 10ms")
}

func (suite *CQRSIntegrationTestSuite) TestEventSourcingReplay() {
	ctx := context.Background()
	userID := "user-replay"
	
	// Create user and perform multiple operations
	operations := []struct {
		name  string
		email string
	}{
		{"Initial User", "initial@example.com"},
		{"Updated User", "updated@example.com"},
		{"Final User", "final@example.com"},
	}
	
	// Create user
	createCmd := commands.NewCreateUserCommand(userID, operations[0].name, operations[0].email)
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Update user multiple times
	for i := 1; i < len(operations); i++ {
		updateCmd := commands.NewUpdateUserCommand(userID, operations[i].name, operations[i].email)
		updateResult, err := suite.commandBus.Dispatch(ctx, updateCmd)
		require.NoError(suite.T(), err)
		require.True(suite.T(), updateResult.Success)
	}
	
	// Get current state
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	
	currentUser, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	
	// Replay from event store
	events, err := suite.eventStore.GetEvents(ctx, userID, 0)
	require.NoError(suite.T(), err)
	
	replayedUser := domain.NewUser(userID)
	for _, event := range events {
		err := replayedUser.ApplyEvent(event)
		require.NoError(suite.T(), err)
	}
	
	// Verify replayed state matches current state
	assert.Equal(suite.T(), currentUser.GetID(), replayedUser.GetID())
	assert.Equal(suite.T(), currentUser.Name, replayedUser.Name)
	assert.Equal(suite.T(), currentUser.Email, replayedUser.Email)
	assert.Equal(suite.T(), currentUser.GetVersion(), replayedUser.GetVersion())
}

func (suite *CQRSIntegrationTestSuite) TestSnapshots() {
	ctx := context.Background()
	userID := "user-snapshot"
	
	// Create user
	createCmd := commands.NewCreateUserCommand(userID, "Snapshot User", "snapshot@example.com")
	createResult, err := suite.commandBus.Dispatch(ctx, createCmd)
	require.NoError(suite.T(), err)
	require.True(suite.T(), createResult.Success)
	
	// Perform many updates to trigger snapshot
	for i := 0; i < 15; i++ { // Assuming snapshot threshold is 10
		updateCmd := commands.NewUpdateUserCommand(
			userID,
			fmt.Sprintf("Snapshot User %d", i+1),
			fmt.Sprintf("snapshot%d@example.com", i+1),
		)
		updateResult, err := suite.commandBus.Dispatch(ctx, updateCmd)
		require.NoError(suite.T(), err)
		require.True(suite.T(), updateResult.Success)
	}
	
	// Get user (should use snapshot if available)
	getUserQuery := queries.NewGetUserQuery(userID)
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
	
	user, ok := queryResult.Data.(*domain.User)
	require.True(suite.T(), ok)
	assert.Equal(suite.T(), userID, user.GetID())
	assert.Equal(suite.T(), 16, user.GetVersion()) // 1 create + 15 updates
}

func (suite *CQRSIntegrationTestSuite) TestErrorHandling() {
	ctx := context.Background()
	
	t := suite.T()
	
	// Test invalid command
	invalidCmd := commands.NewCreateUserCommand("", "", "") // Invalid empty values
	result, err := suite.commandBus.Dispatch(ctx, invalidCmd)
	
	assert.Error(t, err)
	assert.True(t, cqrs.IsCommandError(err))
	assert.Equal(t, "COMMAND_VALIDATION", cqrs.GetCommandErrorCode(err))
	assert.NotNil(t, result)
	assert.False(t, result.Success)
	
	// Test query for non-existent user
	getUserQuery := queries.NewGetUserQuery("non-existent-user")
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	
	// Should handle gracefully (implementation dependent)
	assert.True(t, err != nil || !queryResult.Success || queryResult.Data == nil)
}

func (suite *CQRSIntegrationTestSuite) TestTimeouts() {
	ctx := context.Background()
	
	// Test command timeout (would need a slow handler for real test)
	// For this test, we'll just verify timeout middleware is working
	createCmd := commands.NewCreateUserCommand("timeout-user", "Timeout User", "timeout@example.com")
	result, err := suite.commandBus.Dispatch(ctx, createCmd)
	
	// Should complete within timeout
	require.NoError(suite.T(), err)
	require.True(suite.T(), result.Success)
	
	// Test query timeout
	getUserQuery := queries.NewGetUserQuery("timeout-user")
	queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
	
	// Should complete within timeout
	require.NoError(suite.T(), err)
	require.True(suite.T(), queryResult.Success)
}

// Run the integration test suite
func TestCQRSIntegrationSuite(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping CQRS integration test suite in short mode")
	}
	
	suite.Run(t, new(CQRSIntegrationTestSuite))
}

// Benchmark tests
func BenchmarkCQRSIntegration_CreateUser(b *testing.B) {
	suite := &CQRSIntegrationTestSuite{}
	suite.SetupSuite()
	
	ctx := context.Background()
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		userID := fmt.Sprintf("bench-user-%d", i)
		createCmd := commands.NewCreateUserCommand(userID, "Benchmark User", "bench@example.com")
		result, err := suite.commandBus.Dispatch(ctx, createCmd)
		if err != nil || !result.Success {
			b.Fatalf("Failed to create user: %v", err)
		}
	}
}

func BenchmarkCQRSIntegration_GetUser(b *testing.B) {
	suite := &CQRSIntegrationTestSuite{}
	suite.SetupSuite()
	
	ctx := context.Background()
	userID := "bench-get-user"
	
	// Setup: Create a user
	createCmd := commands.NewCreateUserCommand(userID, "Benchmark Get User", "benchget@example.com")
	result, err := suite.commandBus.Dispatch(ctx, createCmd)
	if err != nil || !result.Success {
		b.Fatalf("Failed to create user for benchmark: %v", err)
	}
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		getUserQuery := queries.NewGetUserQuery(userID)
		queryResult, err := suite.queryBus.Execute(ctx, getUserQuery)
		if err != nil || !queryResult.Success {
			b.Fatalf("Failed to get user: %v", err)
		}
	}
}