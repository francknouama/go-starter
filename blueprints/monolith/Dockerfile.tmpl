# Build stage
FROM golang:{{.GoVersion}}-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make build-base
{{- if eq .DatabaseDriver "sqlite" }}
# SQLite requires CGO
RUN apk add --no-cache gcc musl-dev sqlite-dev
{{- end }}

# Set working directory
WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
# Build assets
FROM node:18-alpine AS asset-builder
WORKDIR /build
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
{{- end }}

# Build the application
{{- if eq .DatabaseDriver "sqlite" }}
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o app main.go
{{- else }}
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o app main.go
{{- end }}

# Runtime stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata
{{- if eq .DatabaseDriver "sqlite" }}
RUN apk add --no-cache sqlite-libs
{{- end }}

# Create non-root user
RUN addgroup -g 1000 -S appgroup && \
    adduser -u 1000 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/app .

{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
# Copy built assets from asset-builder
COPY --from=asset-builder /build/public ./public
{{- else }}
# Copy static assets
COPY --from=builder /build/static ./static
{{- end }}

# Copy views
COPY --from=builder /build/views ./views

{{- if ne .DatabaseDriver "" }}
# Copy database migrations
COPY --from=builder /build/database/migrations ./database/migrations
{{- end }}

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/storage && \
    chown -R appuser:appgroup /app

# Set environment
ENV APP_ENV=production \
    APP_HOST=0.0.0.0 \
    APP_PORT=8080

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Switch to non-root user
USER appuser

# Run the application
CMD ["./app"]