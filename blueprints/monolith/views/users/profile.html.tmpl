{{define "content"}}
<!-- Profile Header -->
<div class="bg-white dark:bg-gray-800 shadow">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="py-6 md:flex md:items-center md:justify-between">
            <div class="flex-1 min-w-0">
                <!-- User Info -->
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        {{- if .Data.User.Avatar}}
                        <img class="h-16 w-16 rounded-full object-cover ring-4 ring-white dark:ring-gray-800" 
                             src="{{.Data.User.Avatar}}" 
                             alt="{{.Data.User.FirstName}} {{.Data.User.LastName}}">
                        {{- else}}
                        <div class="h-16 w-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center ring-4 ring-white dark:ring-gray-800">
                            <span class="text-white text-xl font-bold">
                                {{substr .Data.User.FirstName 0 1}}{{substr .Data.User.LastName 0 1}}
                            </span>
                        </div>
                        {{- end}}
                    </div>
                    <div class="ml-4">
                        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
                            {{.Data.User.FirstName}} {{.Data.User.LastName}}
                        </h1>
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">
                            {{- if .Data.User.Username}}@{{.Data.User.Username}}{{else}}{{.Data.User.Email}}{{end}}
                        </p>
                        <div class="mt-1 flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                            {{- if .Data.User.Location}}
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                {{.Data.User.Location}}
                            </div>
                            {{- end}}
                            {{- if .Data.User.Website}}
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                                </svg>
                                <a href="{{.Data.User.Website}}" 
                                   target="_blank" 
                                   rel="noopener noreferrer" 
                                   class="hover:text-blue-600 dark:hover:text-blue-400">
                                    {{.Data.User.Website | replace "https://" "" | replace "http://" ""}}
                                </a>
                            </div>
                            {{- end}}
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a4 4 0 118 0v4m-4 6v6m-6 0h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"></path>
                                </svg>
                                Joined {{.Data.User.CreatedAt | formatDate "January 2006"}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-6 flex space-x-3 md:mt-0 md:ml-4">
                <a href="/settings" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    Edit Profile
                </a>
                {{- if ne .User.ID .Data.User.ID}}
                <button type="button" 
                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                    Message
                </button>
                {{- end}}
            </div>
        </div>
    </div>
</div>

<!-- Profile Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-8">
            <!-- About Section -->
            {{- if .Data.User.Bio}}
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">About</h2>
                <div class="text-gray-700 dark:text-gray-300 leading-relaxed">
                    <p>{{.Data.User.Bio}}</p>
                </div>
            </div>
            {{- end}}

            <!-- Recent Activity -->
            {{- if .Data.RecentActivity}}
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h2 class="text-lg font-medium text-gray-900 dark:text-white">Recent Activity</h2>
                </div>
                <div class="divide-y divide-gray-200 dark:divide-gray-700">
                    {{- range .Data.RecentActivity}}
                    <div class="px-6 py-4">
                        <div class="flex items-start space-x-3">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900/50 rounded-full flex items-center justify-center">
                                    {{- if eq .Action "login"}}
                                    <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                                    </svg>
                                    {{- else if eq .Action "project_update"}}
                                    <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    {{- else}}
                                    <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    {{- end}}
                                </div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <p class="text-sm text-gray-900 dark:text-white">{{.Description}}</p>
                                <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                    {{.Timestamp | timeAgo}}
                                </p>
                            </div>
                        </div>
                    </div>
                    {{- end}}
                </div>
            </div>
            {{- end}}

            <!-- Projects or Content -->
            {{- if .Data.Projects}}
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h2 class="text-lg font-medium text-gray-900 dark:text-white">Projects</h2>
                </div>
                <div class="divide-y divide-gray-200 dark:divide-gray-700">
                    {{- range .Data.Projects}}
                    <div class="px-6 py-4">
                        <div class="flex items-center justify-between">
                            <div class="flex-1">
                                <h3 class="text-sm font-medium text-gray-900 dark:text-white">
                                    <a href="/projects/{{.ID}}" class="hover:text-blue-600 dark:hover:text-blue-400">
                                        {{.Name}}
                                    </a>
                                </h3>
                                {{- if .Description}}
                                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">{{.Description}}</p>
                                {{- end}}
                                <div class="mt-2 flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium {{if eq .Status "active"}}bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300{{else if eq .Status "development"}}bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300{{else}}bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-300{{end}}">
                                        {{.Status | title}}
                                    </span>
                                    <span>{{.CreatedAt | formatDate "Jan 2, 2006"}}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{- end}}
                </div>
            </div>
            {{- end}}
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">
            <!-- Profile Stats -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Profile Statistics</h3>
                <div class="space-y-4">
                    {{- if .Data.Stats}}
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Total Logins</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{{.Data.Stats.TotalLogins | printf "%,d"}}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Projects</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{{.Data.Stats.PostCount | printf "%,d"}}</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Account Age</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{{.Data.Stats.AccountAge}} days</span>
                    </div>
                    {{- if .Data.Stats.LastLoginDate}}
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Last Login</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{{.Data.Stats.LastLoginDate | timeAgo}}</span>
                    </div>
                    {{- end}}
                    {{- end}}
                </div>
            </div>

            <!-- Account Status -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Account Status</h3>
                <div class="space-y-3">
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Email Verified</span>
                        {{- if .Data.User.IsVerified}}
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300">
                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                            </svg>
                            Verified
                        </span>
                        {{- else}}
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300">
                            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                            Pending
                        </span>
                        {{- end}}
                    </div>
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Account Active</span>
                        {{- if .Data.User.IsActive}}
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300">
                            Active
                        </span>
                        {{- else}}
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300">
                            Inactive
                        </span>
                        {{- end}}
                    </div>
                    {{- if .Data.User.DateOfBirth}}
                    <div class="flex items-center justify-between">
                        <span class="text-sm text-gray-500 dark:text-gray-400">Age</span>
                        <span class="text-sm font-medium text-gray-900 dark:text-white">{{.Data.User | calculateAge}} years</span>
                    </div>
                    {{- end}}
                </div>
            </div>

            <!-- Quick Actions -->
            {{- if eq .User.ID .Data.User.ID}}
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Quick Actions</h3>
                <div class="space-y-3">
                    <a href="/settings" 
                       class="w-full inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Account Settings
                    </a>
                    <a href="/settings/security" 
                       class="w-full inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                        </svg>
                        Security Settings
                    </a>
                    {{- if not .Data.User.IsVerified}}
                    <form action="/auth/resend-verification" method="POST">
                        {{- if .CSRFToken}}
                        <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
                        {{- end}}
                        <button type="submit" 
                                class="w-full inline-flex items-center px-3 py-2 border border-yellow-300 dark:border-yellow-600 rounded-md text-sm font-medium text-yellow-700 dark:text-yellow-300 bg-yellow-50 dark:bg-yellow-900/20 hover:bg-yellow-100 dark:hover:bg-yellow-900/40 transition-colors">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.83 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                            Verify Email
                        </button>
                    </form>
                    {{- end}}
                </div>
            </div>
            {{- end}}

            <!-- Contact Information -->
            {{- if or .Data.User.Email .Data.User.Website}}
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Contact</h3>
                <div class="space-y-3">
                    {{- if or (eq .User.ID .Data.User.ID) .Data.User.ShowEmail}}
                    <div class="flex items-center">
                        <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.83 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                        <a href="mailto:{{.Data.User.Email}}" 
                           class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300">
                            {{.Data.User.Email}}
                        </a>
                    </div>
                    {{- end}}
                    {{- if .Data.User.Website}}
                    <div class="flex items-center">
                        <svg class="w-4 h-4 text-gray-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                        </svg>
                        <a href="{{.Data.User.Website}}" 
                           target="_blank" 
                           rel="noopener noreferrer" 
                           class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300">
                            {{.Data.User.Website | replace "https://" "" | replace "http://" ""}}
                        </a>
                    </div>
                    {{- end}}
                </div>
            </div>
            {{- end}}
        </div>
    </div>
</div>
{{end}}

{{define "head"}}
<!-- Profile page specific meta tags -->
<meta property="og:type" content="profile">
<meta property="og:title" content="{{.Data.User.FirstName}} {{.Data.User.LastName}} - {{.Config.App.Name}}">
{{- if .Data.User.Bio}}
<meta property="og:description" content="{{.Data.User.Bio | truncate 160}}">
{{- end}}
{{- if .Data.User.Avatar}}
<meta property="og:image" content="{{.Data.User.Avatar}}">
{{- end}}

<!-- Structured data for profile -->
<script type="application/ld+json" {{if .Nonce}}nonce="{{.Nonce}}"{{end}}>
{
    "@context": "https://schema.org",
    "@type": "Person",
    "name": "{{.Data.User.FirstName}} {{.Data.User.LastName}}",
    {{- if .Data.User.Bio}}
    "description": "{{.Data.User.Bio}}",
    {{- end}}
    {{- if .Data.User.Avatar}}
    "image": "{{.Data.User.Avatar}}",
    {{- end}}
    {{- if .Data.User.Website}}
    "url": "{{.Data.User.Website}}",
    {{- end}}
    "memberOf": {
        "@type": "Organization",
        "name": "{{.Config.App.Name}}"
    }
}
</script>

<!-- Preload user avatar -->
{{- if .Data.User.Avatar}}
<link rel="preload" href="{{.Data.User.Avatar}}" as="image">
{{- end}}
{{end}}

{{define "scripts"}}
<script {{if .Nonce}}nonce="{{.Nonce}}"{{end}}>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize tooltips for status indicators
        const statusElements = document.querySelectorAll('[data-tooltip]');
        statusElements.forEach(element => {
            element.addEventListener('mouseenter', function() {
                // Add tooltip functionality if needed
            });
        });

        // Handle message button click
        const messageButton = document.querySelector('button[data-action="message"]');
        if (messageButton) {
            messageButton.addEventListener('click', function() {
                // Implement messaging functionality
                console.log('Message user:', '{{.Data.User.ID}}');
            });
        }

        // Lazy load project images if any
        if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                        observer.unobserve(img);
                    }
                });
            });

            document.querySelectorAll('img[data-src]').forEach(img => {
                imageObserver.observe(img);
            });
        }

        // Handle avatar upload (if editing own profile)
        {{- if eq .User.ID .Data.User.ID}}
        const avatarContainer = document.querySelector('.avatar-container');
        if (avatarContainer) {
            avatarContainer.addEventListener('click', function() {
                // Create file input
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.accept = 'image/*';
                fileInput.style.display = 'none';
                
                fileInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        // Validate file size (max 5MB)
                        if (file.size > 5 * 1024 * 1024) {
                            alert('File size must be less than 5MB');
                            return;
                        }
                        
                        // Validate file type
                        if (!file.type.startsWith('image/')) {
                            alert('Please select an image file');
                            return;
                        }
                        
                        // Upload avatar
                        uploadAvatar(file);
                    }
                });
                
                document.body.appendChild(fileInput);
                fileInput.click();
                document.body.removeChild(fileInput);
            });
        }

        function uploadAvatar(file) {
            const formData = new FormData();
            formData.append('avatar', file);
            formData.append('csrf_token', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));
            
            fetch('/settings/avatar', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update avatar image
                    const avatarImg = document.querySelector('.avatar-img');
                    if (avatarImg) {
                        avatarImg.src = data.avatar_url + '?t=' + Date.now(); // Cache bust
                    }
                    
                    // Show success message
                    showMessage('Avatar updated successfully!', 'success');
                } else {
                    showMessage(data.error || 'Failed to update avatar', 'error');
                }
            })
            .catch(error => {
                console.error('Avatar upload error:', error);
                showMessage('Failed to update avatar', 'error');
            });
        }

        function showMessage(message, type) {
            // Create or update flash message
            const existingFlash = document.querySelector('.flash-message-container');
            if (existingFlash) {
                existingFlash.remove();
            }
            
            const flashHTML = `
                <div class="flash-message-container fixed top-4 right-4 z-50 max-w-sm">
                    <div class="rounded-md p-4 shadow-lg border ${type === 'success' ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' : 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800'}">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 ${type === 'success' ? 'text-green-400' : 'text-red-400'}" fill="currentColor" viewBox="0 0 20 20">
                                    ${type === 'success' ? 
                                        '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>' :
                                        '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>'
                                    }
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium ${type === 'success' ? 'text-green-800 dark:text-green-200' : 'text-red-800 dark:text-red-200'}">${message}</p>
                            </div>
                            <div class="ml-auto pl-3">
                                <button type="button" onclick="this.closest('.flash-message-container').remove()" class="inline-flex rounded-md p-1.5 ${type === 'success' ? 'text-green-500 hover:bg-green-100 dark:text-green-300 dark:hover:bg-green-800' : 'text-red-500 hover:bg-red-100 dark:text-red-300 dark:hover:bg-red-800'} transition-colors">
                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', flashHTML);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                const flash = document.querySelector('.flash-message-container');
                if (flash) {
                    flash.remove();
                }
            }, 5000);
        }
        {{- end}}
    });
</script>
{{end}}