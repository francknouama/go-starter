{{define "auth-title"}}Create Account{{end}}

{{define "auth-subtitle"}}
<p class="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
    Already have an account? 
    <a href="/auth/login" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
        Sign in here
    </a>
</p>
{{end}}

{{define "content"}}
<form class="space-y-6" action="/auth/register" method="POST" data-validate="true">
    {{- if .CSRFToken}}
    <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
    {{- end}}
    
    <!-- Name Fields -->
    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
        <!-- First Name -->
        <div>
            <label for="first_name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                First name
            </label>
            <div class="mt-1">
                <input id="first_name" 
                       name="first_name" 
                       type="text" 
                       autocomplete="given-name" 
                       required 
                       autofocus
                       minlength="2"
                       maxlength="50"
                       value="{{.OldInput.first_name}}"
                       class="appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.first_name}}border-red-500 dark:border-red-400{{end}}"
                       placeholder="Enter your first name"
                       aria-describedby="{{if .Errors.first_name}}first_name-error{{end}}">
                {{- if .Errors.first_name}}
                <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="first_name-error" role="alert">
                    {{.Errors.first_name}}
                </p>
                {{- end}}
            </div>
        </div>

        <!-- Last Name -->
        <div>
            <label for="last_name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Last name
            </label>
            <div class="mt-1">
                <input id="last_name" 
                       name="last_name" 
                       type="text" 
                       autocomplete="family-name" 
                       required
                       minlength="2"
                       maxlength="50"
                       value="{{.OldInput.last_name}}"
                       class="appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.last_name}}border-red-500 dark:border-red-400{{end}}"
                       placeholder="Enter your last name"
                       aria-describedby="{{if .Errors.last_name}}last_name-error{{end}}">
                {{- if .Errors.last_name}}
                <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="last_name-error" role="alert">
                    {{.Errors.last_name}}
                </p>
                {{- end}}
            </div>
        </div>
    </div>

    <!-- Email Field -->
    <div>
        <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Email address
        </label>
        <div class="mt-1">
            <input id="email" 
                   name="email" 
                   type="email" 
                   autocomplete="email" 
                   required
                   value="{{.OldInput.email}}"
                   class="appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.email}}border-red-500 dark:border-red-400{{end}}"
                   placeholder="Enter your email address"
                   aria-describedby="{{if .Errors.email}}email-error{{end}} email-description">
            {{- if .Errors.email}}
            <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="email-error" role="alert">
                {{.Errors.email}}
            </p>
            {{- end}}
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400" id="email-description">
                We'll send you a verification email to confirm your account.
            </p>
        </div>
    </div>

    <!-- Username Field (Optional) -->
    <div>
        <label for="username" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Username <span class="text-gray-500 dark:text-gray-400">(optional)</span>
        </label>
        <div class="mt-1">
            <input id="username" 
                   name="username" 
                   type="text" 
                   autocomplete="username" 
                   minlength="3"
                   maxlength="30"
                   pattern="[a-zA-Z0-9_]+"
                   value="{{.OldInput.username}}"
                   class="appearance-none block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.username}}border-red-500 dark:border-red-400{{end}}"
                   placeholder="Choose a username"
                   aria-describedby="{{if .Errors.username}}username-error{{end}} username-description">
            {{- if .Errors.username}}
            <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="username-error" role="alert">
                {{.Errors.username}}
            </p>
            {{- end}}
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400" id="username-description">
                3-30 characters, letters, numbers, and underscores only.
            </p>
        </div>
    </div>

    <!-- Password Field -->
    <div>
        <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Password
        </label>
        <div class="mt-1 relative">
            <input id="password" 
                   name="password" 
                   type="password" 
                   autocomplete="new-password" 
                   required
                   minlength="8"
                   data-validate-password="true"
                   class="appearance-none block w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.password}}border-red-500 dark:border-red-400{{end}}"
                   placeholder="Create a strong password"
                   aria-describedby="{{if .Errors.password}}password-error{{end}} password-requirements">
            
            <!-- Show/Hide Password Toggle -->
            <button type="button" 
                    class="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onclick="togglePassword('password')"
                    tabindex="-1"
                    aria-label="Toggle password visibility">
                <svg id="password-show-icon" class="h-5 w-5 text-gray-400 hover:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                <svg id="password-hide-icon" class="h-5 w-5 text-gray-400 hover:text-gray-500 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                </svg>
            </button>
            
            {{- if .Errors.password}}
            <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="password-error" role="alert">
                {{.Errors.password}}
            </p>
            {{- end}}
        </div>
        
        <!-- Password Requirements -->
        <div class="mt-2" id="password-requirements">
            <p class="text-xs text-gray-500 dark:text-gray-400 mb-2">Password must contain:</p>
            <ul class="text-xs space-y-1">
                <li class="flex items-center text-gray-500 dark:text-gray-400" id="req-length">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    At least 8 characters
                </li>
                <li class="flex items-center text-gray-500 dark:text-gray-400" id="req-uppercase">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    One uppercase letter
                </li>
                <li class="flex items-center text-gray-500 dark:text-gray-400" id="req-lowercase">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    One lowercase letter
                </li>
                <li class="flex items-center text-gray-500 dark:text-gray-400" id="req-number">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    One number
                </li>
                <li class="flex items-center text-gray-500 dark:text-gray-400" id="req-special">
                    <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    One special character
                </li>
            </ul>
        </div>
    </div>

    <!-- Password Confirmation -->
    <div>
        <label for="password_confirmation" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Confirm password
        </label>
        <div class="mt-1 relative">
            <input id="password_confirmation" 
                   name="password_confirmation" 
                   type="password" 
                   autocomplete="new-password" 
                   required
                   data-confirm-password="#password"
                   class="appearance-none block w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 dark:placeholder-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm {{if .Errors.password_confirmation}}border-red-500 dark:border-red-400{{end}}"
                   placeholder="Confirm your password"
                   aria-describedby="{{if .Errors.password_confirmation}}password_confirmation-error{{end}}">
            
            <!-- Show/Hide Password Toggle -->
            <button type="button" 
                    class="absolute inset-y-0 right-0 pr-3 flex items-center"
                    onclick="togglePassword('password_confirmation')"
                    tabindex="-1"
                    aria-label="Toggle password confirmation visibility">
                <svg id="password_confirmation-show-icon" class="h-5 w-5 text-gray-400 hover:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                <svg id="password_confirmation-hide-icon" class="h-5 w-5 text-gray-400 hover:text-gray-500 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                </svg>
            </button>
            
            {{- if .Errors.password_confirmation}}
            <p class="mt-2 text-sm text-red-600 dark:text-red-400" id="password_confirmation-error" role="alert">
                {{.Errors.password_confirmation}}
            </p>
            {{- end}}
        </div>
    </div>

    <!-- Terms and Privacy -->
    <div class="flex items-center">
        <input id="terms" 
               name="terms" 
               type="checkbox" 
               required
               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700">
        <label for="terms" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">
            I agree to the 
            <a href="/terms" class="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 underline" target="_blank">
                Terms of Service
            </a> 
            and 
            <a href="/privacy" class="text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 underline" target="_blank">
                Privacy Policy
            </a>
        </label>
    </div>

    <!-- Marketing Emails (Optional) -->
    <div class="flex items-center">
        <input id="marketing" 
               name="marketing" 
               type="checkbox" 
               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700">
        <label for="marketing" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">
            I'd like to receive product updates and marketing emails (optional)
        </label>
    </div>

    <!-- Submit Button -->
    <div>
        <button type="submit" 
                class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                id="submit-button">
            <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-blue-500 group-hover:text-blue-400" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                    <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z"></path>
                </svg>
            </span>
            <span id="submit-text">Create account</span>
            <span id="submit-loading" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Creating account...
            </span>
        </button>
    </div>

    {{- if eq .AuthType "oauth2"}}
    <!-- OAuth Divider -->
    <div class="mt-6">
        <div class="relative">
            <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-gray-300 dark:border-gray-600"></div>
            </div>
            <div class="relative flex justify-center text-sm">
                <span class="px-2 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400">Or sign up with</span>
            </div>
        </div>
    </div>

    <!-- OAuth Buttons -->
    <div class="mt-6 grid grid-cols-1 gap-3">
        {{- if .Config.OAuth.Google.Enabled}}
        <a href="/auth/google" 
           class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
            <svg class="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285f4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34a853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#fbbc05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#ea4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span class="ml-2">Continue with Google</span>
        </a>
        {{- end}}

        {{- if .Config.OAuth.GitHub.Enabled}}
        <a href="/auth/github" 
           class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-sm font-medium text-gray-500 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd"></path>
            </svg>
            <span class="ml-2">Continue with GitHub</span>
        </a>
        {{- end}}
    </div>
    {{- end}}
</form>

<!-- Already have account -->
<div class="mt-6 text-center">
    <p class="text-sm text-gray-600 dark:text-gray-400">
        Already have an account?
        <a href="/auth/login" class="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
            Sign in here
        </a>
    </p>
</div>
{{end}}

{{define "scripts"}}
<script {{if .Nonce}}nonce="{{.Nonce}}"{{end}}>
    // Password visibility toggle
    function togglePassword(fieldId) {
        const field = document.getElementById(fieldId);
        const showIcon = document.getElementById(fieldId + '-show-icon');
        const hideIcon = document.getElementById(fieldId + '-hide-icon');
        
        if (field.type === 'password') {
            field.type = 'text';
            showIcon.classList.add('hidden');
            hideIcon.classList.remove('hidden');
        } else {
            field.type = 'password';
            showIcon.classList.remove('hidden');
            hideIcon.classList.add('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form[data-validate="true"]');
        const passwordField = document.getElementById('password');
        const confirmPasswordField = document.getElementById('password_confirmation');
        const submitButton = document.getElementById('submit-button');
        const submitText = document.getElementById('submit-text');
        const submitLoading = document.getElementById('submit-loading');

        // Password strength validation
        passwordField.addEventListener('input', function() {
            updatePasswordRequirements(this.value);
        });

        // Password confirmation validation
        confirmPasswordField.addEventListener('input', function() {
            validatePasswordConfirmation();
        });

        // Form submission
        form.addEventListener('submit', function(e) {
            // Show loading state
            submitButton.disabled = true;
            submitText.classList.add('hidden');
            submitLoading.classList.remove('hidden');

            // Validate form
            if (!validateRegistrationForm()) {
                e.preventDefault();
                resetSubmitButton();
                return;
            }
        });

        function updatePasswordRequirements(password) {
            const requirements = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /\d/.test(password),
                special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
            };

            // Update requirement indicators
            Object.keys(requirements).forEach(req => {
                const element = document.getElementById(`req-${req}`);
                const icon = element.querySelector('svg');
                const isValid = requirements[req];

                if (isValid) {
                    element.classList.remove('text-gray-500', 'dark:text-gray-400');
                    element.classList.add('text-green-600', 'dark:text-green-400');
                    icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>';
                    icon.classList.remove('text-gray-400');
                    icon.classList.add('text-green-600', 'dark:text-green-400');
                } else {
                    element.classList.remove('text-green-600', 'dark:text-green-400');
                    element.classList.add('text-gray-500', 'dark:text-gray-400');
                    icon.innerHTML = '<circle cx="12" cy="12" r="10"></circle>';
                    icon.classList.remove('text-green-600', 'dark:text-green-400');
                    icon.classList.add('text-gray-400');
                }
            });
        }

        function validatePasswordConfirmation() {
            const password = passwordField.value;
            const confirmation = confirmPasswordField.value;

            if (confirmation && password !== confirmation) {
                showFieldError(confirmPasswordField, 'Passwords do not match');
            } else {
                clearFieldError(confirmPasswordField);
            }
        }

        function validateRegistrationForm() {
            let isValid = true;
            const requiredFields = ['first_name', 'last_name', 'email', 'password', 'password_confirmation'];
            
            // Clear previous errors
            requiredFields.forEach(field => {
                clearFieldError(document.getElementById(field));
            });

            // Check required fields
            requiredFields.forEach(fieldName => {
                const field = document.getElementById(fieldName);
                if (!field.value.trim()) {
                    showFieldError(field, `${fieldName.replace('_', ' ')} is required`);
                    isValid = false;
                }
            });

            // Validate email
            const email = document.getElementById('email').value;
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (email && !emailRegex.test(email)) {
                showFieldError(document.getElementById('email'), 'Please enter a valid email address');
                isValid = false;
            }

            // Validate password strength
            const password = passwordField.value;
            if (password) {
                const hasUppercase = /[A-Z]/.test(password);
                const hasLowercase = /[a-z]/.test(password);
                const hasNumber = /\d/.test(password);
                const hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
                const hasMinLength = password.length >= 8;

                if (!hasMinLength || !hasUppercase || !hasLowercase || !hasNumber || !hasSpecial) {
                    showFieldError(passwordField, 'Password does not meet requirements');
                    isValid = false;
                }
            }

            // Validate password confirmation
            const confirmation = confirmPasswordField.value;
            if (password && confirmation && password !== confirmation) {
                showFieldError(confirmPasswordField, 'Passwords do not match');
                isValid = false;
            }

            // Validate terms acceptance
            const termsCheckbox = document.getElementById('terms');
            if (!termsCheckbox.checked) {
                showFormError('You must agree to the Terms of Service and Privacy Policy');
                isValid = false;
            }

            return isValid;
        }

        function showFieldError(field, message) {
            field.classList.add('border-red-500', 'dark:border-red-400');
            field.classList.remove('border-gray-300', 'dark:border-gray-600');
            
            // Remove existing error
            const existingError = field.parentNode.querySelector('.field-error');
            if (existingError) {
                existingError.remove();
            }

            // Add new error
            const errorDiv = document.createElement('div');
            errorDiv.className = 'field-error text-red-600 dark:text-red-400 text-sm mt-1';
            errorDiv.textContent = message;
            field.parentNode.appendChild(errorDiv);
        }

        function clearFieldError(field) {
            field.classList.remove('border-red-500', 'dark:border-red-400');
            field.classList.add('border-gray-300', 'dark:border-gray-600');
            
            const errorDiv = field.parentNode.querySelector('.field-error');
            if (errorDiv) {
                errorDiv.remove();
            }
        }

        function showFormError(message) {
            let errorDiv = form.querySelector('.form-error');
            if (!errorDiv) {
                errorDiv = document.createElement('div');
                errorDiv.className = 'form-error bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4 mb-4';
                form.insertBefore(errorDiv, form.firstChild);
            }
            
            errorDiv.innerHTML = `
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-800 dark:text-red-200">${message}</p>
                    </div>
                </div>
            `;
        }

        function resetSubmitButton() {
            submitButton.disabled = false;
            submitText.classList.remove('hidden');
            submitLoading.classList.add('hidden');
        }

        // Username availability check (debounced)
        const usernameField = document.getElementById('username');
        let usernameTimeout;
        
        usernameField.addEventListener('input', function() {
            clearTimeout(usernameTimeout);
            const username = this.value.trim();
            
            if (username.length >= 3) {
                usernameTimeout = setTimeout(() => {
                    checkUsernameAvailability(username);
                }, 500);
            }
        });

        function checkUsernameAvailability(username) {
            // This would make an AJAX call to check username availability
            // For now, we'll just validate the format
            const usernameRegex = /^[a-zA-Z0-9_]+$/;
            if (!usernameRegex.test(username)) {
                showFieldError(usernameField, 'Username can only contain letters, numbers, and underscores');
            } else {
                clearFieldError(usernameField);
            }
        }

        // Auto-focus first name field
        document.getElementById('first_name').focus();
    });
</script>
{{end}}