{{- if .Flash}}
<!-- Flash Message Container -->
<div class="flash-message-container" 
     x-data="{ show: true, message: '{{.Flash}}', type: 'info' }" 
     x-show="show && message" 
     x-transition:enter="transition ease-out duration-300"
     x-transition:enter-start="opacity-0 transform translate-y-2"
     x-transition:enter-end="opacity-100 transform translate-y-0"
     x-transition:leave="transition ease-in duration-200"
     x-transition:leave-start="opacity-100 transform translate-y-0"
     x-transition:leave-end="opacity-0 transform translate-y-2">
    
    <!-- Flash Message Alert -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4" role="alert" aria-live="polite" aria-atomic="true">
        <div class="rounded-md p-4 shadow-sm border" 
             :class="{
                 'bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800': type === 'info',
                 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800': type === 'success',
                 'bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:border-yellow-800': type === 'warning',
                 'bg-red-50 border-red-200 dark:bg-red-900/20 dark:border-red-800': type === 'error'
             }">
            <div class="flex items-start">
                <!-- Icon -->
                <div class="flex-shrink-0">
                    <!-- Info Icon -->
                    <svg x-show="type === 'info'" 
                         class="h-5 w-5 text-blue-400 dark:text-blue-300" 
                         fill="currentColor" 
                         viewBox="0 0 20 20" 
                         aria-hidden="true">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                    
                    <!-- Success Icon -->
                    <svg x-show="type === 'success'" 
                         class="h-5 w-5 text-green-400 dark:text-green-300" 
                         fill="currentColor" 
                         viewBox="0 0 20 20" 
                         aria-hidden="true">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    
                    <!-- Warning Icon -->
                    <svg x-show="type === 'warning'" 
                         class="h-5 w-5 text-yellow-400 dark:text-yellow-300" 
                         fill="currentColor" 
                         viewBox="0 0 20 20" 
                         aria-hidden="true">
                        <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                    </svg>
                    
                    <!-- Error Icon -->
                    <svg x-show="type === 'error'" 
                         class="h-5 w-5 text-red-400 dark:text-red-300" 
                         fill="currentColor" 
                         viewBox="0 0 20 20" 
                         aria-hidden="true">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                
                <!-- Message Content -->
                <div class="ml-3 flex-1">
                    <p class="text-sm font-medium" 
                       :class="{
                           'text-blue-800 dark:text-blue-200': type === 'info',
                           'text-green-800 dark:text-green-200': type === 'success',
                           'text-yellow-800 dark:text-yellow-200': type === 'warning',
                           'text-red-800 dark:text-red-200': type === 'error'
                       }"
                       x-text="message">
                    </p>
                </div>
                
                <!-- Close Button -->
                <div class="ml-auto pl-3">
                    <div class="-mx-1.5 -my-1.5">
                        <button type="button" 
                                @click="show = false"
                                class="inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors"
                                :class="{
                                    'text-blue-500 hover:bg-blue-100 focus:ring-blue-600 focus:ring-offset-blue-50 dark:text-blue-300 dark:hover:bg-blue-800 dark:focus:ring-offset-blue-900': type === 'info',
                                    'text-green-500 hover:bg-green-100 focus:ring-green-600 focus:ring-offset-green-50 dark:text-green-300 dark:hover:bg-green-800 dark:focus:ring-offset-green-900': type === 'success',
                                    'text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600 focus:ring-offset-yellow-50 dark:text-yellow-300 dark:hover:bg-yellow-800 dark:focus:ring-offset-yellow-900': type === 'warning',
                                    'text-red-500 hover:bg-red-100 focus:ring-red-600 focus:ring-offset-red-50 dark:text-red-300 dark:hover:bg-red-800 dark:focus:ring-offset-red-900': type === 'error'
                                }"
                                aria-label="Dismiss notification">
                            <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Auto-dismiss script -->
<script {{if .Nonce}}nonce="{{.Nonce}}"{{end}}>
    document.addEventListener('DOMContentLoaded', function() {
        // Auto-detect flash message type based on content keywords
        const flashContainer = document.querySelector('.flash-message-container');
        if (flashContainer) {
            const message = '{{.Flash}}';
            const lowerMessage = message.toLowerCase();
            
            let messageType = 'info'; // default
            
            if (lowerMessage.includes('success') || lowerMessage.includes('completed') || 
                lowerMessage.includes('saved') || lowerMessage.includes('created') ||
                lowerMessage.includes('updated') || lowerMessage.includes('thank you')) {
                messageType = 'success';
            } else if (lowerMessage.includes('error') || lowerMessage.includes('failed') || 
                      lowerMessage.includes('invalid') || lowerMessage.includes('denied') ||
                      lowerMessage.includes('forbidden') || lowerMessage.includes('expired')) {
                messageType = 'error';
            } else if (lowerMessage.includes('warning') || lowerMessage.includes('caution') || 
                      lowerMessage.includes('careful') || lowerMessage.includes('note')) {
                messageType = 'warning';
            }
            
            // Set the type using Alpine.js
            flashContainer.setAttribute('x-data', 
                `{ show: true, message: '{{.Flash}}', type: '${messageType}' }`);
            
            // Auto-dismiss after 5 seconds for success messages, 8 seconds for others
            const dismissTime = messageType === 'success' ? 5000 : 8000;
            setTimeout(() => {
                if (window.Alpine) {
                    const component = window.Alpine.$data(flashContainer);
                    if (component) {
                        component.show = false;
                    }
                } else {
                    flashContainer.style.display = 'none';
                }
            }, dismissTime);
        }
    });
</script>
{{- end}}

<!-- Alternative flash message display without Alpine.js (fallback) -->
{{- if .Flash}}
<noscript>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="rounded-md bg-blue-50 dark:bg-blue-900/20 p-4 border border-blue-200 dark:border-blue-800">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400 dark:text-blue-300" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-blue-800 dark:text-blue-200">{{.Flash}}</p>
                </div>
            </div>
        </div>
    </div>
</noscript>
{{- end}}

<!-- Enhanced Flash Message Styles -->
<style {{if .Nonce}}nonce="{{.Nonce}}"{{end}}>
    .flash-message-container {
        position: relative;
        z-index: 40;
    }
    
    /* Ensure flash messages are accessible with high contrast */
    @media (prefers-contrast: high) {
        .flash-message-container [class*="bg-blue-"] {
            background-color: #1e40af !important;
            color: white !important;
        }
        .flash-message-container [class*="bg-green-"] {
            background-color: #166534 !important;
            color: white !important;
        }
        .flash-message-container [class*="bg-yellow-"] {
            background-color: #a16207 !important;
            color: white !important;
        }
        .flash-message-container [class*="bg-red-"] {
            background-color: #dc2626 !important;
            color: white !important;
        }
    }
    
    /* Animation for better user experience */
    .flash-message-container {
        animation: flashSlideIn 0.3s ease-out;
    }
    
    @keyframes flashSlideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    /* Focus management for accessibility */
    .flash-message-container button:focus {
        outline: 2px solid currentColor;
        outline-offset: 2px;
    }
</style>