version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - ENV=production
      - PORT=8080
      {{- if ne .DatabaseDriver ""}}
      - DB_HOST={{.DatabaseDriver}}-db
      - DB_USER=${DB_USER:-admin}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME={{.ProjectName}}
      - DB_SSL_MODE=require
      {{- end}}
      {{- if eq .SessionStore "redis"}}
      - REDIS_URL=redis://redis:6379
      {{- end}}
    depends_on:
      {{- if ne .DatabaseDriver ""}}
      - {{.DatabaseDriver}}-db
      {{- end}}
      {{- if eq .SessionStore "redis"}}
      - redis
      {{- end}}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  {{- if eq .DatabaseDriver "postgres"}}
  postgres-db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB={{.ProjectName}}
      - POSTGRES_USER=${DB_USER:-admin}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d {{.ProjectName}}"]
      interval: 10s
      timeout: 5s
      retries: 5
  {{- else if eq .DatabaseDriver "mysql"}}
  mysql-db:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE={{.ProjectName}}
      - MYSQL_USER=${DB_USER:-admin}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER:-admin}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
  {{- end}}

  {{- if eq .SessionStore "redis"}}
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  {{- end}}

  # Reverse proxy/Load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

volumes:
  {{- if eq .DatabaseDriver "postgres"}}
  postgres_data:
  {{- else if eq .DatabaseDriver "mysql"}}
  mysql_data:
  {{- end}}
  {{- if eq .SessionStore "redis"}}
  redis_data:
  {{- end}}

networks:
  app-network:
    driver: bridge