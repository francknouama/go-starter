/**
 * {{.Config.App.Name}} - Main JavaScript
 * Generated by go-starter monolith blueprint
 * 
 * Features:
 * - Dark mode toggle
 * - Form validation
 * - Navigation enhancements
 * - Progressive enhancement
 * - Accessibility improvements
 */

(function() {
    'use strict';

    // Global app object
    window.App = {
        config: {
            name: '{{.Config.App.Name}}',
            version: '{{.Config.App.Version | default "1.0.0"}}',
            environment: '{{.Config.App.Environment | default "production"}}',
            debug: {{eq .Config.App.Environment "development"}},
            csrfToken: document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'),
            apiUrl: '{{.Config.App.URL}}/api'
        },
        modules: {},
        utils: {}
    };

    // Utility functions
    App.utils = {
        // DOM ready function
        ready: function(fn) {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', fn);
            } else {
                fn();
            }
        },

        // Debounce function
        debounce: function(func, wait, immediate) {
            let timeout;
            return function executedFunction() {
                const context = this;
                const args = arguments;
                const later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        },

        // Throttle function
        throttle: function(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        },

        // Query selector helpers
        $: function(selector, context = document) {
            return context.querySelector(selector);
        },

        $$: function(selector, context = document) {
            return Array.from(context.querySelectorAll(selector));
        },

        // Element creation helper
        createElement: function(tag, attributes = {}, children = []) {
            const element = document.createElement(tag);
            
            Object.keys(attributes).forEach(key => {
                if (key === 'className') {
                    element.className = attributes[key];
                } else if (key === 'textContent') {
                    element.textContent = attributes[key];
                } else if (key === 'innerHTML') {
                    element.innerHTML = attributes[key];
                } else {
                    element.setAttribute(key, attributes[key]);
                }
            });

            children.forEach(child => {
                if (typeof child === 'string') {
                    element.appendChild(document.createTextNode(child));
                } else if (child instanceof Element) {
                    element.appendChild(child);
                }
            });

            return element;
        },

        // Local storage with JSON support
        storage: {
            get: function(key, defaultValue = null) {
                try {
                    const item = localStorage.getItem(key);
                    return item ? JSON.parse(item) : defaultValue;
                } catch (e) {
                    if (App.config.debug) console.warn('Storage get error:', e);
                    return defaultValue;
                }
            },

            set: function(key, value) {
                try {
                    localStorage.setItem(key, JSON.stringify(value));
                    return true;
                } catch (e) {
                    if (App.config.debug) console.warn('Storage set error:', e);
                    return false;
                }
            },

            remove: function(key) {
                try {
                    localStorage.removeItem(key);
                    return true;
                } catch (e) {
                    if (App.config.debug) console.warn('Storage remove error:', e);
                    return false;
                }
            }
        },

        // HTTP request helper
        request: async function(url, options = {}) {
            const defaults = {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            };

            // Add CSRF token if available
            if (App.config.csrfToken) {
                defaults.headers['X-CSRF-Token'] = App.config.csrfToken;
            }

            const config = {
                ...defaults,
                ...options,
                headers: { ...defaults.headers, ...(options.headers || {}) }
            };

            try {
                const response = await fetch(url, config);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            } catch (error) {
                if (App.config.debug) console.error('Request error:', error);
                throw error;
            }
        },

        // Show notification
        notify: function(message, type = 'info', duration = 5000) {
            const notification = App.utils.createElement('div', {
                className: `fixed top-4 right-4 max-w-sm p-4 rounded-lg shadow-lg z-50 transform transition-all duration-300 translate-x-full`,
                innerHTML: `
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            ${this.getNotificationIcon(type)}
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium">${message}</p>
                        </div>
                        <div class="ml-4 flex-shrink-0">
                            <button class="inline-flex text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600" onclick="this.parentElement.parentElement.parentElement.remove()">
                                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                `
            });

            // Add type-specific classes
            const typeClasses = {
                'success': 'bg-green-50 border border-green-200 text-green-800',
                'error': 'bg-red-50 border border-red-200 text-red-800',
                'warning': 'bg-yellow-50 border border-yellow-200 text-yellow-800',
                'info': 'bg-blue-50 border border-blue-200 text-blue-800'
            };

            notification.className += ` ${typeClasses[type] || typeClasses.info}`;

            document.body.appendChild(notification);

            // Animate in
            requestAnimationFrame(() => {
                notification.classList.remove('translate-x-full');
            });

            // Auto remove
            if (duration > 0) {
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.classList.add('translate-x-full');
                        setTimeout(() => notification.remove(), 300);
                    }
                }, duration);
            }
        },

        getNotificationIcon: function(type) {
            const icons = {
                'success': '<svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>',
                'error': '<svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>',
                'warning': '<svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>',
                'info': '<svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>'
            };
            return icons[type] || icons.info;
        }
    };

    // Dark mode module
    App.modules.darkMode = {
        init: function() {
            this.setupToggle();
            this.loadPreference();
            this.setupSystemListener();
        },

        setupToggle: function() {
            const toggles = App.utils.$$('[data-theme-toggle]');
            toggles.forEach(toggle => {
                toggle.addEventListener('click', () => this.toggle());
            });
        },

        loadPreference: function() {
            const saved = App.utils.storage.get('theme');
            const system = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            const theme = saved || system;
            this.setTheme(theme);
        },

        setupSystemListener: function() {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                if (!App.utils.storage.get('theme')) {
                    this.setTheme(e.matches ? 'dark' : 'light');
                }
            });
        },

        toggle: function() {
            const current = this.getCurrentTheme();
            const next = current === 'dark' ? 'light' : 'dark';
            this.setTheme(next);
            App.utils.storage.set('theme', next);
        },

        setTheme: function(theme) {
            document.documentElement.classList.remove('light', 'dark');
            document.documentElement.classList.add(theme);
            document.documentElement.setAttribute('data-theme', theme);
            
            // Update toggle buttons
            const toggles = App.utils.$$('[data-theme-toggle]');
            toggles.forEach(toggle => {
                const icon = toggle.querySelector('svg, .icon');
                if (icon) {
                    icon.style.transform = theme === 'dark' ? 'rotate(180deg)' : 'rotate(0deg)';
                }
            });
        },

        getCurrentTheme: function() {
            return document.documentElement.getAttribute('data-theme') || 'light';
        }
    };

    // Form validation module
    App.modules.forms = {
        init: function() {
            this.setupValidation();
            this.setupAsyncSubmit();
        },

        setupValidation: function() {
            const forms = App.utils.$$('form[data-validate]');
            forms.forEach(form => {
                form.addEventListener('submit', (e) => this.validateForm(e));
                
                // Real-time validation
                const inputs = App.utils.$$('input, textarea, select', form);
                inputs.forEach(input => {
                    input.addEventListener('blur', () => this.validateField(input));
                    input.addEventListener('input', App.utils.debounce(() => {
                        if (input.classList.contains('error')) {
                            this.validateField(input);
                        }
                    }, 300));
                });
            });
        },

        validateForm: function(e) {
            const form = e.target;
            const inputs = App.utils.$$('input[required], textarea[required], select[required]', form);
            let isValid = true;

            inputs.forEach(input => {
                if (!this.validateField(input)) {
                    isValid = false;
                }
            });

            if (!isValid) {
                e.preventDefault();
                const firstError = App.utils.$('.error', form);
                if (firstError) {
                    firstError.focus();
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }

            return isValid;
        },

        validateField: function(field) {
            let isValid = true;
            let message = '';

            // Clear previous errors
            this.clearFieldError(field);

            // Required validation
            if (field.hasAttribute('required') && !field.value.trim()) {
                isValid = false;
                message = 'This field is required';
            }

            // Email validation
            if (field.type === 'email' && field.value) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(field.value)) {
                    isValid = false;
                    message = 'Please enter a valid email address';
                }
            }

            // Password validation
            if (field.type === 'password' && field.value && field.hasAttribute('data-validate-password')) {
                const password = field.value;
                const minLength = parseInt(field.getAttribute('minlength')) || 8;
                
                if (password.length < minLength) {
                    isValid = false;
                    message = `Password must be at least ${minLength} characters`;
                } else if (!/(?=.*[a-z])/.test(password)) {
                    isValid = false;
                    message = 'Password must contain at least one lowercase letter';
                } else if (!/(?=.*[A-Z])/.test(password)) {
                    isValid = false;
                    message = 'Password must contain at least one uppercase letter';
                } else if (!/(?=.*\d)/.test(password)) {
                    isValid = false;
                    message = 'Password must contain at least one number';
                } else if (!/(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])/.test(password)) {
                    isValid = false;
                    message = 'Password must contain at least one special character';
                }
            }

            // Password confirmation
            if (field.hasAttribute('data-confirm-password')) {
                const passwordField = App.utils.$(field.getAttribute('data-confirm-password'));
                if (passwordField && field.value !== passwordField.value) {
                    isValid = false;
                    message = 'Passwords do not match';
                }
            }

            // URL validation
            if (field.type === 'url' && field.value) {
                try {
                    new URL(field.value);
                } catch {
                    isValid = false;
                    message = 'Please enter a valid URL';
                }
            }

            // Pattern validation
            if (field.hasAttribute('pattern') && field.value) {
                const pattern = new RegExp(field.getAttribute('pattern'));
                if (!pattern.test(field.value)) {
                    isValid = false;
                    message = field.getAttribute('data-pattern-message') || 'Invalid format';
                }
            }

            if (!isValid) {
                this.showFieldError(field, message);
            }

            return isValid;
        },

        showFieldError: function(field, message) {
            field.classList.add('error');
            
            const errorDiv = App.utils.createElement('div', {
                className: 'form-error text-red-600 dark:text-red-400 text-sm mt-1',
                textContent: message
            });

            field.parentNode.appendChild(errorDiv);
        },

        clearFieldError: function(field) {
            field.classList.remove('error');
            const existingError = field.parentNode.querySelector('.form-error');
            if (existingError) {
                existingError.remove();
            }
        },

        setupAsyncSubmit: function() {
            const forms = App.utils.$$('form[data-async]');
            forms.forEach(form => {
                form.addEventListener('submit', (e) => this.handleAsyncSubmit(e));
            });
        },

        async handleAsyncSubmit(e) {
            e.preventDefault();
            
            const form = e.target;
            const submitButton = App.utils.$('button[type="submit"]', form);
            const originalText = submitButton?.textContent;
            
            try {
                // Show loading state
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="spinner mr-2"></span>Submitting...';
                }

                const formData = new FormData(form);
                const response = await App.utils.request(form.action, {
                    method: form.method || 'POST',
                    body: formData
                });

                // Handle success
                if (response.success) {
                    App.utils.notify(response.message || 'Form submitted successfully', 'success');
                    
                    if (response.redirect) {
                        window.location.href = response.redirect;
                    } else {
                        form.reset();
                    }
                } else {
                    throw new Error(response.message || 'Form submission failed');
                }

            } catch (error) {
                App.utils.notify(error.message || 'An error occurred', 'error');
            } finally {
                // Reset button state
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                }
            }
        }
    };

    // Navigation module
    App.modules.navigation = {
        init: function() {
            this.setupMobileMenu();
            this.setupDropdowns();
            this.setupActiveLinks();
        },

        setupMobileMenu: function() {
            const toggles = App.utils.$$('[data-mobile-menu-toggle]');
            const menus = App.utils.$$('[data-mobile-menu]');

            toggles.forEach(toggle => {
                toggle.addEventListener('click', () => {
                    menus.forEach(menu => {
                        menu.classList.toggle('hidden');
                    });
                    
                    // Update aria-expanded
                    const expanded = toggle.getAttribute('aria-expanded') === 'true';
                    toggle.setAttribute('aria-expanded', !expanded);
                });
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('[data-mobile-menu-toggle]') && !e.target.closest('[data-mobile-menu]')) {
                    menus.forEach(menu => {
                        menu.classList.add('hidden');
                    });
                    toggles.forEach(toggle => {
                        toggle.setAttribute('aria-expanded', 'false');
                    });
                }
            });
        },

        setupDropdowns: function() {
            const dropdowns = App.utils.$$('[data-dropdown]');
            
            dropdowns.forEach(dropdown => {
                const trigger = App.utils.$('[data-dropdown-trigger]', dropdown);
                const menu = App.utils.$('[data-dropdown-menu]', dropdown);
                
                if (!trigger || !menu) return;

                trigger.addEventListener('click', (e) => {
                    e.preventDefault();
                    menu.classList.toggle('hidden');
                    
                    // Update aria-expanded
                    const expanded = trigger.getAttribute('aria-expanded') === 'true';
                    trigger.setAttribute('aria-expanded', !expanded);
                });

                // Close dropdown when clicking outside
                document.addEventListener('click', (e) => {
                    if (!dropdown.contains(e.target)) {
                        menu.classList.add('hidden');
                        trigger.setAttribute('aria-expanded', 'false');
                    }
                });

                // Handle keyboard navigation
                trigger.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        trigger.click();
                    }
                });
            });
        },

        setupActiveLinks: function() {
            const currentPath = window.location.pathname;
            const navLinks = App.utils.$$('nav a[href]');
            
            navLinks.forEach(link => {
                if (link.getAttribute('href') === currentPath) {
                    link.classList.add('active');
                    link.setAttribute('aria-current', 'page');
                }
            });
        }
    };

    // Accessibility module
    App.modules.accessibility = {
        init: function() {
            this.setupFocusVisibility();
            this.setupSkipLinks();
            this.setupKeyboardNavigation();
        },

        setupFocusVisibility: function() {
            // Add focus-visible polyfill behavior
            let hadKeyboardEvent = true;
            const keyboardThrottledEventListener = App.utils.throttle((e) => {
                hadKeyboardEvent = true;
            }, 100);

            document.addEventListener('keydown', keyboardThrottledEventListener);
            document.addEventListener('mousedown', () => {
                hadKeyboardEvent = false;
            });

            document.addEventListener('focusin', (e) => {
                if (hadKeyboardEvent || e.target.matches(':focus-visible')) {
                    e.target.classList.add('focus-visible');
                }
            });

            document.addEventListener('focusout', (e) => {
                e.target.classList.remove('focus-visible');
            });
        },

        setupSkipLinks: function() {
            const skipLinks = App.utils.$$('.skip-link');
            skipLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const target = App.utils.$(link.getAttribute('href'));
                    if (target) {
                        target.focus();
                        target.scrollIntoView({ behavior: 'smooth' });
                    }
                });
            });
        },

        setupKeyboardNavigation: function() {
            // Escape key handling
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    // Close modals, dropdowns, etc.
                    const openModals = App.utils.$$('[data-modal]:not(.hidden)');
                    const openDropdowns = App.utils.$$('[data-dropdown-menu]:not(.hidden)');
                    
                    openModals.forEach(modal => modal.classList.add('hidden'));
                    openDropdowns.forEach(dropdown => dropdown.classList.add('hidden'));
                }
            });
        }
    };

    // Performance module
    App.modules.performance = {
        init: function() {
            this.setupLazyLoading();
            this.setupImageOptimization();
        },

        setupLazyLoading: function() {
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.src = img.dataset.src;
                            img.classList.remove('lazy');
                            imageObserver.unobserve(img);
                        }
                    });
                });

                App.utils.$$('img[data-src]').forEach(img => {
                    imageObserver.observe(img);
                });
            }
        },

        setupImageOptimization: function() {
            // Add loading="lazy" to images that don't have it
            App.utils.$$('img:not([loading])').forEach(img => {
                const rect = img.getBoundingClientRect();
                const viewportHeight = window.innerHeight;
                
                // Only lazy load images below the fold
                if (rect.top > viewportHeight) {
                    img.setAttribute('loading', 'lazy');
                }
            });
        }
    };

    // Analytics module (if enabled)
    App.modules.analytics = {
        init: function() {
            if (!{{.Config.Analytics.Enabled | default false}}) return;
            
            this.setupPageTracking();
            this.setupEventTracking();
        },

        setupPageTracking: function() {
            // Track page views
            if (typeof gtag !== 'undefined') {
                gtag('config', '{{.Config.Analytics.GoogleAnalytics.TrackingID}}', {
                    page_title: document.title,
                    page_location: window.location.href
                });
            }
        },

        setupEventTracking: function() {
            // Track form submissions
            App.utils.$$('form').forEach(form => {
                form.addEventListener('submit', () => {
                    this.trackEvent('form_submit', {
                        form_name: form.getAttribute('name') || form.getAttribute('id') || 'unnamed'
                    });
                });
            });

            // Track external links
            App.utils.$$('a[href^="http"]:not([href*="' + window.location.hostname + '"])').forEach(link => {
                link.addEventListener('click', () => {
                    this.trackEvent('external_link_click', {
                        link_url: link.href,
                        link_text: link.textContent.trim()
                    });
                });
            });
        },

        trackEvent: function(eventName, parameters = {}) {
            if (typeof gtag !== 'undefined') {
                gtag('event', eventName, parameters);
            }
            
            if (App.config.debug) {
                console.log('Analytics event:', eventName, parameters);
            }
        }
    };

    // Initialize all modules when DOM is ready
    App.utils.ready(() => {
        if (App.config.debug) {
            console.log(`${App.config.name} v${App.config.version} initialized`);
        }

        // Initialize modules
        Object.values(App.modules).forEach(module => {
            if (typeof module.init === 'function') {
                try {
                    module.init();
                } catch (error) {
                    if (App.config.debug) {
                        console.error('Module initialization error:', error);
                    }
                }
            }
        });

        // Global error handling
        window.addEventListener('error', (e) => {
            if (App.config.debug) {
                console.error('Global error:', e.error);
            }
            
            // Report to analytics if enabled
            if (App.modules.analytics && typeof App.modules.analytics.trackEvent === 'function') {
                App.modules.analytics.trackEvent('javascript_error', {
                    error_message: e.message,
                    error_filename: e.filename,
                    error_lineno: e.lineno
                });
            }
        });

        // Service worker registration (if available)
        if ('serviceWorker' in navigator && '{{.Config.PWA.Enabled | default false}}') {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => {
                    if (App.config.debug) {
                        console.log('Service Worker registered:', registration);
                    }
                })
                .catch(error => {
                    if (App.config.debug) {
                        console.error('Service Worker registration failed:', error);
                    }
                });
        }
    });

})();