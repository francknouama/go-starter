package controllers

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

{{- if eq .Framework "gin" }}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo" }}
	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber" }}
	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi" }}
	"github.com/go-chi/chi/v5"
{{- end }}
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
{{- if eq .LoggerType "slog" }}
	"log/slog"
	"os"
{{- else if eq .LoggerType "zap" }}
	"go.uber.org/zap"
{{- else if eq .LoggerType "logrus" }}
	"github.com/sirupsen/logrus"
{{- else if eq .LoggerType "zerolog" }}
	"github.com/rs/zerolog"
	"os"
{{- end }}
)

// TestHomeController tests the home controller
func TestHomeController(t *testing.T) {
	// Setup
{{- if eq .LoggerType "slog" }}
	logger := slog.New(slog.NewTextHandler(os.Stdout, nil))
{{- else if eq .LoggerType "zap" }}
	logger, _ := zap.NewDevelopment()
{{- else if eq .LoggerType "logrus" }}
	logger := logrus.New()
{{- else if eq .LoggerType "zerolog" }}
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
{{- end }}

	controller := NewHomeController(logger)

	t.Run("Index Page", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		// Setup Gin
		gin.SetMode(gin.TestMode)
		router := gin.New()
		router.GET("/", controller.Index)

		// Create request
		req := httptest.NewRequest("GET", "/", nil)
		resp := httptest.NewRecorder()

		// Perform request
		router.ServeHTTP(resp, req)

		// Assert
		assert.Equal(t, http.StatusOK, resp.Code)
		assert.Contains(t, resp.Header().Get("Content-Type"), "text/html")

{{- else if eq .Framework "echo" }}
		// Setup Echo
		e := echo.New()
		req := httptest.NewRequest("GET", "/", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		// Perform request
		err := controller.Index(c)
		
		// Assert
		require.NoError(t, err)
		assert.Equal(t, http.StatusOK, rec.Code)
		assert.Contains(t, rec.Header().Get("Content-Type"), "text/html")
{{- end }}
	})

	t.Run("About Page", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		router.GET("/about", controller.About)

		req := httptest.NewRequest("GET", "/about", nil)
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusOK, resp.Code)
		assert.Contains(t, resp.Header().Get("Content-Type"), "text/html")

{{- else if eq .Framework "echo" }}
		e := echo.New()
		req := httptest.NewRequest("GET", "/about", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		err := controller.About(c)
		
		require.NoError(t, err)
		assert.Equal(t, http.StatusOK, rec.Code)
		assert.Contains(t, rec.Header().Get("Content-Type"), "text/html")
{{- end }}
	})

	t.Run("Contact Page", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		router.GET("/contact", controller.Contact)

		req := httptest.NewRequest("GET", "/contact", nil)
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusOK, resp.Code)
		assert.Contains(t, resp.Header().Get("Content-Type"), "text/html")

{{- else if eq .Framework "echo" }}
		e := echo.New()
		req := httptest.NewRequest("GET", "/contact", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		err := controller.Contact(c)
		
		require.NoError(t, err)
		assert.Equal(t, http.StatusOK, rec.Code)
		assert.Contains(t, rec.Header().Get("Content-Type"), "text/html")
{{- end }}
	})

	t.Run("404 Not Found", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		router.NoRoute(controller.NotFound)

		req := httptest.NewRequest("GET", "/non-existent", nil)
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusNotFound, resp.Code)
		assert.Contains(t, resp.Header().Get("Content-Type"), "text/html")

{{- else if eq .Framework "echo" }}
		e := echo.New()
		req := httptest.NewRequest("GET", "/non-existent", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		err := controller.NotFound(c)
		
		require.NoError(t, err)
		assert.Equal(t, http.StatusNotFound, rec.Code)
		assert.Contains(t, rec.Header().Get("Content-Type"), "text/html")
{{- end }}
	})

	t.Run("API Endpoint Returns JSON", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		
		// Mock API endpoint
		router.GET("/api/test", func(c *gin.Context) {
			c.JSON(http.StatusOK, gin.H{
				"message": "test",
				"status":  "ok",
			})
		})

		req := httptest.NewRequest("GET", "/api/test", nil)
		req.Header.Set("Accept", "application/json")
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusOK, resp.Code)
		assert.Contains(t, resp.Header().Get("Content-Type"), "application/json")

		var result map[string]string
		err := json.Unmarshal(resp.Body.Bytes(), &result)
		require.NoError(t, err)
		assert.Equal(t, "test", result["message"])
		assert.Equal(t, "ok", result["status"])

{{- else if eq .Framework "echo" }}
		e := echo.New()
		
		// Mock API endpoint
		e.GET("/api/test", func(c echo.Context) error {
			return c.JSON(http.StatusOK, map[string]string{
				"message": "test",
				"status":  "ok",
			})
		})

		req := httptest.NewRequest("GET", "/api/test", nil)
		req.Header.Set("Accept", "application/json")
		rec := httptest.NewRecorder()

		e.ServeHTTP(rec, req)

		assert.Equal(t, http.StatusOK, rec.Code)
		assert.Contains(t, rec.Header().Get("Content-Type"), "application/json")

		var result map[string]string
		err := json.Unmarshal(rec.Body.Bytes(), &result)
		require.NoError(t, err)
		assert.Equal(t, "test", result["message"])
		assert.Equal(t, "ok", result["status"])
{{- end }}
	})
}

// TestHomeControllerWithMiddleware tests the home controller with middleware
func TestHomeControllerWithMiddleware(t *testing.T) {
{{- if eq .LoggerType "slog" }}
	logger := slog.New(slog.NewTextHandler(os.Stdout, nil))
{{- else if eq .LoggerType "zap" }}
	logger, _ := zap.NewDevelopment()
{{- else if eq .LoggerType "logrus" }}
	logger := logrus.New()
{{- else if eq .LoggerType "zerolog" }}
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
{{- end }}

	controller := NewHomeController(logger)

	t.Run("With Request ID Middleware", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		
		// Add request ID middleware
		router.Use(func(c *gin.Context) {
			c.Set("request_id", "test-123")
			c.Next()
		})
		
		router.GET("/", controller.Index)

		req := httptest.NewRequest("GET", "/", nil)
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusOK, resp.Code)

{{- else if eq .Framework "echo" }}
		e := echo.New()
		
		// Add request ID middleware
		e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
			return func(c echo.Context) error {
				c.Set("request_id", "test-123")
				return next(c)
			}
		})
		
		e.GET("/", controller.Index)

		req := httptest.NewRequest("GET", "/", nil)
		rec := httptest.NewRecorder()

		e.ServeHTTP(rec, req)

		assert.Equal(t, http.StatusOK, rec.Code)
{{- end }}
	})

	t.Run("With Error Handling", func(t *testing.T) {
{{- if eq .Framework "gin" }}
		router := gin.New()
		
		// Add error handling
		router.Use(gin.Recovery())
		
		// Mock endpoint that panics
		router.GET("/panic", func(c *gin.Context) {
			panic("test panic")
		})

		req := httptest.NewRequest("GET", "/panic", nil)
		resp := httptest.NewRecorder()

		router.ServeHTTP(resp, req)

		assert.Equal(t, http.StatusInternalServerError, resp.Code)

{{- else if eq .Framework "echo" }}
		e := echo.New()
		
		// Add error handling
		e.Use(func(next echo.HandlerFunc) echo.HandlerFunc {
			return func(c echo.Context) error {
				defer func() {
					if r := recover(); r != nil {
						c.JSON(http.StatusInternalServerError, map[string]string{
							"error": "Internal Server Error",
						})
					}
				}()
				return next(c)
			}
		})
		
		// Mock endpoint that panics
		e.GET("/panic", func(c echo.Context) error {
			panic("test panic")
		})

		req := httptest.NewRequest("GET", "/panic", nil)
		rec := httptest.NewRecorder()

		e.ServeHTTP(rec, req)

		assert.Equal(t, http.StatusInternalServerError, rec.Code)
{{- end }}
	})
}

// BenchmarkHomeController benchmarks the home controller
func BenchmarkHomeController(b *testing.B) {
{{- if eq .LoggerType "slog" }}
	logger := slog.New(slog.NewTextHandler(os.Stdout, nil))
{{- else if eq .LoggerType "zap" }}
	logger, _ := zap.NewProduction()
{{- else if eq .LoggerType "logrus" }}
	logger := logrus.New()
	logger.SetLevel(logrus.ErrorLevel)
{{- else if eq .LoggerType "zerolog" }}
	logger := zerolog.New(os.Stdout).Level(zerolog.ErrorLevel)
{{- end }}

	controller := NewHomeController(logger)

{{- if eq .Framework "gin" }}
	gin.SetMode(gin.ReleaseMode)
	router := gin.New()
	router.GET("/", controller.Index)

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			req := httptest.NewRequest("GET", "/", nil)
			resp := httptest.NewRecorder()
			router.ServeHTTP(resp, req)
		}
	})

{{- else if eq .Framework "echo" }}
	e := echo.New()
	e.GET("/", controller.Index)

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			req := httptest.NewRequest("GET", "/", nil)
			rec := httptest.NewRecorder()
			e.ServeHTTP(rec, req)
		}
	})
{{- end }}
}