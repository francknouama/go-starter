package controllers

import (
	"context"
	"encoding/json"
	"net/http"
	"runtime"
	"time"

{{- if eq .Framework "gin" }}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo" }}
	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber" }}
	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi" }}
	"github.com/go-chi/chi/v5"
{{- end }}
{{- if eq .LoggerType "slog" }}
	"log/slog"
{{- else if eq .LoggerType "zap" }}
	"go.uber.org/zap"
{{- else if eq .LoggerType "logrus" }}
	"github.com/sirupsen/logrus"
{{- else if eq .LoggerType "zerolog" }}
	"github.com/rs/zerolog"
{{- end }}
{{- if ne .DatabaseDriver "" }}
	"{{.ModulePath}}/config"
{{- end }}
)

// APIController handles API-related HTTP requests
type APIController struct {
{{- if ne .DatabaseDriver "" }}
	db     config.Database
{{- end }}
{{- if eq .LoggerType "slog" }}
	logger *slog.Logger
{{- else if eq .LoggerType "zap" }}
	logger *zap.Logger
{{- else if eq .LoggerType "logrus" }}
	logger *logrus.Logger
{{- else if eq .LoggerType "zerolog" }}
	logger zerolog.Logger
{{- end }}
}

// NewAPIController creates a new API controller
func NewAPIController({{if ne .DatabaseDriver ""}}db config.Database, {{end}}{{if eq .LoggerType "slog"}}logger *slog.Logger{{else if eq .LoggerType "zap"}}logger *zap.Logger{{else if eq .LoggerType "logrus"}}logger *logrus.Logger{{else if eq .LoggerType "zerolog"}}logger zerolog.Logger{{end}}) *APIController {
	return &APIController{
{{- if ne .DatabaseDriver "" }}
		db:     db,
{{- end }}
		logger: logger,
	}
}

// HealthResponse represents the health check response
type HealthResponse struct {
	Status    string            `json:"status"`
	Timestamp string            `json:"timestamp"`
	Version   string            `json:"version"`
	Uptime    string            `json:"uptime"`
	Checks    map[string]string `json:"checks"`
}

// ReadinessResponse represents the readiness check response
type ReadinessResponse struct {
	Status    string            `json:"status"`
	Timestamp string            `json:"timestamp"`
	Services  map[string]string `json:"services"`
}

// MetricsResponse represents the metrics response
type MetricsResponse struct {
	Timestamp string                 `json:"timestamp"`
	System    SystemMetrics          `json:"system"`
{{- if ne .DatabaseDriver "" }}
	Database  DatabaseMetrics        `json:"database"`
{{- end }}
	Runtime   RuntimeMetrics         `json:"runtime"`
	Custom    map[string]interface{} `json:"custom"`
}

// SystemMetrics represents system-level metrics
type SystemMetrics struct {
	MemoryUsage    uint64 `json:"memory_usage_bytes"`
	MemoryTotal    uint64 `json:"memory_total_bytes"`
	CPUCores       int    `json:"cpu_cores"`
	GoroutineCount int    `json:"goroutine_count"`
}

{{- if ne .DatabaseDriver "" }}
// DatabaseMetrics represents database-related metrics
type DatabaseMetrics struct {
	OpenConnections     int `json:"open_connections"`
	InUseConnections    int `json:"in_use_connections"`
	IdleConnections     int `json:"idle_connections"`
	MaxOpenConnections  int `json:"max_open_connections"`
	WaitCount           int64 `json:"wait_count"`
	WaitDuration        string `json:"wait_duration"`
	MaxIdleClosed       int64 `json:"max_idle_closed"`
	MaxIdleTimeClosed   int64 `json:"max_idle_time_closed"`
	MaxLifetimeClosed   int64 `json:"max_lifetime_closed"`
}
{{- end }}

// RuntimeMetrics represents Go runtime metrics
type RuntimeMetrics struct {
	GoVersion      string `json:"go_version"`
	NumCPU         int    `json:"num_cpu"`
	NumGoroutine   int    `json:"num_goroutine"`
	Alloc          uint64 `json:"alloc_bytes"`
	TotalAlloc     uint64 `json:"total_alloc_bytes"`
	Sys            uint64 `json:"sys_bytes"`
	NumGC          uint32 `json:"num_gc"`
	LastGC         string `json:"last_gc"`
}

// APIErrorResponse represents an API error response
type APIErrorResponse struct {
	Error     string            `json:"error"`
	Message   string            `json:"message"`
	Code      int               `json:"code"`
	Timestamp string            `json:"timestamp"`
	Details   map[string]string `json:"details,omitempty"`
}

// Application start time for uptime calculation
var startTime = time.Now()

{{- if eq .Framework "gin" }}

// Health returns the application health status
func (ac *APIController) Health(c *gin.Context) {
	ctx, cancel := context.WithTimeout(c.Request.Context(), 5*time.Second)
	defer cancel()

	checks := make(map[string]string)
	
{{- if ne .DatabaseDriver "" }}
	// Database health check
	if err := ac.db.HealthCheck(ctx); err != nil {
		checks["database"] = "unhealthy: " + err.Error()
		ac.logger.Error("database health check failed",
{{- if eq .LoggerType "slog" }}
			slog.String("error", err.Error()),
{{- else if eq .LoggerType "zap" }}
			zap.Error(err),
{{- else if eq .LoggerType "logrus" }}
			logrus.Fields{"error": err},
{{- else if eq .LoggerType "zerolog" }}
			ac.logger.With().Err(err).
{{- end }}
		)
		c.JSON(http.StatusServiceUnavailable, HealthResponse{
			Status:    "unhealthy",
			Timestamp: time.Now().UTC().Format(time.RFC3339),
			Version:   getVersion(),
			Uptime:    time.Since(startTime).String(),
			Checks:    checks,
		})
		return
	}
	checks["database"] = "healthy"
{{- end }}

	checks["application"] = "healthy"

	c.JSON(http.StatusOK, HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		Version:   getVersion(),
		Uptime:    time.Since(startTime).String(),
		Checks:    checks,
	})
}

// Ready returns the application readiness status
func (ac *APIController) Ready(c *gin.Context) {
	ctx, cancel := context.WithTimeout(c.Request.Context(), 3*time.Second)
	defer cancel()

	services := make(map[string]string)
	allReady := true

{{- if ne .DatabaseDriver "" }}
	// Check database connectivity
	if err := ac.db.Ping(ctx); err != nil {
		services["database"] = "not ready: " + err.Error()
		allReady = false
	} else {
		services["database"] = "ready"
	}
{{- end }}

	services["application"] = "ready"

	status := "ready"
	statusCode := http.StatusOK
	if !allReady {
		status = "not ready"
		statusCode = http.StatusServiceUnavailable
	}

	c.JSON(statusCode, ReadinessResponse{
		Status:    status,
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		Services:  services,
	})
}

// Metrics returns application metrics
func (ac *APIController) Metrics(c *gin.Context) {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	metrics := MetricsResponse{
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		System: SystemMetrics{
			MemoryUsage:    m.Alloc,
			MemoryTotal:    m.Sys,
			CPUCores:       runtime.NumCPU(),
			GoroutineCount: runtime.NumGoroutine(),
		},
		Runtime: RuntimeMetrics{
			GoVersion:    runtime.Version(),
			NumCPU:       runtime.NumCPU(),
			NumGoroutine: runtime.NumGoroutine(),
			Alloc:        m.Alloc,
			TotalAlloc:   m.TotalAlloc,
			Sys:          m.Sys,
			NumGC:        m.NumGC,
			LastGC:       time.Unix(0, int64(m.LastGC)).Format(time.RFC3339),
		},
		Custom: make(map[string]interface{}),
	}

{{- if ne .DatabaseDriver "" }}
	// Database metrics
	if stats := ac.db.Stats(); true {
		metrics.Database = DatabaseMetrics{
			OpenConnections:     stats.OpenConnections,
			InUseConnections:    stats.InUse,
			IdleConnections:     stats.Idle,
			MaxOpenConnections:  stats.MaxOpenConnections,
			WaitCount:          stats.WaitCount,
			WaitDuration:       stats.WaitDuration.String(),
			MaxIdleClosed:      stats.MaxIdleClosed,
			MaxIdleTimeClosed:  stats.MaxIdleTimeClosed,
			MaxLifetimeClosed:  stats.MaxLifetimeClosed,
		}
	}
{{- end }}

	c.JSON(http.StatusOK, metrics)
}

// Version returns the application version information
func (ac *APIController) Version(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"version":    getVersion(),
		"build_time": getBuildTime(),
		"git_commit": getGitCommit(),
		"go_version": runtime.Version(),
	})
}

// Ping returns a simple pong response
func (ac *APIController) Ping(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"message":   "pong",
		"timestamp": time.Now().UTC().Format(time.RFC3339),
	})
}

{{- else if eq .Framework "echo" }}

// Health returns the application health status
func (ac *APIController) Health(c echo.Context) error {
	ctx, cancel := context.WithTimeout(c.Request().Context(), 5*time.Second)
	defer cancel()

	checks := make(map[string]string)
	
{{- if ne .DatabaseDriver "" }}
	// Database health check
	if err := ac.db.HealthCheck(ctx); err != nil {
		checks["database"] = "unhealthy: " + err.Error()
		ac.logger.Error("database health check failed",
{{- if eq .LoggerType "slog" }}
			slog.String("error", err.Error()),
{{- else if eq .LoggerType "zap" }}
			zap.Error(err),
{{- else if eq .LoggerType "logrus" }}
			logrus.Fields{"error": err},
{{- else if eq .LoggerType "zerolog" }}
			ac.logger.With().Err(err).
{{- end }}
		)
		return c.JSON(http.StatusServiceUnavailable, HealthResponse{
			Status:    "unhealthy",
			Timestamp: time.Now().UTC().Format(time.RFC3339),
			Version:   getVersion(),
			Uptime:    time.Since(startTime).String(),
			Checks:    checks,
		})
	}
	checks["database"] = "healthy"
{{- end }}

	checks["application"] = "healthy"

	return c.JSON(http.StatusOK, HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		Version:   getVersion(),
		Uptime:    time.Since(startTime).String(),
		Checks:    checks,
	})
}

// Ready returns the application readiness status
func (ac *APIController) Ready(c echo.Context) error {
	ctx, cancel := context.WithTimeout(c.Request().Context(), 3*time.Second)
	defer cancel()

	services := make(map[string]string)
	allReady := true

{{- if ne .DatabaseDriver "" }}
	// Check database connectivity
	if err := ac.db.Ping(ctx); err != nil {
		services["database"] = "not ready: " + err.Error()
		allReady = false
	} else {
		services["database"] = "ready"
	}
{{- end }}

	services["application"] = "ready"

	status := "ready"
	statusCode := http.StatusOK
	if !allReady {
		status = "not ready"
		statusCode = http.StatusServiceUnavailable
	}

	return c.JSON(statusCode, ReadinessResponse{
		Status:    status,
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		Services:  services,
	})
}

// Metrics returns application metrics
func (ac *APIController) Metrics(c echo.Context) error {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	metrics := MetricsResponse{
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		System: SystemMetrics{
			MemoryUsage:    m.Alloc,
			MemoryTotal:    m.Sys,
			CPUCores:       runtime.NumCPU(),
			GoroutineCount: runtime.NumGoroutine(),
		},
		Runtime: RuntimeMetrics{
			GoVersion:    runtime.Version(),
			NumCPU:       runtime.NumCPU(),
			NumGoroutine: runtime.NumGoroutine(),
			Alloc:        m.Alloc,
			TotalAlloc:   m.TotalAlloc,
			Sys:          m.Sys,
			NumGC:        m.NumGC,
			LastGC:       time.Unix(0, int64(m.LastGC)).Format(time.RFC3339),
		},
		Custom: make(map[string]interface{}),
	}

{{- if ne .DatabaseDriver "" }}
	// Database metrics
	if stats := ac.db.Stats(); true {
		metrics.Database = DatabaseMetrics{
			OpenConnections:     stats.OpenConnections,
			InUseConnections:    stats.InUse,
			IdleConnections:     stats.Idle,
			MaxOpenConnections:  stats.MaxOpenConnections,
			WaitCount:          stats.WaitCount,
			WaitDuration:       stats.WaitDuration.String(),
			MaxIdleClosed:      stats.MaxIdleClosed,
			MaxIdleTimeClosed:  stats.MaxIdleTimeClosed,
			MaxLifetimeClosed:  stats.MaxLifetimeClosed,
		}
	}
{{- end }}

	return c.JSON(http.StatusOK, metrics)
}

// Version returns the application version information
func (ac *APIController) Version(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"version":    getVersion(),
		"build_time": getBuildTime(),
		"git_commit": getGitCommit(),
		"go_version": runtime.Version(),
	})
}

// Ping returns a simple pong response
func (ac *APIController) Ping(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message":   "pong",
		"timestamp": time.Now().UTC().Format(time.RFC3339),
	})
}

{{- end }}

// Common helper functions

// Build-time variables (set via ldflags)
var (
	Version   = "dev"
	BuildTime = "unknown"
	GitCommit = "unknown"
)

func getVersion() string {
	if Version == "" {
		return "dev"
	}
	return Version
}

func getBuildTime() string {
	if BuildTime == "" {
		return "unknown"
	}
	return BuildTime
}

func getGitCommit() string {
	if GitCommit == "" {
		return "unknown"
	}
	return GitCommit
}

// ErrorHandler creates a standardized error response
func ErrorHandler(err error, code int) APIErrorResponse {
	return APIErrorResponse{
		Error:     http.StatusText(code),
		Message:   err.Error(),
		Code:      code,
		Timestamp: time.Now().UTC().Format(time.RFC3339),
	}
}

// ErrorHandlerWithDetails creates a standardized error response with details
func ErrorHandlerWithDetails(err error, code int, details map[string]string) APIErrorResponse {
	return APIErrorResponse{
		Error:     http.StatusText(code),
		Message:   err.Error(),
		Code:      code,
		Timestamp: time.Now().UTC().Format(time.RFC3339),
		Details:   details,
	}
}

// JSONResponse creates a standardized JSON response
func JSONResponse(data interface{}, message string) map[string]interface{} {
	return map[string]interface{}{
		"data":      data,
		"message":   message,
		"timestamp": time.Now().UTC().Format(time.RFC3339),
	}
}

// PaginationResponse creates a paginated response
func PaginationResponse(data interface{}, page, limit, total int) map[string]interface{} {
	totalPages := (total + limit - 1) / limit
	
	return map[string]interface{}{
		"data": data,
		"pagination": map[string]int{
			"page":        page,
			"limit":       limit,
			"total":       total,
			"total_pages": totalPages,
		},
		"timestamp": time.Now().UTC().Format(time.RFC3339),
	}
}