#!/bin/bash

# Setup script for {{.ProjectName}}
# This script sets up the development environment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check system requirements
check_requirements() {
    log_info "Checking system requirements..."

    # Check Go version
    if command_exists go; then
        GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
        log_success "Go $GO_VERSION is installed"
        
        # Check minimum Go version ({{.GoVersion}})
        REQUIRED_VERSION="{{.GoVersion}}"
        if ! printf '%s\n%s\n' "$REQUIRED_VERSION" "$GO_VERSION" | sort -V -C; then
            log_warning "Go version $GO_VERSION is older than required $REQUIRED_VERSION"
        fi
    else
        log_error "Go is not installed. Please install Go {{.GoVersion}} or later."
        exit 1
    fi

{{- if ne .DatabaseDriver "" }}
    # Check database
{{- if eq .DatabaseDriver "postgres" }}
    if command_exists psql; then
        log_success "PostgreSQL client is available"
    else
        log_warning "PostgreSQL client (psql) not found. Install PostgreSQL for database operations."
    fi
{{- else if eq .DatabaseDriver "mysql" }}
    if command_exists mysql; then
        log_success "MySQL client is available"
    else
        log_warning "MySQL client not found. Install MySQL for database operations."
    fi
{{- else if eq .DatabaseDriver "sqlite" }}
    if command_exists sqlite3; then
        log_success "SQLite3 is available"
    else
        log_warning "SQLite3 not found. Install SQLite3 for database operations."
    fi
{{- end }}
{{- end }}

{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
    # Check Node.js and npm
    if command_exists node; then
        NODE_VERSION=$(node --version | sed 's/v//')
        log_success "Node.js $NODE_VERSION is installed"
    else
        log_error "Node.js is not installed. Please install Node.js 18+ for asset compilation."
        exit 1
    fi

    if command_exists npm; then
        NPM_VERSION=$(npm --version)
        log_success "npm $NPM_VERSION is installed"
    else
        log_error "npm is not installed. Please install npm for asset management."
        exit 1
    fi
{{- end }}

    # Check Docker (optional)
    if command_exists docker; then
        log_success "Docker is available"
    else
        log_warning "Docker not found. Install Docker for containerized development."
    fi

    # Check make
    if command_exists make; then
        log_success "Make is available"
    else
        log_warning "Make not found. Install make for build automation."
    fi

    log_success "System requirements check completed"
}

# Setup environment file
setup_env() {
    log_info "Setting up environment configuration..."

    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log_success "Created .env from .env.example"
            
            # Generate random secrets
            if command_exists openssl; then
                APP_KEY=$(openssl rand -hex 32)
                SESSION_SECRET=$(openssl rand -hex 32)
                
                # Replace placeholders in .env
                if [[ "$OSTYPE" == "darwin"* ]]; then
                    # macOS
                    sed -i '' "s/your-32-character-secret-key-here/$APP_KEY/" .env
                    sed -i '' "s/your-session-secret-key-minimum-32-chars/$SESSION_SECRET/" .env
                else
                    # Linux
                    sed -i "s/your-32-character-secret-key-here/$APP_KEY/" .env
                    sed -i "s/your-session-secret-key-minimum-32-chars/$SESSION_SECRET/" .env
                fi
                
                log_success "Generated random secrets for .env"
            else
                log_warning "OpenSSL not found. Please manually set APP_KEY and SESSION_SECRET in .env"
            fi
        else
            log_error ".env.example not found. Cannot create .env file."
            exit 1
        fi
    else
        log_info ".env file already exists"
    fi
}

# Install Go dependencies
install_go_deps() {
    log_info "Installing Go dependencies..."
    
    if [ -f "go.mod" ]; then
        go mod download
        go mod tidy
        log_success "Go dependencies installed"
    else
        log_error "go.mod not found. Make sure you're in the project root directory."
        exit 1
    fi
}

{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
# Install Node dependencies
install_node_deps() {
    log_info "Installing Node.js dependencies..."
    
    if [ -f "package.json" ]; then
        npm ci
        log_success "Node.js dependencies installed"
    else
        log_warning "package.json not found. Skipping Node.js dependencies."
    fi
}
{{- end }}

{{- if ne .DatabaseDriver "" }}
# Setup database
setup_database() {
    log_info "Setting up database..."
    
    # Load environment variables
    if [ -f ".env" ]; then
        set -a
        source .env
        set +a
    fi

{{- if eq .DatabaseDriver "postgres" }}
    # PostgreSQL setup
    if command_exists createdb; then
        DB_NAME=${DATABASE_NAME:-{{.ProjectName}}_development}
        TEST_DB_NAME=${TEST_DATABASE_NAME:-{{.ProjectName}}_test}
        
        # Create development database
        if createdb "$DB_NAME" 2>/dev/null; then
            log_success "Created PostgreSQL database: $DB_NAME"
        else
            log_info "PostgreSQL database $DB_NAME already exists or couldn't be created"
        fi
        
        # Create test database
        if createdb "$TEST_DB_NAME" 2>/dev/null; then
            log_success "Created PostgreSQL test database: $TEST_DB_NAME"
        else
            log_info "PostgreSQL test database $TEST_DB_NAME already exists or couldn't be created"
        fi
    else
        log_warning "createdb command not found. Please create PostgreSQL databases manually."
    fi

{{- else if eq .DatabaseDriver "mysql" }}
    # MySQL setup
    if command_exists mysql; then
        DB_NAME=${DATABASE_NAME:-{{.ProjectName}}_development}
        TEST_DB_NAME=${TEST_DATABASE_NAME:-{{.ProjectName}}_test}
        MYSQL_USER=${DATABASE_USER:-root}
        MYSQL_PASSWORD=${DATABASE_PASSWORD:-}
        
        MYSQL_CMD="mysql -u$MYSQL_USER"
        if [ -n "$MYSQL_PASSWORD" ]; then
            MYSQL_CMD="$MYSQL_CMD -p$MYSQL_PASSWORD"
        fi
        
        # Create development database
        if echo "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" | $MYSQL_CMD 2>/dev/null; then
            log_success "Created/verified MySQL database: $DB_NAME"
        else
            log_warning "Could not create MySQL database $DB_NAME. Please create it manually."
        fi
        
        # Create test database
        if echo "CREATE DATABASE IF NOT EXISTS \`$TEST_DB_NAME\`;" | $MYSQL_CMD 2>/dev/null; then
            log_success "Created/verified MySQL test database: $TEST_DB_NAME"
        else
            log_warning "Could not create MySQL test database $TEST_DB_NAME. Please create it manually."
        fi
    else
        log_warning "mysql command not found. Please create MySQL databases manually."
    fi

{{- else if eq .DatabaseDriver "sqlite" }}
    # SQLite setup
    DB_PATH=${DATABASE_PATH:-./data/{{.ProjectName}}.db}
    DB_DIR=$(dirname "$DB_PATH")
    
    # Create data directory
    mkdir -p "$DB_DIR"
    
    # SQLite databases are created automatically when accessed
    log_success "SQLite database path configured: $DB_PATH"
{{- end }}
}

# Run database migrations
run_migrations() {
    log_info "Running database migrations..."
    
    if command_exists migrate; then
        if [ -d "database/migrations" ]; then
            # Load environment variables for database URL
            if [ -f ".env" ]; then
                set -a
                source .env
                set +a
            fi
            
            if [ -n "$DATABASE_URL" ]; then
                migrate -path database/migrations -database "$DATABASE_URL" up
                log_success "Database migrations completed"
            else
                log_error "DATABASE_URL not set in .env file"
                return 1
            fi
        else
            log_warning "No migrations directory found"
        fi
    else
        log_warning "migrate command not found. Install golang-migrate to run migrations."
        log_info "Install with: go install -tags '{{.DatabaseDriver}}' github.com/golang-migrate/migrate/v4/cmd/migrate@latest"
    fi
}
{{- end }}

# Install development tools
install_dev_tools() {
    log_info "Installing development tools..."
    
    # List of development tools
    TOOLS=(
        "github.com/cosmtrek/air@latest"                                    # Hot reload
        "github.com/golangci/golangci-lint/cmd/golangci-lint@latest"       # Linting
        "golang.org/x/tools/cmd/goimports@latest"                          # Import formatting
        "github.com/securego/gosec/v2/cmd/gosec@latest"                    # Security scanner
        "golang.org/x/vuln/cmd/govulncheck@latest"                         # Vulnerability scanner
{{- if ne .DatabaseDriver "" }}
        "github.com/golang-migrate/migrate/v4/cmd/migrate@latest"          # Database migrations
{{- end }}
    )
    
    for tool in "${TOOLS[@]}"; do
        tool_name=$(basename "$tool" | cut -d'@' -f1)
        if command_exists "$tool_name"; then
            log_info "$tool_name is already installed"
        else
            log_info "Installing $tool_name..."
            go install "$tool"
        fi
    done
    
    log_success "Development tools installation completed"
}

# Setup IDE configuration
setup_ide() {
    log_info "Setting up IDE configuration..."
    
    # VS Code settings
    if [ -d ".vscode" ] || command_exists code; then
        mkdir -p .vscode
        
        # VS Code settings
        cat > .vscode/settings.json << 'EOF'
{
    "go.lintTool": "golangci-lint",
    "go.lintFlags": ["--fast"],
    "go.testFlags": ["-v"],
    "go.testTimeout": "30s",
    "go.coverOnSave": true,
    "go.coverOnSingleTest": true,
    "go.coverageDecorator": {
        "type": "gutter",
        "coveredHighlightColor": "rgba(64,128,128,0.5)",
        "uncoveredHighlightColor": "rgba(128,64,64,0.25)"
    },
    "files.exclude": {
        "**/tmp": true,
        "**/.air": true,
        "**/vendor": true
    }
}
EOF
        
        # VS Code recommended extensions
        cat > .vscode/extensions.json << 'EOF'
{
    "recommendations": [
        "golang.go",
        "ms-vscode.makefile-tools",
        "ms-vscode-remote.remote-containers",
        "bradlc.vscode-tailwindcss",
        "esbenp.prettier-vscode"
    ]
}
EOF
        
        log_success "VS Code configuration created"
    fi
    
    # Git hooks
    if [ -d ".git" ]; then
        mkdir -p .git/hooks
        
        # Pre-commit hook
        cat > .git/hooks/pre-commit << 'EOF'
#!/bin/sh
# Pre-commit hook for Go projects

# Format Go code
go fmt ./...

# Run linter
if command -v golangci-lint >/dev/null 2>&1; then
    golangci-lint run
fi

# Run tests
go test -short ./...
EOF
        chmod +x .git/hooks/pre-commit
        log_success "Git pre-commit hook created"
    fi
}

# Create directories
create_directories() {
    log_info "Creating project directories..."
    
    DIRS=(
        "logs"
        "uploads"
        "storage"
{{- if eq .DatabaseDriver "sqlite" }}
        "data"
{{- end }}
{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
        "public/build"
{{- end }}
    )
    
    for dir in "${DIRS[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            log_success "Created directory: $dir"
        fi
    done
    
    # Create .gitkeep files for empty directories
    for dir in "${DIRS[@]}"; do
        if [ ! "$(ls -A $dir)" ]; then
            touch "$dir/.gitkeep"
        fi
    done
}

# Build assets
{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
build_assets() {
    log_info "Building assets..."
    
    if [ -f "package.json" ] && command_exists npm; then
        npm run build
        log_success "Assets built successfully"
    else
        log_warning "Cannot build assets. package.json not found or npm not available."
    fi
}
{{- end }}

# Verify installation
verify_setup() {
    log_info "Verifying setup..."
    
    # Try to build the project
    if go build -o /tmp/{{.ProjectName}}_test ./...; then
        rm -f /tmp/{{.ProjectName}}_test
        log_success "Project builds successfully"
    else
        log_error "Project build failed"
        return 1
    fi
    
    # Try to run tests
    if go test -short ./...; then
        log_success "Tests pass"
    else
        log_warning "Some tests failed"
    fi
    
{{- if ne .DatabaseDriver "" }}
    # Check database connection
    if [ -f ".env" ]; then
        set -a
        source .env
        set +a
        
        # This would be implemented based on your specific database setup
        log_info "Database connection check skipped (implement based on your setup)"
    fi
{{- end }}
    
    log_success "Setup verification completed"
}

# Main setup function
main() {
    echo "🚀 Setting up {{.ProjectName}} development environment..."
    echo ""
    
    check_requirements
    setup_env
    install_go_deps
{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
    install_node_deps
{{- end }}
{{- if ne .DatabaseDriver "" }}
    setup_database
    run_migrations
{{- end }}
    install_dev_tools
    setup_ide
    create_directories
{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
    build_assets
{{- end }}
    verify_setup
    
    echo ""
    log_success "🎉 Setup completed successfully!"
    echo ""
    echo "Next steps:"
    echo "  1. Review and update .env file with your configuration"
{{- if ne .DatabaseDriver "" }}
    echo "  2. Verify database connection and run migrations if needed"
{{- end }}
    echo "  3. Run 'make dev' to start the development server"
    echo "  4. Visit http://localhost:8080 to see your application"
    echo ""
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "{{.ProjectName}} Setup Script"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h     Show this help message"
        echo "  --check        Only check requirements"
        echo "  --env          Only setup environment file"
        echo "  --deps         Only install dependencies"
        echo "  --db           Only setup database"
        echo "  --tools        Only install development tools"
        echo ""
        exit 0
        ;;
    --check)
        check_requirements
        ;;
    --env)
        setup_env
        ;;
    --deps)
        install_go_deps
{{- if and (ne .AssetPipeline "embedded") (ne .AssetPipeline "") }}
        install_node_deps
{{- end }}
        ;;
    --db)
{{- if ne .DatabaseDriver "" }}
        setup_database
        run_migrations
{{- else }}
        log_info "No database configuration found"
{{- end }}
        ;;
    --tools)
        install_dev_tools
        ;;
    *)
        main
        ;;
esac