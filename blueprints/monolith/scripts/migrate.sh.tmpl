#!/bin/bash

# Database migration script for {{.ProjectName}}
# Handles database migrations with various options

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
MIGRATIONS_DIR="database/migrations"
MIGRATE_CMD="migrate"

# Load environment variables
load_env() {
    if [ -f ".env" ]; then
        set -a
        source .env
        set +a
        log_info "Environment variables loaded from .env"
    else
        log_warning ".env file not found"
    fi
}

# Check if migrate tool is available
check_migrate_tool() {
    if ! command -v $MIGRATE_CMD &> /dev/null; then
        log_error "migrate tool not found"
        log_info "Install with: go install -tags '{{.DatabaseDriver}}' github.com/golang-migrate/migrate/v4/cmd/migrate@latest"
        exit 1
    fi
}

# Check if migrations directory exists
check_migrations_dir() {
    if [ ! -d "$MIGRATIONS_DIR" ]; then
        log_error "Migrations directory not found: $MIGRATIONS_DIR"
        exit 1
    fi
}

# Get database URL based on environment
get_database_url() {
    if [ -n "$DATABASE_URL" ]; then
        echo "$DATABASE_URL"
    else
        log_error "DATABASE_URL not set in environment"
        exit 1
    fi
}

# Run migrations up
migrate_up() {
    local steps=${1:-""}
    local db_url=$(get_database_url)
    
    log_info "Running migrations up..."
    
    if [ -n "$steps" ]; then
        log_info "Migrating $steps steps up"
        $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" up "$steps"
    else
        log_info "Migrating all pending migrations"
        $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" up
    fi
    
    log_success "Migrations completed"
}

# Run migrations down
migrate_down() {
    local steps=${1:-1}
    local db_url=$(get_database_url)
    
    log_warning "Running migrations down (this may cause data loss)"
    read -p "Are you sure you want to rollback $steps migration(s)? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Rolling back $steps migration(s)"
        $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" down "$steps"
        log_success "Rollback completed"
    else
        log_info "Rollback cancelled"
    fi
}

# Drop database (dangerous operation)
migrate_drop() {
    local db_url=$(get_database_url)
    
    log_error "WARNING: This will DROP ALL TABLES and data!"
    read -p "Are you absolutely sure? Type 'YES' to confirm: " confirm
    
    if [ "$confirm" = "YES" ]; then
        log_warning "Dropping database schema..."
        $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" drop
        log_success "Database schema dropped"
    else
        log_info "Drop operation cancelled"
    fi
}

# Show migration status
migrate_version() {
    local db_url=$(get_database_url)
    
    log_info "Checking migration status..."
    
    version=$($MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" version 2>/dev/null || echo "")
    
    if [ -n "$version" ]; then
        log_info "Current migration version: $version"
    else
        log_info "No migrations have been applied yet"
    fi
    
    # Show available migrations
    log_info "Available migrations:"
    if ls "$MIGRATIONS_DIR"/*.sql >/dev/null 2>&1; then
        for file in "$MIGRATIONS_DIR"/*.sql; do
            basename "$file"
        done | sort -V | sed 's/^/  /'
    else
        log_info "  No migration files found"
    fi
}

# Force set migration version
force_version() {
    local version=$1
    local db_url=$(get_database_url)
    
    if [ -z "$version" ]; then
        log_error "Version number required"
        exit 1
    fi
    
    log_warning "Force setting migration version to: $version"
    read -p "This may cause inconsistent state. Continue? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" force "$version"
        log_success "Version forced to $version"
    else
        log_info "Force operation cancelled"
    fi
}

# Create a new migration file
create_migration() {
    local name=$1
    
    if [ -z "$name" ]; then
        log_error "Migration name required"
        exit 1
    fi
    
    # Validate migration name
    if [[ ! "$name" =~ ^[a-z0-9_]+$ ]]; then
        log_error "Migration name can only contain lowercase letters, numbers, and underscores"
        exit 1
    fi
    
    log_info "Creating migration: $name"
    $MIGRATE_CMD create -ext sql -dir "$MIGRATIONS_DIR" -seq "$name"
    log_success "Migration files created in $MIGRATIONS_DIR"
    
    # Show created files
    latest_files=$(ls -t "$MIGRATIONS_DIR"/*"$name"* | head -2)
    echo "Created files:"
    echo "$latest_files" | sed 's/^/  /'
}

# Test database connection
test_connection() {
    local db_url=$(get_database_url)
    
    log_info "Testing database connection..."
    
    # Try to get version (this tests the connection)
    if $MIGRATE_CMD -path "$MIGRATIONS_DIR" -database "$db_url" version >/dev/null 2>&1; then
        log_success "Database connection successful"
    else
        log_error "Database connection failed"
        log_info "Please check your DATABASE_URL and database server status"
        exit 1
    fi
}

# Reset database (drop and migrate up)
reset_database() {
    log_error "WARNING: This will DESTROY ALL DATA and recreate the schema!"
    read -p "Are you absolutely sure? Type 'RESET' to confirm: " confirm
    
    if [ "$confirm" = "RESET" ]; then
        log_warning "Resetting database..."
        migrate_drop
        migrate_up
        log_success "Database reset completed"
    else
        log_info "Reset operation cancelled"
    fi
}

# Seed database with sample data
seed_database() {
    log_info "Seeding database with sample data..."
    
    # Check if seeder exists
    if [ -f "database/seeder.go" ]; then
        go run database/seeder.go
        log_success "Database seeded successfully"
    elif [ -f "cmd/seed/main.go" ]; then
        go run cmd/seed/main.go
        log_success "Database seeded successfully"
    else
        log_warning "No seeder found. Create database/seeder.go or cmd/seed/main.go"
    fi
}

# Show help
show_help() {
    cat << EOF
{{.ProjectName}} Migration Script

Usage: $0 <command> [options]

Commands:
    up [N]              Apply N migrations (or all if N not specified)
    down [N]            Rollback N migrations (default: 1)
    drop                Drop all tables (WARNING: destructive)
    version             Show current migration version and available migrations
    force <version>     Force set migration version (use with caution)
    create <name>       Create a new migration file
    test                Test database connection
    reset               Drop all tables and re-apply all migrations
    seed                Seed database with sample data

Examples:
    $0 up               # Apply all pending migrations
    $0 up 2             # Apply next 2 migrations
    $0 down             # Rollback last migration
    $0 down 3           # Rollback last 3 migrations
    $0 version          # Show current status
    $0 create add_users # Create new migration
    $0 reset            # Reset entire database

Environment:
    DATABASE_URL        Database connection string (required)

The script loads environment variables from .env file if present.
EOF
}

# Main script
main() {
    local command=${1:-"help"}
    shift || true
    
    # Load environment first
    load_env
    
    case "$command" in
        "up")
            check_migrate_tool
            check_migrations_dir
            migrate_up "$@"
            ;;
        "down")
            check_migrate_tool
            check_migrations_dir
            migrate_down "$@"
            ;;
        "drop")
            check_migrate_tool
            check_migrations_dir
            migrate_drop
            ;;
        "version"|"status")
            check_migrate_tool
            check_migrations_dir
            migrate_version
            ;;
        "force")
            check_migrate_tool
            check_migrations_dir
            force_version "$1"
            ;;
        "create")
            check_migrate_tool
            check_migrations_dir
            create_migration "$1"
            ;;
        "test")
            check_migrate_tool
            test_connection
            ;;
        "reset")
            check_migrate_tool
            check_migrations_dir
            reset_database
            ;;
        "seed")
            seed_database
            ;;
        "help"|"-h"|"--help"|*)
            show_help
            ;;
    esac
}

# Run main function with all arguments
main "$@"