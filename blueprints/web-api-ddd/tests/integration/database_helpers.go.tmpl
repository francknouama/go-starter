package integration

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/testcontainers/testcontainers-go"
{{- if eq .DatabaseDriver "postgres"}}
	"github.com/testcontainers/testcontainers-go/modules/postgres"
{{- else if eq .DatabaseDriver "mysql"}}
	"github.com/testcontainers/testcontainers-go/modules/mysql"
{{- end}}
	"github.com/testcontainers/testcontainers-go/wait"
	"github.com/stretchr/testify/require"

{{- if eq .DatabaseORM "gorm"}}
	"gorm.io/gorm"
{{- if eq .DatabaseDriver "postgres"}}
	gormpostgres "gorm.io/driver/postgres"
{{- else if eq .DatabaseDriver "mysql"}}
	gormmysql "gorm.io/driver/mysql"
{{- else if eq .DatabaseDriver "sqlite"}}
	"gorm.io/driver/sqlite"
{{- end}}
{{- else if eq .DatabaseORM "sqlx"}}
	"github.com/jmoiron/sqlx"
{{- if eq .DatabaseDriver "postgres"}}
	_ "github.com/lib/pq"
{{- else if eq .DatabaseDriver "mysql"}}
	_ "github.com/go-sql-driver/mysql"
{{- else if eq .DatabaseDriver "sqlite"}}
	_ "github.com/mattn/go-sqlite3"
{{- end}}
{{- else}}
	"database/sql"
{{- if eq .DatabaseDriver "postgres"}}
	_ "github.com/lib/pq"
{{- else if eq .DatabaseDriver "mysql"}}
	_ "github.com/go-sql-driver/mysql"
{{- else if eq .DatabaseDriver "sqlite"}}
	_ "github.com/mattn/go-sqlite3"
{{- end}}
{{- end}}
	
	"{{.ModulePath}}/internal/infrastructure/logger"
)

{{- if eq .DatabaseDriver "postgres"}}
// setupTestDatabase creates a PostgreSQL testcontainer and returns the database connection
func setupTestDatabase(t *testing.T) ({{- if eq .DatabaseORM "gorm"}}*gorm.DB{{- else if eq .DatabaseORM "sqlx"}}*sqlx.DB{{- else}}*sql.DB{{- end}}, func()) {
	ctx := context.Background()
	
	// Create PostgreSQL container
	postgresContainer, err := postgres.RunContainer(ctx,
		testcontainers.WithImage("postgres:15-alpine"),
		postgres.WithDatabase("testdb"),
		postgres.WithUsername("testuser"),
		postgres.WithPassword("testpass"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(60*time.Second),
		),
	)
	require.NoError(t, err)

	// Get connection details
	host, err := postgresContainer.Host(ctx)
	require.NoError(t, err)
	
	port, err := postgresContainer.MappedPort(ctx, "5432")
	require.NoError(t, err)

{{- if eq .DatabaseORM "gorm"}}
	// Create DSN for GORM
	dsn := fmt.Sprintf("host=%s port=%d user=testuser password=testpass dbname=testdb sslmode=disable",
		host, port.Int())

	// Connect with GORM
	db, err := gorm.Open(gormpostgres.Open(dsn), &gorm.Config{})
	require.NoError(t, err)

{{- else if eq .DatabaseORM "sqlx"}}
	// Create DSN for SQLX
	dsn := fmt.Sprintf("postgres://testuser:testpass@%s:%d/testdb?sslmode=disable",
		host, port.Int())

	// Connect with SQLX
	db, err := sqlx.Connect("postgres", dsn)
	require.NoError(t, err)

{{- else}}
	// Create DSN for standard SQL
	dsn := fmt.Sprintf("postgres://testuser:testpass@%s:%d/testdb?sslmode=disable",
		host, port.Int())

	// Connect with standard SQL
	db, err := sql.Open("postgres", dsn)
	require.NoError(t, err)
	require.NoError(t, db.Ping())

{{- end}}
	// Return cleanup function
	cleanup := func() {
{{- if eq .DatabaseORM "gorm"}}
		sqlDB, _ := db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
{{- else}}
		db.Close()
{{- end}}
		if err := postgresContainer.Terminate(ctx); err != nil {
			t.Logf("failed to terminate container: %s", err)
		}
	}

	return db, cleanup
}

{{- else if eq .DatabaseDriver "mysql"}}
// setupTestDatabase creates a MySQL testcontainer and returns the database connection
func setupTestDatabase(t *testing.T) ({{- if eq .DatabaseORM "gorm"}}*gorm.DB{{- else if eq .DatabaseORM "sqlx"}}*sqlx.DB{{- else}}*sql.DB{{- end}}, func()) {
	ctx := context.Background()
	
	// Create MySQL container
	mysqlContainer, err := mysql.RunContainer(ctx,
		testcontainers.WithImage("mysql:8.0"),
		mysql.WithDatabase("testdb"),
		mysql.WithUsername("testuser"),
		mysql.WithPassword("testpass"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("port: 3306  MySQL Community Server - GPL").
				WithOccurrence(1).
				WithStartupTimeout(60*time.Second),
		),
	)
	require.NoError(t, err)

	// Get connection details
	host, err := mysqlContainer.Host(ctx)
	require.NoError(t, err)
	
	port, err := mysqlContainer.MappedPort(ctx, "3306")
	require.NoError(t, err)

{{- if eq .DatabaseORM "gorm"}}
	// Create DSN for GORM
	dsn := fmt.Sprintf("testuser:testpass@tcp(%s:%d)/testdb?charset=utf8mb4&parseTime=True&loc=Local",
		host, port.Int())

	// Connect with GORM
	db, err := gorm.Open(gormmysql.Open(dsn), &gorm.Config{})
	require.NoError(t, err)

{{- else if eq .DatabaseORM "sqlx"}}
	// Create DSN for SQLX
	dsn := fmt.Sprintf("testuser:testpass@tcp(%s:%d)/testdb?charset=utf8mb4&parseTime=True&loc=Local",
		host, port.Int())

	// Connect with SQLX
	db, err := sqlx.Connect("mysql", dsn)
	require.NoError(t, err)

{{- else}}
	// Create DSN for standard SQL
	dsn := fmt.Sprintf("testuser:testpass@tcp(%s:%d)/testdb?charset=utf8mb4&parseTime=True&loc=Local",
		host, port.Int())

	// Connect with standard SQL
	db, err := sql.Open("mysql", dsn)
	require.NoError(t, err)
	require.NoError(t, db.Ping())

{{- end}}
	// Return cleanup function
	cleanup := func() {
{{- if eq .DatabaseORM "gorm"}}
		sqlDB, _ := db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
{{- else}}
		db.Close()
{{- end}}
		if err := mysqlContainer.Terminate(ctx); err != nil {
			t.Logf("failed to terminate container: %s", err)
		}
	}

	return db, cleanup
}

{{- else if eq .DatabaseDriver "sqlite"}}
// setupTestDatabase creates an in-memory SQLite database and returns the database connection
func setupTestDatabase(t *testing.T) ({{- if eq .DatabaseORM "gorm"}}*gorm.DB{{- else if eq .DatabaseORM "sqlx"}}*sqlx.DB{{- else}}*sql.DB{{- end}}, func()) {
{{- if eq .DatabaseORM "gorm"}}
	// Connect with GORM to in-memory SQLite
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	require.NoError(t, err)

{{- else if eq .DatabaseORM "sqlx"}}
	// Connect with SQLX to in-memory SQLite
	db, err := sqlx.Connect("sqlite3", ":memory:")
	require.NoError(t, err)

{{- else}}
	// Connect with standard SQL to in-memory SQLite
	db, err := sql.Open("sqlite3", ":memory:")
	require.NoError(t, err)
	require.NoError(t, db.Ping())

{{- end}}
	// Return cleanup function (SQLite in-memory doesn't need special cleanup)
	cleanup := func() {
{{- if eq .DatabaseORM "gorm"}}
		sqlDB, _ := db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
{{- else}}
		db.Close()
{{- end}}
	}

	return db, cleanup
}

{{- else}}
// setupTestDatabase creates a PostgreSQL testcontainer and returns the database connection (default)
func setupTestDatabase(t *testing.T) ({{- if eq .DatabaseORM "gorm"}}*gorm.DB{{- else if eq .DatabaseORM "sqlx"}}*sqlx.DB{{- else}}*sql.DB{{- end}}, func()) {
	ctx := context.Background()
	
	// Create PostgreSQL container (default)
	postgresContainer, err := postgres.RunContainer(ctx,
		testcontainers.WithImage("postgres:15-alpine"),
		postgres.WithDatabase("testdb"),
		postgres.WithUsername("testuser"),
		postgres.WithPassword("testpass"),
		testcontainers.WithWaitStrategy(
			wait.ForLog("database system is ready to accept connections").
				WithOccurrence(2).
				WithStartupTimeout(60*time.Second),
		),
	)
	require.NoError(t, err)

	// Get connection details
	host, err := postgresContainer.Host(ctx)
	require.NoError(t, err)
	
	port, err := postgresContainer.MappedPort(ctx, "5432")
	require.NoError(t, err)

{{- if eq .DatabaseORM "gorm"}}
	// Create DSN for GORM
	dsn := fmt.Sprintf("host=%s port=%d user=testuser password=testpass dbname=testdb sslmode=disable",
		host, port.Int())

	// Connect with GORM
	db, err := gorm.Open(gormpostgres.Open(dsn), &gorm.Config{})
	require.NoError(t, err)

{{- else if eq .DatabaseORM "sqlx"}}
	// Create DSN for SQLX
	dsn := fmt.Sprintf("postgres://testuser:testpass@%s:%d/testdb?sslmode=disable",
		host, port.Int())

	// Connect with SQLX
	db, err := sqlx.Connect("postgres", dsn)
	require.NoError(t, err)

{{- else}}
	// Create DSN for standard SQL
	dsn := fmt.Sprintf("postgres://testuser:testpass@%s:%d/testdb?sslmode=disable",
		host, port.Int())

	// Connect with standard SQL
	db, err := sql.Open("postgres", dsn)
	require.NoError(t, err)
	require.NoError(t, db.Ping())

{{- end}}
	// Return cleanup function
	cleanup := func() {
{{- if eq .DatabaseORM "gorm"}}
		sqlDB, _ := db.DB()
		if sqlDB != nil {
			sqlDB.Close()
		}
{{- else}}
		db.Close()
{{- end}}
		if err := postgresContainer.Terminate(ctx); err != nil {
			t.Logf("failed to terminate container: %s", err)
		}
	}

	return db, cleanup
}
{{- end}}

// createTestLogger creates a logger for testing
func createTestLogger() *logger.Logger {
	return logger.New()
}