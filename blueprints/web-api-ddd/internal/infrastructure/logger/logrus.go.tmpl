package logger

import (
	"os"

	"github.com/sirupsen/logrus"
)

// Logger provides structured logging for the application using Logrus
type Logger struct {
	*logrus.Logger
}

// New creates a new logrus-based logger with default configuration
func New() *Logger {
	logger := logrus.New()
	logger.SetOutput(os.Stdout)
	logger.SetFormatter(&logrus.JSONFormatter{})
	logger.SetLevel(logrus.InfoLevel)
	
	return &Logger{Logger: logger}
}

// NewWithLevel creates a new logger with the specified level
func NewWithLevel(level string) *Logger {
	var logrusLevel logrus.Level
	switch level {
	case "debug":
		logrusLevel = logrus.DebugLevel
	case "info":
		logrusLevel = logrus.InfoLevel
	case "warn":
		logrusLevel = logrus.WarnLevel
	case "error":
		logrusLevel = logrus.ErrorLevel
	default:
		logrusLevel = logrus.InfoLevel
	}

	logger := logrus.New()
	logger.SetOutput(os.Stdout)
	logger.SetFormatter(&logrus.JSONFormatter{})
	logger.SetLevel(logrusLevel)
	
	return &Logger{Logger: logger}
}

// DisableColor disables color output
func (l *Logger) DisableColor() {
	// Logrus can disable color output via formatter configuration
	if formatter, ok := l.Logger.Formatter.(*logrus.TextFormatter); ok {
		formatter.DisableColors = true
	}
}