{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"{{.ModulePath}}/internal/shared/valueobjects"
)

// Command represents a command in the CQRS pattern
type Command interface {
	CommandType() string
}

// Create{{.DomainName | title}}Command represents a command to create a new {{.DomainName}}
type Create{{.DomainName | title}}Command struct {
	Name        string `json:"name" validate:"required,min=1,max=100"`
	Email       string `json:"email" validate:"required,email"`
	Description string `json:"description" validate:"max=500"`
}

// CommandType returns the command type
func (c Create{{.DomainName | title}}Command) CommandType() string {
	return "create_{{.DomainName}}"
}

// Update{{.DomainName | title}}Command represents a command to update a {{.DomainName}}
type Update{{.DomainName | title}}Command struct {
	ID          string  `json:"id" validate:"required,uuid"`
	Name        *string `json:"name,omitempty" validate:"omitempty,min=1,max=100"`
	Email       *string `json:"email,omitempty" validate:"omitempty,email"`
	Description *string `json:"description,omitempty" validate:"omitempty,max=500"`
}

// CommandType returns the command type
func (c Update{{.DomainName | title}}Command) CommandType() string {
	return "update_{{.DomainName}}"
}

// GetID returns the {{.DomainName}} ID as a value object
func (c Update{{.DomainName | title}}Command) GetID() (valueobjects.ID, error) {
	return valueobjects.NewID(c.ID)
}

// Delete{{.DomainName | title}}Command represents a command to delete a {{.DomainName}}
type Delete{{.DomainName | title}}Command struct {
	ID string `json:"id" validate:"required,uuid"`
}

// CommandType returns the command type
func (c Delete{{.DomainName | title}}Command) CommandType() string {
	return "delete_{{.DomainName}}"
}

// GetID returns the {{.DomainName}} ID as a value object
func (c Delete{{.DomainName | title}}Command) GetID() (valueobjects.ID, error) {
	return valueobjects.NewID(c.ID)
}

// Activate{{.DomainName | title}}Command represents a command to activate a {{.DomainName}}
type Activate{{.DomainName | title}}Command struct {
	ID string `json:"id" validate:"required,uuid"`
}

// CommandType returns the command type
func (c Activate{{.DomainName | title}}Command) CommandType() string {
	return "activate_{{.DomainName}}"
}

// GetID returns the {{.DomainName}} ID as a value object
func (c Activate{{.DomainName | title}}Command) GetID() (valueobjects.ID, error) {
	return valueobjects.NewID(c.ID)
}

// Deactivate{{.DomainName | title}}Command represents a command to deactivate a {{.DomainName}}
type Deactivate{{.DomainName | title}}Command struct {
	ID string `json:"id" validate:"required,uuid"`
}

// CommandType returns the command type
func (c Deactivate{{.DomainName | title}}Command) CommandType() string {
	return "deactivate_{{.DomainName}}"
}

// GetID returns the {{.DomainName}} ID as a value object
func (c Deactivate{{.DomainName | title}}Command) GetID() (valueobjects.ID, error) {
	return valueobjects.NewID(c.ID)
}

// Create{{.DomainName | title}}Request represents an HTTP request to create a {{.DomainName}}
type Create{{.DomainName | title}}Request struct {
	Name        string `json:"name" binding:"required"`
	Email       string `json:"email" binding:"required,email"`
	Description string `json:"description"`
}

// ToCommand converts the request to a command
func (r Create{{.DomainName | title}}Request) ToCommand() Create{{.DomainName | title}}Command {
	return Create{{.DomainName | title}}Command{
		Name:        r.Name,
		Email:       r.Email,
		Description: r.Description,
	}
}

// Update{{.DomainName | title}}Request represents an HTTP request to update a {{.DomainName}}
type Update{{.DomainName | title}}Request struct {
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty" binding:"omitempty,email"`
	Description *string `json:"description,omitempty"`
}

// ToCommand converts the request to a command
func (r Update{{.DomainName | title}}Request) ToCommand(id string) Update{{.DomainName | title}}Command {
	return Update{{.DomainName | title}}Command{
		ID:          id,
		Name:        r.Name,
		Email:       r.Email,
		Description: r.Description,
	}
}
{{- end}}