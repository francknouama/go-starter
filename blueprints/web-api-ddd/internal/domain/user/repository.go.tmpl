{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"context"
	"{{.ModulePath}}/internal/shared/valueobjects"
)

// {{.DomainName | title}}Repository defines the contract for {{.DomainName}} persistence
type {{.DomainName | title}}Repository interface {
	// Save persists a {{.DomainName}} aggregate
	Save(ctx context.Context, {{.DomainName}} *{{.DomainName | title}}) error
	
	// FindByID retrieves a {{.DomainName}} by its ID
	FindByID(ctx context.Context, id valueobjects.ID) (*{{.DomainName | title}}, error)
	
	// FindByName retrieves a {{.DomainName}} by name
	FindByName(ctx context.Context, name string) (*{{.DomainName | title}}, error)
	
	// FindAll retrieves all {{.DomainName}}s with pagination
	FindAll(ctx context.Context, offset, limit int) ([]*{{.DomainName | title}}, error)
	
	// FindByStatus retrieves {{.DomainName}}s by status
	FindByStatus(ctx context.Context, status Status, offset, limit int) ([]*{{.DomainName | title}}, error)
	
	// Count returns the total number of {{.DomainName}}s
	Count(ctx context.Context) (int, error)
	
	// CountByStatus returns the number of {{.DomainName}}s by status
	CountByStatus(ctx context.Context, status Status) (int, error)
	
	// Delete removes a {{.DomainName}} (physical delete)
	Delete(ctx context.Context, id valueobjects.ID) error
	
	// Exists checks if a {{.DomainName}} exists by ID
	Exists(ctx context.Context, id valueobjects.ID) (bool, error)
	
	// ExistsByName checks if a {{.DomainName}} exists by name
	ExistsByName(ctx context.Context, name string) (bool, error)
}

// Repository is an alias for {{.DomainName | title}}Repository for backward compatibility
type Repository = {{.DomainName | title}}Repository
{{- end}}