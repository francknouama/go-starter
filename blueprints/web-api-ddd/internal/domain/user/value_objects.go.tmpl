{{- if ne .DatabaseDriver ""}}
package {{.DomainName}}

import (
	"strings"
	"{{.ModulePath}}/internal/shared/errors"
)

// Status represents the status of a {{.DomainName}}
type Status int

const (
	// StatusActive represents an active {{.DomainName}}
	StatusActive Status = iota
	// StatusInactive represents an inactive {{.DomainName}}
	StatusInactive
	// StatusDeleted represents a deleted {{.DomainName}}
	StatusDeleted
)

// String returns the string representation of the status
func (s Status) String() string {
	switch s {
	case StatusActive:
		return "active"
	case StatusInactive:
		return "inactive"
	case StatusDeleted:
		return "deleted"
	default:
		return "unknown"
	}
}

// IsValid checks if the status is valid
func (s Status) IsValid() bool {
	return s == StatusActive || s == StatusInactive || s == StatusDeleted
}

// ParseStatus parses a string into a Status
func ParseStatus(s string) (Status, error) {
	switch strings.ToLower(s) {
	case "active":
		return StatusActive, nil
	case "inactive":
		return StatusInactive, nil
	case "deleted":
		return StatusDeleted, nil
	default:
		return StatusActive, errors.ErrInvalidValueObject.WithDetails("field", "status").WithDetails("value", s)
	}
}

// MarshalText implements encoding.TextMarshaler
func (s Status) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (s *Status) UnmarshalText(text []byte) error {
	status, err := ParseStatus(string(text))
	if err != nil {
		return err
	}
	*s = status
	return nil
}

// Add other generic value objects here as needed for your domain
// Examples:
// - Priority (High, Medium, Low)
// - Type/Category
// - Size (Small, Medium, Large)
// - etc.
{{- end}}