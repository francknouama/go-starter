// Package config provides shared configuration utilities for the {{.ProjectName}} workspace.
package config

import (
	"fmt"
	"os"
	"strings"

	"github.com/spf13/viper"
)

// Config represents the shared configuration structure
type Config struct {
	// Application settings
	AppName     string `mapstructure:"app_name"`
	Environment string `mapstructure:"environment"`
	Debug       bool   `mapstructure:"debug"`

	// Server settings
	Server ServerConfig `mapstructure:"server"`

	// Database settings
{{- if ne .DatabaseType "none"}}
	Database DatabaseConfig `mapstructure:"database"`
{{- end}}

	// Message queue settings
{{- if ne .MessageQueue "none"}}
	MessageQueue MessageQueueConfig `mapstructure:"message_queue"`
{{- end}}

	// Logging settings
	Logger LoggerConfig `mapstructure:"logger"`

	// Observability settings
{{- if .EnableObservability}}
	Observability ObservabilityConfig `mapstructure:"observability"`
{{- end}}
}

// ServerConfig holds server-related configuration
type ServerConfig struct {
	Host         string `mapstructure:"host"`
	Port         int    `mapstructure:"port"`
	ReadTimeout  int    `mapstructure:"read_timeout"`
	WriteTimeout int    `mapstructure:"write_timeout"`
	IdleTimeout  int    `mapstructure:"idle_timeout"`
}

{{- if ne .DatabaseType "none"}}
// DatabaseConfig holds database connection configuration
type DatabaseConfig struct {
	Host     string `mapstructure:"host"`
	Port     int    `mapstructure:"port"`
	Name     string `mapstructure:"name"`
	User     string `mapstructure:"user"`
	Password string `mapstructure:"password"`
	SSLMode  string `mapstructure:"ssl_mode"`
	URL      string `mapstructure:"url"`
}

// ConnectionString returns the database connection string
func (d DatabaseConfig) ConnectionString() string {
	if d.URL != "" {
		return d.URL
	}

{{- if eq .DatabaseType "postgres"}}
	return fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=%s",
		d.Host, d.Port, d.User, d.Password, d.Name, d.SSLMode)
{{- else if eq .DatabaseType "mysql"}}
	return fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?parseTime=true",
		d.User, d.Password, d.Host, d.Port, d.Name)
{{- else if eq .DatabaseType "mongodb"}}
	return fmt.Sprintf("mongodb://%s:%s@%s:%d/%s",
		d.User, d.Password, d.Host, d.Port, d.Name)
{{- else if eq .DatabaseType "sqlite"}}
	return d.Name // SQLite uses file path as connection string
{{- end}}
}
{{- end}}

{{- if ne .MessageQueue "none"}}
// MessageQueueConfig holds message queue configuration
type MessageQueueConfig struct {
	URL             string `mapstructure:"url"`
	Host            string `mapstructure:"host"`
	Port            int    `mapstructure:"port"`
	User            string `mapstructure:"user"`
	Password        string `mapstructure:"password"`
	MaxConnections  int    `mapstructure:"max_connections"`
	RetryAttempts   int    `mapstructure:"retry_attempts"`
	RetryDelay      int    `mapstructure:"retry_delay"`
}

// ConnectionString returns the message queue connection string
func (m MessageQueueConfig) ConnectionString() string {
	if m.URL != "" {
		return m.URL
	}

{{- if eq .MessageQueue "redis"}}
	if m.User != "" && m.Password != "" {
		return fmt.Sprintf("redis://%s:%s@%s:%d/0", m.User, m.Password, m.Host, m.Port)
	}
	return fmt.Sprintf("redis://%s:%d/0", m.Host, m.Port)
{{- else if eq .MessageQueue "nats"}}
	if m.User != "" && m.Password != "" {
		return fmt.Sprintf("nats://%s:%s@%s:%d", m.User, m.Password, m.Host, m.Port)
	}
	return fmt.Sprintf("nats://%s:%d", m.Host, m.Port)
{{- else if eq .MessageQueue "kafka"}}
	return fmt.Sprintf("%s:%d", m.Host, m.Port)
{{- else if eq .MessageQueue "rabbitmq"}}
	if m.User != "" && m.Password != "" {
		return fmt.Sprintf("amqp://%s:%s@%s:%d/", m.User, m.Password, m.Host, m.Port)
	}
	return fmt.Sprintf("amqp://%s:%d/", m.Host, m.Port)
{{- end}}
}
{{- end}}

// LoggerConfig holds logging configuration
type LoggerConfig struct {
	Level  string `mapstructure:"level"`
	Format string `mapstructure:"format"`
	Output string `mapstructure:"output"`
}

{{- if .EnableObservability}}
// ObservabilityConfig holds monitoring and observability configuration
type ObservabilityConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
	Tracing TracingConfig `mapstructure:"tracing"`
	Health  HealthConfig  `mapstructure:"health"`
}

// MetricsConfig holds metrics configuration
type MetricsConfig struct {
	Enabled bool   `mapstructure:"enabled"`
	Port    int    `mapstructure:"port"`
	Path    string `mapstructure:"path"`
}

// TracingConfig holds tracing configuration
type TracingConfig struct {
	Enabled         bool   `mapstructure:"enabled"`
	JaegerEndpoint  string `mapstructure:"jaeger_endpoint"`
	ServiceName     string `mapstructure:"service_name"`
	SamplingRate    float64 `mapstructure:"sampling_rate"`
}

// HealthConfig holds health check configuration
type HealthConfig struct {
	Enabled  bool   `mapstructure:"enabled"`
	Path     string `mapstructure:"path"`
	Interval string `mapstructure:"interval"`
}
{{- end}}

// Load loads configuration from various sources
func Load(configName string) (*Config, error) {
	config := &Config{}

	// Set default values
	setDefaults()

	// Set config name and paths
	viper.SetConfigName(configName)
	viper.SetConfigType("yaml")
	viper.AddConfigPath(".")
	viper.AddConfigPath("./configs")
	viper.AddConfigPath("../configs")
	viper.AddConfigPath("../../configs")

	// Enable environment variable binding
	viper.AutomaticEnv()
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))

	// Read config file
	if err := viper.ReadInConfig(); err != nil {
		if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
			return nil, fmt.Errorf("failed to read config file: %w", err)
		}
		// Config file not found; continue with defaults and env vars
	}

	// Unmarshal config
	if err := viper.Unmarshal(config); err != nil {
		return nil, fmt.Errorf("failed to unmarshal config: %w", err)
	}

	// Validate configuration
	if err := validateConfig(config); err != nil {
		return nil, fmt.Errorf("invalid configuration: %w", err)
	}

	return config, nil
}

// setDefaults sets default configuration values
func setDefaults() {
	viper.SetDefault("app_name", "{{.ProjectName}}")
	viper.SetDefault("environment", getEnvOrDefault("ENVIRONMENT", "development"))
	viper.SetDefault("debug", getEnvOrDefault("DEBUG", "false") == "true")

	// Server defaults
	viper.SetDefault("server.host", "0.0.0.0")
	viper.SetDefault("server.port", 8080)
	viper.SetDefault("server.read_timeout", 30)
	viper.SetDefault("server.write_timeout", 30)
	viper.SetDefault("server.idle_timeout", 120)

{{- if ne .DatabaseType "none"}}
	// Database defaults
	viper.SetDefault("database.host", "localhost")
{{- if eq .DatabaseType "postgres"}}
	viper.SetDefault("database.port", 5432)
{{- else if eq .DatabaseType "mysql"}}
	viper.SetDefault("database.port", 3306)
{{- else if eq .DatabaseType "mongodb"}}
	viper.SetDefault("database.port", 27017)
{{- end}}
	viper.SetDefault("database.name", "{{.ProjectName}}")
	viper.SetDefault("database.user", "{{.ProjectName}}")
	viper.SetDefault("database.password", "password")
{{- if eq .DatabaseType "postgres"}}
	viper.SetDefault("database.ssl_mode", "disable")
{{- end}}
{{- end}}

{{- if ne .MessageQueue "none"}}
	// Message queue defaults
	viper.SetDefault("message_queue.host", "localhost")
{{- if eq .MessageQueue "redis"}}
	viper.SetDefault("message_queue.port", 6379)
{{- else if eq .MessageQueue "nats"}}
	viper.SetDefault("message_queue.port", 4222)
{{- else if eq .MessageQueue "kafka"}}
	viper.SetDefault("message_queue.port", 9092)
{{- else if eq .MessageQueue "rabbitmq"}}
	viper.SetDefault("message_queue.port", 5672)
{{- end}}
	viper.SetDefault("message_queue.max_connections", 10)
	viper.SetDefault("message_queue.retry_attempts", 3)
	viper.SetDefault("message_queue.retry_delay", 1000)
{{- end}}

	// Logger defaults
	viper.SetDefault("logger.level", "info")
	viper.SetDefault("logger.format", "json")
	viper.SetDefault("logger.output", "stdout")

{{- if .EnableObservability}}
	// Observability defaults
	viper.SetDefault("observability.metrics.enabled", true)
	viper.SetDefault("observability.metrics.port", 9090)
	viper.SetDefault("observability.metrics.path", "/metrics")
	viper.SetDefault("observability.tracing.enabled", true)
	viper.SetDefault("observability.tracing.jaeger_endpoint", "http://localhost:14268/api/traces")
	viper.SetDefault("observability.tracing.service_name", "{{.ProjectName}}")
	viper.SetDefault("observability.tracing.sampling_rate", 0.1)
	viper.SetDefault("observability.health.enabled", true)
	viper.SetDefault("observability.health.path", "/health")
	viper.SetDefault("observability.health.interval", "30s")
{{- end}}
}

// validateConfig validates the loaded configuration
func validateConfig(config *Config) error {
	if config.AppName == "" {
		return fmt.Errorf("app_name is required")
	}

	if config.Server.Port <= 0 || config.Server.Port > 65535 {
		return fmt.Errorf("server.port must be between 1 and 65535")
	}

{{- if ne .DatabaseType "none"}}
	if config.Database.Name == "" {
		return fmt.Errorf("database.name is required")
	}
{{- end}}

	// Validate logger level
	validLevels := []string{"debug", "info", "warn", "error", "fatal", "panic"}
	if !contains(validLevels, config.Logger.Level) {
		return fmt.Errorf("logger.level must be one of: %v", validLevels)
	}

	// Validate logger format
	validFormats := []string{"json", "text"}
	if !contains(validFormats, config.Logger.Format) {
		return fmt.Errorf("logger.format must be one of: %v", validFormats)
	}

	return nil
}

// IsDevelopment returns true if the environment is development
func (c *Config) IsDevelopment() bool {
	return c.Environment == "development" || c.Environment == "dev"
}

// IsProduction returns true if the environment is production
func (c *Config) IsProduction() bool {
	return c.Environment == "production" || c.Environment == "prod"
}

// IsStaging returns true if the environment is staging
func (c *Config) IsStaging() bool {
	return c.Environment == "staging" || c.Environment == "stage"
}

// Helper functions

// getEnvOrDefault returns environment variable value or default
func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// contains checks if a slice contains a string
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}