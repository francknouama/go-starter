// Package models defines shared data models for the {{.ProjectName}} workspace.
package models

import (
	"time"

	"github.com/google/uuid"
)

// User represents a user entity in the system
type User struct {
	ID        uuid.UUID  `json:"id" db:"id" validate:"required"`
	Email     string     `json:"email" db:"email" validate:"required,email"`
	Username  string     `json:"username" db:"username" validate:"required,min=3,max=50"`
	FirstName string     `json:"first_name" db:"first_name" validate:"required,max=100"`
	LastName  string     `json:"last_name" db:"last_name" validate:"required,max=100"`
	IsActive  bool       `json:"is_active" db:"is_active"`
	CreatedAt time.Time  `json:"created_at" db:"created_at"`
	UpdatedAt time.Time  `json:"updated_at" db:"updated_at"`
	DeletedAt *time.Time `json:"deleted_at,omitempty" db:"deleted_at"`
}

// NewUser creates a new User instance with generated ID and timestamps
func NewUser(email, username, firstName, lastName string) *User {
	now := time.Now()
	return &User{
		ID:        uuid.New(),
		Email:     email,
		Username:  username,
		FirstName: firstName,
		LastName:  lastName,
		IsActive:  true,
		CreatedAt: now,
		UpdatedAt: now,
	}
}

// FullName returns the user's full name
func (u *User) FullName() string {
	return u.FirstName + " " + u.LastName
}

// IsDeleted returns true if the user is soft deleted
func (u *User) IsDeleted() bool {
	return u.DeletedAt != nil
}

// SoftDelete marks the user as deleted
func (u *User) SoftDelete() {
	now := time.Now()
	u.DeletedAt = &now
	u.UpdatedAt = now
	u.IsActive = false
}

// Restore undeletes a soft-deleted user
func (u *User) Restore() {
	u.DeletedAt = nil
	u.UpdatedAt = time.Now()
	u.IsActive = true
}

// Touch updates the UpdatedAt timestamp
func (u *User) Touch() {
	u.UpdatedAt = time.Now()
}

// UserCreateRequest represents a request to create a new user
type UserCreateRequest struct {
	Email     string `json:"email" validate:"required,email"`
	Username  string `json:"username" validate:"required,min=3,max=50"`
	FirstName string `json:"first_name" validate:"required,max=100"`
	LastName  string `json:"last_name" validate:"required,max=100"`
}

// ToUser converts the create request to a User model
func (r *UserCreateRequest) ToUser() *User {
	return NewUser(r.Email, r.Username, r.FirstName, r.LastName)
}

// UserUpdateRequest represents a request to update a user
type UserUpdateRequest struct {
	Email     *string `json:"email,omitempty" validate:"omitempty,email"`
	Username  *string `json:"username,omitempty" validate:"omitempty,min=3,max=50"`
	FirstName *string `json:"first_name,omitempty" validate:"omitempty,max=100"`
	LastName  *string `json:"last_name,omitempty" validate:"omitempty,max=100"`
	IsActive  *bool   `json:"is_active,omitempty"`
}

// ApplyTo applies the update request to a User model
func (r *UserUpdateRequest) ApplyTo(user *User) {
	if r.Email != nil {
		user.Email = *r.Email
	}
	if r.Username != nil {
		user.Username = *r.Username
	}
	if r.FirstName != nil {
		user.FirstName = *r.FirstName
	}
	if r.LastName != nil {
		user.LastName = *r.LastName
	}
	if r.IsActive != nil {
		user.IsActive = *r.IsActive
	}
	user.Touch()
}

// UserResponse represents a user in API responses
type UserResponse struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Username  string    `json:"username"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	FullName  string    `json:"full_name"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// FromUser creates a UserResponse from a User model
func FromUser(user *User) *UserResponse {
	return &UserResponse{
		ID:        user.ID,
		Email:     user.Email,
		Username:  user.Username,
		FirstName: user.FirstName,
		LastName:  user.LastName,
		FullName:  user.FullName(),
		IsActive:  user.IsActive,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}
}

// UserListResponse represents a paginated list of users
type UserListResponse struct {
	Users      []*UserResponse `json:"users"`
	Total      int64           `json:"total"`
	Page       int             `json:"page"`
	PageSize   int             `json:"page_size"`
	TotalPages int             `json:"total_pages"`
}

// NewUserListResponse creates a new paginated user list response
func NewUserListResponse(users []*User, total int64, page, pageSize int) *UserListResponse {
	userResponses := make([]*UserResponse, len(users))
	for i, user := range users {
		userResponses[i] = FromUser(user)
	}

	totalPages := int((total + int64(pageSize) - 1) / int64(pageSize))

	return &UserListResponse{
		Users:      userResponses,
		Total:      total,
		Page:       page,
		PageSize:   pageSize,
		TotalPages: totalPages,
	}
}

// UserFilter represents filtering options for user queries
type UserFilter struct {
	Email     *string `json:"email,omitempty"`
	Username  *string `json:"username,omitempty"`
	IsActive  *bool   `json:"is_active,omitempty"`
	Search    *string `json:"search,omitempty"` // Search in email, username, first name, last name
	CreatedAfter  *time.Time `json:"created_after,omitempty"`
	CreatedBefore *time.Time `json:"created_before,omitempty"`
}

// UserSort represents sorting options for user queries
type UserSort struct {
	Field     string `json:"field" validate:"oneof=email username first_name last_name created_at updated_at"`
	Direction string `json:"direction" validate:"oneof=asc desc"`
}

// DefaultUserSort returns the default sort configuration
func DefaultUserSort() UserSort {
	return UserSort{
		Field:     "created_at",
		Direction: "desc",
	}
}

// UserRepository defines the interface for user data persistence
type UserRepository interface {
	Create(user *User) error
	GetByID(id uuid.UUID) (*User, error)
	GetByEmail(email string) (*User, error)
	GetByUsername(username string) (*User, error)
	Update(user *User) error
	Delete(id uuid.UUID) error
	List(filter *UserFilter, sort *UserSort, offset, limit int) ([]*User, error)
	Count(filter *UserFilter) (int64, error)
	ExistsByEmail(email string) (bool, error)
	ExistsByUsername(username string) (bool, error)
}

// UserService defines the interface for user business logic
type UserService interface {
	CreateUser(req *UserCreateRequest) (*UserResponse, error)
	GetUser(id uuid.UUID) (*UserResponse, error)
	GetUserByEmail(email string) (*UserResponse, error)
	GetUserByUsername(username string) (*UserResponse, error)
	UpdateUser(id uuid.UUID, req *UserUpdateRequest) (*UserResponse, error)
	DeleteUser(id uuid.UUID) error
	ListUsers(filter *UserFilter, sort *UserSort, page, pageSize int) (*UserListResponse, error)
	ValidateUserData(req interface{}) error
}