package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"

{{- if eq .Framework "gin"}}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo"}}
	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber"}}
	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi"}}
	"github.com/go-chi/chi/v5"
{{- end}}
	"github.com/google/uuid"

	"{{.ModulePath}}/pkg/models"
{{- if ne .MessageQueue "none"}}
	"{{.ModulePath}}/pkg/events"
{{- end}}
)

// Response represents a standard API response
type Response struct {
	Success bool        `json:"success"`
	Data    interface{} `json:"data,omitempty"`
	Error   string      `json:"error,omitempty"`
	Meta    *Meta       `json:"meta,omitempty"`
}

// Meta contains pagination and other metadata
type Meta struct {
	Page       int `json:"page,omitempty"`
	PerPage    int `json:"per_page,omitempty"`
	Total      int `json:"total,omitempty"`
	TotalPages int `json:"total_pages,omitempty"`
}

// Health check handlers

{{- if eq .Framework "gin"}}
func (app *Application) healthHandler(c *gin.Context) {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now().UTC(),
			"service":   "{{.ProjectName}}-api",
			"version":   app.config.App.Version,
		},
	}
	c.JSON(http.StatusOK, response)
}

func (app *Application) readinessHandler(c *gin.Context) {
	checks := make(map[string]interface{})
	
{{- if ne .DatabaseType "none"}}
	// Check database
	if app.db != nil {
		if err := app.db.Health(c.Request.Context()); err != nil {
			checks["database"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			c.JSON(http.StatusServiceUnavailable, Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
			return
		}
		checks["database"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}

{{- if ne .MessageQueue "none"}}
	// Check event bus
	if app.events != nil {
		if err := app.events.Health(c.Request.Context()); err != nil {
			checks["events"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			c.JSON(http.StatusServiceUnavailable, Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
			return
		}
		checks["events"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}
	
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "ready",
			"checks": checks,
		},
	}
	c.JSON(http.StatusOK, response)
}

func (app *Application) livenessHandler(c *gin.Context) {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "alive",
			"uptime": time.Since(app.startTime).String(),
		},
	}
	c.JSON(http.StatusOK, response)
}

// User handlers

func (app *Application) listUsersHandler(c *gin.Context) {
	// Parse query parameters
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	perPage, _ := strconv.Atoi(c.DefaultQuery("per_page", "10"))
	
	// In a real app, this would query the database
	users := []models.User{
		{
			ID:        uuid.New().String(),
			Name:      "John Doe",
			Email:     "john@example.com",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
		{
			ID:        uuid.New().String(),
			Name:      "Jane Smith",
			Email:     "jane@example.com",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}
	
	response := Response{
		Success: true,
		Data:    users,
		Meta: &Meta{
			Page:       page,
			PerPage:    perPage,
			Total:      len(users),
			TotalPages: (len(users) + perPage - 1) / perPage,
		},
	}
	
	c.JSON(http.StatusOK, response)
}

func (app *Application) createUserHandler(c *gin.Context) {
	var req struct {
		Name  string `json:"name" binding:"required"`
		Email string `json:"email" binding:"required,email"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, Response{
			Success: false,
			Error:   "Invalid request: " + err.Error(),
		})
		return
	}
	
	user := models.User{
		ID:        uuid.New().String(),
		Name:      req.Name,
		Email:     req.Email,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	
	// In a real app, this would save to database
	app.logger.Info("Creating user", "id", user.ID, "name", user.Name, "email", user.Email)
	
{{- if ne .MessageQueue "none"}}
	// Publish user created event
	if app.events != nil {
		event := events.NewEvent("user.created", "api", map[string]interface{}{
			"user_id": user.ID,
			"name":    user.Name,
			"email":   user.Email,
		})
		
		if err := app.events.Publish(c.Request.Context(), "user.events", event); err != nil {
			app.logger.Error("Failed to publish user created event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusCreated, Response{
		Success: true,
		Data:    user,
	})
}

func (app *Application) getUserHandler(c *gin.Context) {
	id := c.Param("id")
	
	// In a real app, this would query the database
	user := models.User{
		ID:        id,
		Name:      "John Doe",
		Email:     "john@example.com",
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    user,
	})
}

func (app *Application) updateUserHandler(c *gin.Context) {
	id := c.Param("id")
	
	var req struct {
		Name  string `json:"name"`
		Email string `json:"email"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, Response{
			Success: false,
			Error:   "Invalid request: " + err.Error(),
		})
		return
	}
	
	// In a real app, this would update the database
	user := models.User{
		ID:        id,
		Name:      req.Name,
		Email:     req.Email,
		UpdatedAt: time.Now(),
	}
	
{{- if ne .MessageQueue "none"}}
	// Publish user updated event
	if app.events != nil {
		event := events.NewEvent("user.updated", "api", map[string]interface{}{
			"user_id": user.ID,
			"name":    user.Name,
			"email":   user.Email,
		})
		
		if err := app.events.Publish(c.Request.Context(), "user.events", event); err != nil {
			app.logger.Error("Failed to publish user updated event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    user,
	})
}

func (app *Application) deleteUserHandler(c *gin.Context) {
	id := c.Param("id")
	
	// In a real app, this would delete from database
	app.logger.Info("Deleting user", "id", id)
	
{{- if ne .MessageQueue "none"}}
	// Publish user deleted event
	if app.events != nil {
		event := events.NewEvent("user.deleted", "api", map[string]interface{}{
			"user_id": id,
		})
		
		if err := app.events.Publish(c.Request.Context(), "user.events", event); err != nil {
			app.logger.Error("Failed to publish user deleted event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    map[string]string{"message": "User deleted successfully"},
	})
}

// Notification handlers

func (app *Application) listNotificationsHandler(c *gin.Context) {
	// Parse query parameters
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	perPage, _ := strconv.Atoi(c.DefaultQuery("per_page", "10"))
	
	// In a real app, this would query the database
	notifications := []models.Notification{
		{
			ID:      uuid.New().String(),
			UserID:  uuid.New().String(),
			Type:    "email",
			Message: "Welcome to {{.ProjectName}}!",
			Status:  "sent",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}
	
	response := Response{
		Success: true,
		Data:    notifications,
		Meta: &Meta{
			Page:       page,
			PerPage:    perPage,
			Total:      len(notifications),
			TotalPages: (len(notifications) + perPage - 1) / perPage,
		},
	}
	
	c.JSON(http.StatusOK, response)
}

func (app *Application) createNotificationHandler(c *gin.Context) {
	var req struct {
		UserID  string `json:"user_id" binding:"required"`
		Type    string `json:"type" binding:"required"`
		Message string `json:"message" binding:"required"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, Response{
			Success: false,
			Error:   "Invalid request: " + err.Error(),
		})
		return
	}
	
	notification := models.Notification{
		ID:        uuid.New().String(),
		UserID:    req.UserID,
		Type:      req.Type,
		Message:   req.Message,
		Status:    "pending",
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	
{{- if ne .MessageQueue "none"}}
	// Publish notification created event
	if app.events != nil {
		event := events.NewEvent("notification.created", "api", map[string]interface{}{
			"notification_id": notification.ID,
			"user_id":         notification.UserID,
			"type":            notification.Type,
			"message":         notification.Message,
		})
		
		if err := app.events.Publish(c.Request.Context(), "notification.events", event); err != nil {
			app.logger.Error("Failed to publish notification created event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusCreated, Response{
		Success: true,
		Data:    notification,
	})
}

func (app *Application) getNotificationHandler(c *gin.Context) {
	id := c.Param("id")
	
	// In a real app, this would query the database
	notification := models.Notification{
		ID:        id,
		UserID:    uuid.New().String(),
		Type:      "email",
		Message:   "Welcome to {{.ProjectName}}!",
		Status:    "sent",
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    notification,
	})
}

func (app *Application) updateNotificationHandler(c *gin.Context) {
	id := c.Param("id")
	
	var req struct {
		Status string `json:"status"`
	}
	
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, Response{
			Success: false,
			Error:   "Invalid request: " + err.Error(),
		})
		return
	}
	
	// In a real app, this would update the database
	notification := models.Notification{
		ID:        id,
		Status:    req.Status,
		UpdatedAt: time.Now(),
	}
	
{{- if ne .MessageQueue "none"}}
	// Publish notification updated event
	if app.events != nil {
		event := events.NewEvent("notification.updated", "api", map[string]interface{}{
			"notification_id": notification.ID,
			"status":          notification.Status,
		})
		
		if err := app.events.Publish(c.Request.Context(), "notification.events", event); err != nil {
			app.logger.Error("Failed to publish notification updated event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    notification,
	})
}

func (app *Application) deleteNotificationHandler(c *gin.Context) {
	id := c.Param("id")
	
	// In a real app, this would delete from database
	app.logger.Info("Deleting notification", "id", id)
	
{{- if ne .MessageQueue "none"}}
	// Publish notification deleted event
	if app.events != nil {
		event := events.NewEvent("notification.deleted", "api", map[string]interface{}{
			"notification_id": id,
		})
		
		if err := app.events.Publish(c.Request.Context(), "notification.events", event); err != nil {
			app.logger.Error("Failed to publish notification deleted event", "error", err)
		}
	}
{{- end}}
	
	c.JSON(http.StatusOK, Response{
		Success: true,
		Data:    map[string]string{"message": "Notification deleted successfully"},
	})
}

{{- else if eq .Framework "echo"}}
// Echo framework handlers - similar structure but using echo.Context
func (app *Application) healthHandler(c echo.Context) error {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now().UTC(),
			"service":   "{{.ProjectName}}-api",
			"version":   app.config.App.Version,
		},
	}
	return c.JSON(http.StatusOK, response)
}

func (app *Application) readinessHandler(c echo.Context) error {
	checks := make(map[string]interface{})
	
{{- if ne .DatabaseType "none"}}
	if app.db != nil {
		if err := app.db.Health(c.Request().Context()); err != nil {
			checks["database"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			return c.JSON(http.StatusServiceUnavailable, Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
		}
		checks["database"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}

{{- if ne .MessageQueue "none"}}
	if app.events != nil {
		if err := app.events.Health(c.Request().Context()); err != nil {
			checks["events"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			return c.JSON(http.StatusServiceUnavailable, Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
		}
		checks["events"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}
	
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "ready",
			"checks": checks,
		},
	}
	return c.JSON(http.StatusOK, response)
}

func (app *Application) livenessHandler(c echo.Context) error {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "alive",
			"uptime": time.Since(app.startTime).String(),
		},
	}
	return c.JSON(http.StatusOK, response)
}

// Echo user handlers (similar pattern to Gin but using echo.Context)
func (app *Application) listUsersHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) createUserHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusCreated, Response{Success: true})
}

func (app *Application) getUserHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) updateUserHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) deleteUserHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

// Echo notification handlers
func (app *Application) listNotificationsHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) createNotificationHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusCreated, Response{Success: true})
}

func (app *Application) getNotificationHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) updateNotificationHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

func (app *Application) deleteNotificationHandler(c echo.Context) error {
	// Implementation similar to Gin version
	// ... (abbreviated for brevity)
	return c.JSON(http.StatusOK, Response{Success: true})
}

{{- else if eq .Framework "fiber"}}
// Fiber framework handlers - similar structure but using fiber.Ctx
func (app *Application) healthHandler(c *fiber.Ctx) error {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now().UTC(),
			"service":   "{{.ProjectName}}-api",
			"version":   app.config.App.Version,
		},
	}
	return c.JSON(response)
}

func (app *Application) readinessHandler(c *fiber.Ctx) error {
	checks := make(map[string]interface{})
	
{{- if ne .DatabaseType "none"}}
	if app.db != nil {
		if err := app.db.Health(c.Context()); err != nil {
			checks["database"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			return c.Status(http.StatusServiceUnavailable).JSON(Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
		}
		checks["database"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}

{{- if ne .MessageQueue "none"}}
	if app.events != nil {
		if err := app.events.Health(c.Context()); err != nil {
			checks["events"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			return c.Status(http.StatusServiceUnavailable).JSON(Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
		}
		checks["events"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}
	
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "ready",
			"checks": checks,
		},
	}
	return c.JSON(response)
}

func (app *Application) livenessHandler(c *fiber.Ctx) error {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "alive",
			"uptime": time.Since(app.startTime).String(),
		},
	}
	return c.JSON(response)
}

func (app *Application) errorHandler(c *fiber.Ctx, err error) error {
	code := fiber.StatusInternalServerError
	if e, ok := err.(*fiber.Error); ok {
		code = e.Code
	}
	
	app.logger.Error("Request error", "path", c.Path(), "method", c.Method(), "error", err)
	
	return c.Status(code).JSON(Response{
		Success: false,
		Error:   err.Error(),
	})
}

// Fiber user and notification handlers (similar pattern)
// ... (abbreviated for brevity, would follow same pattern as Gin but with fiber.Ctx)

{{- else if eq .Framework "chi"}}
// Chi framework handlers - similar structure but using http.ResponseWriter and *http.Request
func (app *Application) healthHandler(w http.ResponseWriter, r *http.Request) {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status":    "healthy",
			"timestamp": time.Now().UTC(),
			"service":   "{{.ProjectName}}-api",
			"version":   app.config.App.Version,
		},
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func (app *Application) readinessHandler(w http.ResponseWriter, r *http.Request) {
	checks := make(map[string]interface{})
	
{{- if ne .DatabaseType "none"}}
	if app.db != nil {
		if err := app.db.Health(r.Context()); err != nil {
			checks["database"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusServiceUnavailable)
			json.NewEncoder(w).Encode(Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
			return
		}
		checks["database"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}

{{- if ne .MessageQueue "none"}}
	if app.events != nil {
		if err := app.events.Health(r.Context()); err != nil {
			checks["events"] = map[string]interface{}{
				"status": "unhealthy",
				"error":  err.Error(),
			}
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusServiceUnavailable)
			json.NewEncoder(w).Encode(Response{
				Success: false,
				Error:   "Service not ready",
				Data:    checks,
			})
			return
		}
		checks["events"] = map[string]interface{}{"status": "healthy"}
	}
{{- end}}
	
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "ready",
			"checks": checks,
		},
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func (app *Application) livenessHandler(w http.ResponseWriter, r *http.Request) {
	response := Response{
		Success: true,
		Data: map[string]interface{}{
			"status": "alive",
			"uptime": time.Since(app.startTime).String(),
		},
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// Chi user and notification handlers (similar pattern)
// ... (abbreviated for brevity, would follow same pattern but with http.ResponseWriter and *http.Request)

{{- end}}