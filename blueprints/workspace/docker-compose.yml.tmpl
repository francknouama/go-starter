version: '3.8'

services:
  # Web API Service
  api:
    build:
      context: .
      dockerfile: cmd/api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - {{upper .ProjectName}}_APP_VERSION=1.0.0
      - {{upper .ProjectName}}_APP_ENVIRONMENT=development
      - {{upper .ProjectName}}_SERVER_PORT=8080
      - {{upper .ProjectName}}_LOGGER_LEVEL=debug
      - {{upper .ProjectName}}_LOGGER_FORMAT=console
{{- if ne .DatabaseType "none"}}
      - {{upper .ProjectName}}_DATABASE_HOST={{.DatabaseType}}
      - {{upper .ProjectName}}_DATABASE_PORT={{if eq .DatabaseType "postgres"}}5432{{else if eq .DatabaseType "mysql"}}3306{{else if eq .DatabaseType "mongodb"}}27017{{else}}0{{end}}
      - {{upper .ProjectName}}_DATABASE_NAME={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_USER={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_PASSWORD=password
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_HOST={{.MessageQueue}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_PORT={{if eq .MessageQueue "redis"}}6379{{else if eq .MessageQueue "nats"}}4222{{else if eq .MessageQueue "kafka"}}9092{{else if eq .MessageQueue "rabbitmq"}}5672{{end}}
{{- end}}
    depends_on:
{{- if ne .DatabaseType "none"}}
      - {{.DatabaseType}}
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{.MessageQueue}}
{{- end}}
    networks:
      - {{.ProjectName}}-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: .
      dockerfile: cmd/user-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - {{upper .ProjectName}}_APP_VERSION=1.0.0
      - {{upper .ProjectName}}_APP_ENVIRONMENT=development
      - {{upper .ProjectName}}_SERVER_PORT=8081
      - {{upper .ProjectName}}_LOGGER_LEVEL=debug
      - {{upper .ProjectName}}_LOGGER_FORMAT=console
{{- if ne .DatabaseType "none"}}
      - {{upper .ProjectName}}_DATABASE_HOST={{.DatabaseType}}
      - {{upper .ProjectName}}_DATABASE_PORT={{if eq .DatabaseType "postgres"}}5432{{else if eq .DatabaseType "mysql"}}3306{{else if eq .DatabaseType "mongodb"}}27017{{else}}0{{end}}
      - {{upper .ProjectName}}_DATABASE_NAME={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_USER={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_PASSWORD=password
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_HOST={{.MessageQueue}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_PORT={{if eq .MessageQueue "redis"}}6379{{else if eq .MessageQueue "nats"}}4222{{else if eq .MessageQueue "kafka"}}9092{{else if eq .MessageQueue "rabbitmq"}}5672{{end}}
{{- end}}
    depends_on:
{{- if ne .DatabaseType "none"}}
      - {{.DatabaseType}}
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{.MessageQueue}}
{{- end}}
    networks:
      - {{.ProjectName}}-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: cmd/notification-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - {{upper .ProjectName}}_APP_VERSION=1.0.0
      - {{upper .ProjectName}}_APP_ENVIRONMENT=development
      - {{upper .ProjectName}}_SERVER_PORT=8082
      - {{upper .ProjectName}}_LOGGER_LEVEL=debug
      - {{upper .ProjectName}}_LOGGER_FORMAT=console
{{- if ne .DatabaseType "none"}}
      - {{upper .ProjectName}}_DATABASE_HOST={{.DatabaseType}}
      - {{upper .ProjectName}}_DATABASE_PORT={{if eq .DatabaseType "postgres"}}5432{{else if eq .DatabaseType "mysql"}}3306{{else if eq .DatabaseType "mongodb"}}27017{{else}}0{{end}}
      - {{upper .ProjectName}}_DATABASE_NAME={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_USER={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_PASSWORD=password
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_HOST={{.MessageQueue}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_PORT={{if eq .MessageQueue "redis"}}6379{{else if eq .MessageQueue "nats"}}4222{{else if eq .MessageQueue "kafka"}}9092{{else if eq .MessageQueue "rabbitmq"}}5672{{end}}
{{- end}}
    depends_on:
{{- if ne .DatabaseType "none"}}
      - {{.DatabaseType}}
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{.MessageQueue}}
{{- end}}
    networks:
      - {{.ProjectName}}-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: cmd/worker/Dockerfile
    environment:
      - {{upper .ProjectName}}_APP_VERSION=1.0.0
      - {{upper .ProjectName}}_APP_ENVIRONMENT=development
      - {{upper .ProjectName}}_LOGGER_LEVEL=debug
      - {{upper .ProjectName}}_LOGGER_FORMAT=console
      - {{upper .ProjectName}}_WORKER_COUNT=3
      - {{upper .ProjectName}}_WORKER_MAX_RETRIES=3
      - {{upper .ProjectName}}_WORKER_RETRY_DELAY=30
      - {{upper .ProjectName}}_WORKER_SHUTDOWN_GRACE=30
      - {{upper .ProjectName}}_WORKER_HEALTH_PORT=8083
{{- if ne .DatabaseType "none"}}
      - {{upper .ProjectName}}_DATABASE_HOST={{.DatabaseType}}
      - {{upper .ProjectName}}_DATABASE_PORT={{if eq .DatabaseType "postgres"}}5432{{else if eq .DatabaseType "mysql"}}3306{{else if eq .DatabaseType "mongodb"}}27017{{else}}0{{end}}
      - {{upper .ProjectName}}_DATABASE_NAME={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_USER={{.ProjectName}}
      - {{upper .ProjectName}}_DATABASE_PASSWORD=password
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_HOST={{.MessageQueue}}
      - {{upper .ProjectName}}_MESSAGE_QUEUE_PORT={{if eq .MessageQueue "redis"}}6379{{else if eq .MessageQueue "nats"}}4222{{else if eq .MessageQueue "kafka"}}9092{{else if eq .MessageQueue "rabbitmq"}}5672{{end}}
{{- end}}
    depends_on:
{{- if ne .DatabaseType "none"}}
      - {{.DatabaseType}}
{{- end}}
{{- if ne .MessageQueue "none"}}
      - {{.MessageQueue}}
{{- end}}
    networks:
      - {{.ProjectName}}-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

{{- if eq .DatabaseType "postgres"}}
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB={{.ProjectName}}
      - POSTGRES_USER={{.ProjectName}}
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{.ProjectName}} -d {{.ProjectName}}"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .DatabaseType "mysql"}}
  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE={{.ProjectName}}
      - MYSQL_USER={{.ProjectName}}
      - MYSQL_PASSWORD=password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "{{.ProjectName}}", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .DatabaseType "mongodb"}}
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME={{.ProjectName}}
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE={{.ProjectName}}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
{{- end}}

{{- if eq .MessageQueue "redis"}}
  # Redis Message Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .MessageQueue "nats"}}
  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    ports:
      - "4222:4222"
      - "8222:8222"  # HTTP monitoring port
    command: ["-js", "-m", "8222"]
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .MessageQueue "rabbitmq"}}
  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER={{.ProjectName}}
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .MessageQueue "kafka"}}
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped

  # Kafka Message Queue
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
{{- end}}

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - user-service
      - notification-service
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped

networks:
  {{.ProjectName}}-network:
    driver: bridge

volumes:
{{- if eq .DatabaseType "postgres"}}
  postgres_data:
{{- else if eq .DatabaseType "mysql"}}
  mysql_data:
{{- else if eq .DatabaseType "mongodb"}}
  mongodb_data:
{{- end}}
{{- if eq .MessageQueue "redis"}}
  redis_data:
{{- else if eq .MessageQueue "rabbitmq"}}
  rabbitmq_data:
{{- else if eq .MessageQueue "kafka"}}
  kafka_data:
{{- end}}
  prometheus_data:
  grafana_data: