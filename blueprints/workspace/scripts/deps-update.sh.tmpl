#!/bin/bash

# {{.ProjectName}} - Dependencies Update Script
# Updates Go dependencies for all modules in the workspace

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VERBOSE=${VERBOSE:-false}

# Function to print colored output
print_status() {
    echo -e "${GREEN}[DEPS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Update Go dependencies for all modules in the {{.ProjectName}} workspace

OPTIONS:
    -u, --upgrade        Upgrade to latest compatible versions
    -m, --major          Allow major version upgrades (use with caution)
    -t, --tidy           Run go mod tidy after updates
    -v, --verbose        Enable verbose output
    -c, --check          Check for outdated dependencies only
    -s, --security       Check for security vulnerabilities
    -h, --help           Show this help message

EXAMPLES:
    # Check for outdated dependencies
    $0 --check

    # Update to latest compatible versions
    $0 --upgrade --tidy

    # Check for security vulnerabilities
    $0 --security

    # Full update with major version upgrades
    $0 --upgrade --major --tidy

EOF
}

# Parse command line arguments
UPGRADE=false
ALLOW_MAJOR=false
RUN_TIDY=false
CHECK_ONLY=false
SECURITY_CHECK=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -u|--upgrade)
            UPGRADE=true
            shift
            ;;
        -m|--major)
            ALLOW_MAJOR=true
            shift
            ;;
        -t|--tidy)
            RUN_TIDY=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -c|--check)
            CHECK_ONLY=true
            shift
            ;;
        -s|--security)
            SECURITY_CHECK=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Verbose output
if [[ "$VERBOSE" == true ]]; then
    set -x
fi

print_info "{{.ProjectName}} Dependencies Management"
print_info "Workspace: $WORKSPACE_ROOT"

# Change to workspace root
cd "$WORKSPACE_ROOT"

# Check if required tools are available
check_tools() {
    local missing_tools=()
    
    if ! command -v go &> /dev/null; then
        missing_tools+=("go")
    fi
    
    if [[ "$CHECK_ONLY" == true ]] && ! command -v go-mod-outdated &> /dev/null; then
        print_warning "go-mod-outdated not found. Installing..."
        go install github.com/psampaz/go-mod-outdated@latest || missing_tools+=("go-mod-outdated")
    fi
    
    if [[ "$SECURITY_CHECK" == true ]] && ! command -v govulncheck &> /dev/null; then
        print_warning "govulncheck not found. Installing..."
        go install golang.org/x/vuln/cmd/govulncheck@latest || missing_tools+=("govulncheck")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        print_info "Please install missing tools and try again."
        exit 1
    fi
}

# Modules to update (in dependency order)
MODULES=(
    "tools"
    "pkg/shared"
    "pkg/models"
{{- if ne .DatabaseType "none"}}
    "pkg/storage"
{{- end}}
{{- if ne .MessageQueue "none"}}
    "pkg/events"
{{- end}}
{{- if .EnableWebAPI}}
    "cmd/api"
{{- end}}
{{- if .EnableCLI}}
    "cmd/cli"
{{- end}}
{{- if .EnableWorker}}
    "cmd/worker"
{{- end}}
{{- if .EnableMicroservices}}
    "services/user-service"
    "services/notification-service"
{{- end}}
{{- if .EnableTesting}}
    "tests/integration"
{{- end}}
)

# Function to check outdated dependencies
check_outdated() {
    local module=$1
    local module_name=$(basename "$module")
    
    print_status "Checking outdated dependencies in: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    if [[ ! -f "go.mod" ]]; then
        print_warning "No go.mod found in $module, skipping"
        cd - > /dev/null
        return 0
    fi
    
    print_status "  → Analyzing dependencies..."
    
    # Check for outdated dependencies
    if command -v go-mod-outdated &> /dev/null; then
        echo ""
        echo "Outdated dependencies in $module_name:"
        go list -u -m -json all | go-mod-outdated -update -direct || true
        echo ""
    else
        # Fallback to basic go list
        go list -u -m all | grep -v "^$module" | while read -r line; do
            if [[ "$line" == *"["* ]]; then
                echo "  📦 $line"
            fi
        done
    fi
    
    cd - > /dev/null
    return 0
}

# Function to update dependencies
update_module() {
    local module=$1
    local module_name=$(basename "$module")
    
    print_status "Updating dependencies in: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    if [[ ! -f "go.mod" ]]; then
        print_warning "No go.mod found in $module, skipping"
        cd - > /dev/null
        return 0
    fi
    
    print_status "  → Downloading latest dependencies..."
    go mod download
    
    if [[ "$UPGRADE" == true ]]; then
        print_status "  → Upgrading dependencies..."
        
        if [[ "$ALLOW_MAJOR" == true ]]; then
            print_warning "  → Allowing major version upgrades (may break compatibility)"
            go get -u ./...
        else
            # Update to latest compatible versions (patch and minor)
            go get -u=patch ./...
        fi
    fi
    
    if [[ "$RUN_TIDY" == true ]]; then
        print_status "  → Running go mod tidy..."
        go mod tidy
    fi
    
    # Verify that everything still compiles
    print_status "  → Verifying compilation..."
    if ! go build ./... &>/dev/null; then
        print_error "  ❌ Compilation failed after dependency update"
        cd - > /dev/null
        return 1
    fi
    
    cd - > /dev/null
    print_status "✅ $module_name dependencies updated successfully"
    return 0
}

# Function to check security vulnerabilities
check_security() {
    local module=$1
    local module_name=$(basename "$module")
    
    print_status "Checking security vulnerabilities in: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    if [[ ! -f "go.mod" ]]; then
        print_warning "No go.mod found in $module, skipping"
        cd - > /dev/null
        return 0
    fi
    
    print_status "  → Running security scan..."
    
    if command -v govulncheck &> /dev/null; then
        if govulncheck ./...; then
            print_status "  ✅ No security vulnerabilities found"
        else
            print_warning "  ⚠️  Security vulnerabilities detected"
        fi
    else
        print_warning "  govulncheck not available, skipping security check"
    fi
    
    cd - > /dev/null
    return 0
}

# Function to sync workspace after updates
sync_workspace() {
    print_status "Syncing workspace..."
    
    if [[ -f "go.work" ]]; then
        go work sync
        print_status "✅ Workspace synchronized"
    else
        print_warning "No go.work file found, skipping workspace sync"
    fi
}

# Function to generate dependency report
generate_report() {
    print_status "Generating dependency report..."
    
    local report_file="dependency-report.txt"
    
    cat > "$report_file" << EOF
# {{.ProjectName}} Dependency Report
Generated: $(date)

## Workspace Modules

EOF
    
    for module in "${MODULES[@]}"; do
        if [[ -d "$module" && -f "$module/go.mod" ]]; then
            echo "### $module" >> "$report_file"
            echo "" >> "$report_file"
            cd "$module"
            echo "\`\`\`" >> "../$report_file"
            go list -m all >> "../$report_file"
            echo "\`\`\`" >> "../$report_file"
            echo "" >> "../$report_file"
            cd - > /dev/null
        fi
    done
    
    print_info "Dependency report saved to: $report_file"
}

# Main execution
check_tools

failed_modules=()

print_status "Starting dependency management..."

if [[ "$CHECK_ONLY" == true ]]; then
    print_status "Checking for outdated dependencies..."
    
    for module in "${MODULES[@]}"; do
        check_outdated "$module"
    done
    
    generate_report
    
elif [[ "$SECURITY_CHECK" == true ]]; then
    print_status "Checking for security vulnerabilities..."
    
    for module in "${MODULES[@]}"; do
        if ! check_security "$module"; then
            failed_modules+=("$module")
        fi
    done
    
else
    print_status "Updating dependencies..."
    
    for module in "${MODULES[@]}"; do
        if ! update_module "$module"; then
            failed_modules+=("$module")
        fi
    done
    
    # Sync workspace after all updates
    sync_workspace
    
    # Generate report
    generate_report
fi

# Report results
echo ""
if [[ ${#failed_modules[@]} -eq 0 ]]; then
    print_status "🎉 Dependency management completed successfully!"
    
    echo ""
    print_info "Summary:"
    echo "  • Modules processed: ${#MODULES[@]}"
    
    if [[ "$CHECK_ONLY" == true ]]; then
        echo "  • Operation: Outdated dependency check"
    elif [[ "$SECURITY_CHECK" == true ]]; then
        echo "  • Operation: Security vulnerability check"
    else
        echo "  • Operation: Dependency update"
        
        if [[ "$UPGRADE" == true ]]; then
            echo "  • Upgrade level: $([ "$ALLOW_MAJOR" == true ] && echo "Major versions allowed" || echo "Compatible versions only")"
        fi
        
        if [[ "$RUN_TIDY" == true ]]; then
            echo "  • go mod tidy: Executed"
        fi
    fi
    
    exit 0
else
    print_error "❌ Dependency management failed for modules:"
    for module in "${failed_modules[@]}"; do
        echo "  • $module"
    done
    
    echo ""
    print_info "Please check the failed modules manually."
    
    exit 1
fi