#!/bin/bash

# {{.ProjectName}} - Build All Modules Script
# Builds all modules in the workspace in dependency order

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BUILD_OUTPUT="${WORKSPACE_ROOT}/bin"
PARALLEL_JOBS=${PARALLEL_JOBS:-4}
VERBOSE=${VERBOSE:-false}

# Function to print colored output
print_status() {
    echo -e "${GREEN}[BUILD]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Build all modules in the {{.ProjectName}} workspace

OPTIONS:
    -o, --output DIR     Output directory for binaries [default: bin]
    -j, --jobs NUM       Number of parallel jobs [default: 4]
    -v, --verbose        Enable verbose output
    -c, --clean          Clean before building
    -r, --release        Build for release (optimized)
    -t, --target OS/ARCH Target platform (e.g., linux/amd64)
    -h, --help           Show this help message

EXAMPLES:
    # Build all modules
    $0

    # Clean and build with verbose output
    $0 --clean --verbose

    # Build for Linux AMD64
    $0 --target linux/amd64

    # Release build
    $0 --release

EOF
}

# Parse command line arguments
CLEAN=false
RELEASE=false
TARGET=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -o|--output)
            BUILD_OUTPUT="$2"
            shift 2
            ;;
        -j|--jobs)
            PARALLEL_JOBS="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        -r|--release)
            RELEASE=true
            shift
            ;;
        -t|--target)
            TARGET="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Verbose output
if [[ "$VERBOSE" == true ]]; then
    set -x
fi

print_info "{{.ProjectName}} Workspace Build"
print_info "Workspace: $WORKSPACE_ROOT"
print_info "Output: $BUILD_OUTPUT"
print_info "Jobs: $PARALLEL_JOBS"

# Change to workspace root
cd "$WORKSPACE_ROOT"

# Clean if requested
if [[ "$CLEAN" == true ]]; then
    print_status "Cleaning previous builds..."
    rm -rf "$BUILD_OUTPUT"
    go clean -cache
    for module in pkg/shared pkg/models {{- if ne .DatabaseType "none"}}pkg/storage{{- end}}{{- if ne .MessageQueue "none"}} pkg/events{{- end}}{{- if .EnableWebAPI}} cmd/api{{- end}}{{- if .EnableCLI}} cmd/cli{{- end}}{{- if .EnableWorker}} cmd/worker{{- end}}{{- if .EnableMicroservices}} services/user-service services/notification-service{{- end}}; do
        if [[ -d "$module" ]]; then
            print_status "  ‚Üí Cleaning $module"
            cd "$module" && go clean && cd - > /dev/null
        fi
    done
    print_status "Clean completed"
fi

# Create output directory
mkdir -p "$BUILD_OUTPUT"

# Build flags
BUILD_FLAGS=()
if [[ "$RELEASE" == true ]]; then
    BUILD_FLAGS+=("-ldflags=-s -w" "-trimpath")
    print_info "Building in release mode"
else
    BUILD_FLAGS+=("-race")
    print_info "Building in development mode"
fi

# Target platform
if [[ -n "$TARGET" ]]; then
    IFS='/' read -r GOOS GOARCH <<< "$TARGET"
    export GOOS GOARCH
    print_info "Building for $GOOS/$GOARCH"
fi

# Module build order (based on dependencies)
MODULES=(
    "pkg/shared"
    "pkg/models"
{{- if ne .DatabaseType "none"}}
    "pkg/storage"
{{- end}}
{{- if ne .MessageQueue "none"}}
    "pkg/events"
{{- end}}
)

# Service modules (that produce binaries)
SERVICE_MODULES=(
{{- if .EnableWebAPI}}
    "cmd/api"
{{- end}}
{{- if .EnableCLI}}
    "cmd/cli"
{{- end}}
{{- if .EnableWorker}}
    "cmd/worker"
{{- end}}
{{- if .EnableMicroservices}}
    "services/user-service"
    "services/notification-service"
{{- end}}
)

# Function to build a library module
build_library() {
    local module=$1
    local module_name=$(basename "$module")
    
    print_status "Building library: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    # Build the module (this validates it but doesn't produce a binary)
    if go build "${BUILD_FLAGS[@]}" ./...; then
        print_status "‚úÖ $module_name built successfully"
    else
        print_error "‚ùå Failed to build $module_name"
        return 1
    fi
    
    cd - > /dev/null
    return 0
}

# Function to build a service module
build_service() {
    local module=$1
    local module_name=$(basename "$module")
    local binary_name="${module_name}"
    
    # Special naming for services
    if [[ "$module" == services/* ]]; then
        binary_name="$module_name"
    elif [[ "$module" == cmd/* ]]; then
        binary_name="$module_name"
    fi
    
    print_status "Building service: $module_name ‚Üí $binary_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    # Build the service binary
    local output_path="../../$BUILD_OUTPUT/$binary_name"
    if [[ -n "$TARGET" ]]; then
        output_path="${output_path}-${GOOS}-${GOARCH}"
    fi
    
    if go build "${BUILD_FLAGS[@]}" -o "$output_path" ./main.go; then
        chmod +x "$output_path"
        print_status "‚úÖ $module_name ‚Üí $(basename "$output_path")"
    else
        print_error "‚ùå Failed to build $module_name"
        return 1
    fi
    
    cd - > /dev/null
    return 0
}

# Sync workspace
print_status "Syncing workspace..."
go work sync

# Build library modules first (in order)
print_status "Building library modules..."
for module in "${MODULES[@]}"; do
    if ! build_library "$module"; then
        print_error "Build failed for library module: $module"
        exit 1
    fi
done

# Build service modules (can be done in parallel)
print_status "Building service modules..."
failed_builds=()

if [[ "$PARALLEL_JOBS" -gt 1 ]] && [[ ${#SERVICE_MODULES[@]} -gt 1 ]]; then
    print_info "Building services in parallel (jobs: $PARALLEL_JOBS)"
    
    # Use xargs for parallel execution
    printf '%s\n' "${SERVICE_MODULES[@]}" | xargs -I {} -P "$PARALLEL_JOBS" bash -c '
        source "'"$0"'" && build_service "{}"
        echo $? > /tmp/build_result_$(basename "{}")
    ' "$0"
    
    # Check results
    for module in "${SERVICE_MODULES[@]}"; do
        result_file="/tmp/build_result_$(basename "$module")"
        if [[ -f "$result_file" ]]; then
            result=$(cat "$result_file")
            rm -f "$result_file"
            if [[ "$result" != "0" ]]; then
                failed_builds+=("$module")
            fi
        else
            failed_builds+=("$module")
        fi
    done
else
    # Sequential build
    for module in "${SERVICE_MODULES[@]}"; do
        if ! build_service "$module"; then
            failed_builds+=("$module")
        fi
    done
fi

# Report results
echo ""
if [[ ${#failed_builds[@]} -eq 0 ]]; then
    print_status "üéâ All modules built successfully!"
    
    echo ""
    print_info "Built binaries:"
    if [[ -d "$BUILD_OUTPUT" ]]; then
        ls -la "$BUILD_OUTPUT/" | grep -v "^total" | while read -r line; do
            echo "  $line"
        done
    fi
    
    echo ""
    print_info "Usage examples:"
{{- if .EnableWebAPI}}
    echo "  ‚Ä¢ Start API server: $BUILD_OUTPUT/api"
{{- end}}
{{- if .EnableCLI}}
    echo "  ‚Ä¢ Use CLI tool: $BUILD_OUTPUT/cli --help"
{{- end}}
{{- if .EnableWorker}}
    echo "  ‚Ä¢ Start worker: $BUILD_OUTPUT/worker"
{{- end}}
{{- if .EnableMicroservices}}
    echo "  ‚Ä¢ Start user service: $BUILD_OUTPUT/user-service"
    echo "  ‚Ä¢ Start notification service: $BUILD_OUTPUT/notification-service"
{{- end}}
    
    exit 0
else
    print_error "‚ùå Build failed for modules:"
    for module in "${failed_builds[@]}"; do
        echo "  ‚Ä¢ $module"
    done
    exit 1
fi