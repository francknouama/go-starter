#!/bin/bash

# {{.ProjectName}} - Test All Modules Script
# Runs tests for all modules in the workspace

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
COVERAGE_DIR="${WORKSPACE_ROOT}/coverage"
VERBOSE=${VERBOSE:-false}
RACE=${RACE:-true}
SHORT=${SHORT:-false}

# Function to print colored output
print_status() {
    echo -e "${GREEN}[TEST]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Run tests for all modules in the {{.ProjectName}} workspace

OPTIONS:
    -c, --coverage       Generate coverage report
    -s, --short          Run only short tests (skip integration tests)
    -r, --race           Enable race detection [default: true]
    --no-race           Disable race detection
    -v, --verbose        Enable verbose output
    -f, --fail-fast     Stop on first failure
    -t, --timeout TIME  Test timeout [default: 10m]
    -p, --parallel NUM  Number of parallel tests [default: 4]
    -o, --output DIR    Coverage output directory [default: coverage]
    -h, --help          Show this help message

TEST TYPES:
    unit                Run unit tests only
    integration         Run integration tests only
    all                 Run all tests [default]

EXAMPLES:
    # Run all tests with coverage
    $0 --coverage

    # Run only unit tests
    $0 unit

    # Run tests with verbose output and no race detection
    $0 --verbose --no-race

    # Run short tests only
    $0 --short

EOF
}

# Parse command line arguments
COVERAGE=false
FAIL_FAST=false
TIMEOUT="10m"
PARALLEL=4
TEST_TYPE="all"

while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--coverage)
            COVERAGE=true
            shift
            ;;
        -s|--short)
            SHORT=true
            shift
            ;;
        -r|--race)
            RACE=true
            shift
            ;;
        --no-race)
            RACE=false
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -f|--fail-fast)
            FAIL_FAST=true
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        -p|--parallel)
            PARALLEL="$2"
            shift 2
            ;;
        -o|--output)
            COVERAGE_DIR="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        unit|integration|all)
            TEST_TYPE="$1"
            shift
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Verbose output
if [[ "$VERBOSE" == true ]]; then
    set -x
fi

print_info "{{.ProjectName}} Workspace Tests"
print_info "Workspace: $WORKSPACE_ROOT"
print_info "Test Type: $TEST_TYPE"
print_info "Coverage: $COVERAGE"
print_info "Race Detection: $RACE"
print_info "Short Tests: $SHORT"

# Change to workspace root
cd "$WORKSPACE_ROOT"

# Create coverage directory if needed
if [[ "$COVERAGE" == true ]]; then
    mkdir -p "$COVERAGE_DIR"
    print_info "Coverage output: $COVERAGE_DIR"
fi

# Test modules (in dependency order)
MODULES=(
    "pkg/shared"
    "pkg/models"
{{- if ne .DatabaseType "none"}}
    "pkg/storage"
{{- end}}
{{- if ne .MessageQueue "none"}}
    "pkg/events"
{{- end}}
{{- if .EnableWebAPI}}
    "cmd/api"
{{- end}}
{{- if .EnableCLI}}
    "cmd/cli"
{{- end}}
{{- if .EnableWorker}}
    "cmd/worker"
{{- end}}
{{- if .EnableMicroservices}}
    "services/user-service"
    "services/notification-service"
{{- end}}
)

{{- if .EnableTesting}}
# Integration test modules
INTEGRATION_MODULES=(
    "tests/integration"
)
{{- end}}

# Build test flags
TEST_FLAGS=("-timeout" "$TIMEOUT" "-parallel" "$PARALLEL")

if [[ "$VERBOSE" == true ]]; then
    TEST_FLAGS+=("-v")
fi

if [[ "$RACE" == true ]]; then
    TEST_FLAGS+=("-race")
fi

if [[ "$SHORT" == true ]]; then
    TEST_FLAGS+=("-short")
fi

if [[ "$FAIL_FAST" == true ]]; then
    TEST_FLAGS+=("-failfast")
fi

# Function to run tests for a module
test_module() {
    local module=$1
    local module_name=$(basename "$module")
    local coverage_file=""
    
    print_status "Testing module: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    # Check if module has tests
    if ! find . -name "*_test.go" -type f | head -1 | grep -q .; then
        print_warning "No tests found in $module_name, skipping"
        cd - > /dev/null
        return 0
    fi
    
    # Set up coverage if requested
    local test_cmd=("go" "test" "${TEST_FLAGS[@]}")
    if [[ "$COVERAGE" == true ]]; then
        coverage_file="../$COVERAGE_DIR/${module_name}.out"
        test_cmd+=("-coverprofile=$coverage_file")
    fi
    
    test_cmd+=("./...")
    
    # Run tests
    if "${test_cmd[@]}"; then
        print_status "‚úÖ $module_name tests passed"
        
        # Show coverage if available
        if [[ "$COVERAGE" == true && -f "$coverage_file" ]]; then
            local coverage_pct=$(go tool cover -func="$coverage_file" | grep total | awk '{print $3}')
            print_info "  Coverage: $coverage_pct"
        fi
    else
        print_error "‚ùå $module_name tests failed"
        cd - > /dev/null
        return 1
    fi
    
    cd - > /dev/null
    return 0
}

# Function to run integration tests
test_integration() {
{{- if .EnableTesting}}
    print_status "Running integration tests..."
    
    for module in "${INTEGRATION_MODULES[@]}"; do
        if ! test_module "$module"; then
            return 1
        fi
    done
{{- else}}
    print_warning "Integration tests not enabled in this workspace"
{{- end}}
    return 0
}

# Function to run unit tests
test_unit() {
    print_status "Running unit tests..."
    
    for module in "${MODULES[@]}"; do
        if ! test_module "$module"; then
            return 1
        fi
    done
    
    return 0
}

# Function to generate combined coverage report
generate_coverage_report() {
    if [[ "$COVERAGE" != true ]]; then
        return 0
    fi
    
    print_status "Generating combined coverage report..."
    
    # Find all coverage files
    local coverage_files=()
    while IFS= read -r -d '' file; do
        coverage_files+=("$file")
    done < <(find "$COVERAGE_DIR" -name "*.out" -print0)
    
    if [[ ${#coverage_files[@]} -eq 0 ]]; then
        print_warning "No coverage files found"
        return 0
    fi
    
    # Combine coverage files
    local combined_coverage="$COVERAGE_DIR/coverage.out"
    echo "mode: atomic" > "$combined_coverage"
    
    for file in "${coverage_files[@]}"; do
        if [[ -f "$file" ]]; then
            tail -n +2 "$file" >> "$combined_coverage"
        fi
    done
    
    # Generate HTML report
    local html_report="$COVERAGE_DIR/coverage.html"
    if go tool cover -html="$combined_coverage" -o "$html_report"; then
        print_status "HTML coverage report: $html_report"
    fi
    
    # Calculate total coverage
    local total_coverage=$(go tool cover -func="$combined_coverage" | grep total | awk '{print $3}')
    print_info "Total coverage: $total_coverage"
    
    # Check coverage threshold
    local coverage_num=$(echo "$total_coverage" | sed 's/%//')
    local threshold=80
    
    if (( $(echo "$coverage_num >= $threshold" | bc -l) )); then
        print_status "‚úÖ Coverage meets threshold ($threshold%)"
    else
        print_warning "‚ö†Ô∏è  Coverage below threshold: $total_coverage < $threshold%"
    fi
}

# Main execution
failed_modules=()

case "$TEST_TYPE" in
    "unit")
        if ! test_unit; then
            failed_modules+=("unit tests")
        fi
        ;;
    "integration")
        if ! test_integration; then
            failed_modules+=("integration tests")
        fi
        ;;
    "all")
        if ! test_unit; then
            failed_modules+=("unit tests")
        fi
        
        if ! test_integration; then
            failed_modules+=("integration tests")
        fi
        ;;
    *)
        print_error "Unknown test type: $TEST_TYPE"
        exit 1
        ;;
esac

# Generate coverage report
generate_coverage_report

# Report results
echo ""
if [[ ${#failed_modules[@]} -eq 0 ]]; then
    print_status "üéâ All tests passed!"
    
    if [[ "$COVERAGE" == true ]]; then
        echo ""
        print_info "Coverage files:"
        find "$COVERAGE_DIR" -name "*.out" -o -name "*.html" | while read -r file; do
            echo "  ‚Ä¢ $file"
        done
    fi
    
    exit 0
else
    print_error "‚ùå Test failures:"
    for module in "${failed_modules[@]}"; do
        echo "  ‚Ä¢ $module"
    done
    exit 1
fi