#!/bin/bash

# {{.ProjectName}} - Clean All Modules Script
# Cleans build artifacts and caches for all modules in the workspace

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKSPACE_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VERBOSE=${VERBOSE:-false}

# Function to print colored output
print_status() {
    echo -e "${GREEN}[CLEAN]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Clean build artifacts and caches for all modules in the {{.ProjectName}} workspace

OPTIONS:
    -f, --force          Force clean including vendor directories
    -c, --cache          Clean Go build and module caches
    -d, --docker         Clean Docker images and containers
    -v, --verbose        Enable verbose output
    -h, --help           Show this help message

EXAMPLES:
    # Basic clean
    $0

    # Force clean including vendor
    $0 --force

    # Clean everything including caches and Docker
    $0 --force --cache --docker

EOF
}

# Parse command line arguments
FORCE=false
CLEAN_CACHE=false
CLEAN_DOCKER=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            FORCE=true
            shift
            ;;
        -c|--cache)
            CLEAN_CACHE=true
            shift
            ;;
        -d|--docker)
            CLEAN_DOCKER=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Verbose output
if [[ "$VERBOSE" == true ]]; then
    set -x
fi

print_info "{{.ProjectName}} Workspace Cleanup"
print_info "Workspace: $WORKSPACE_ROOT"

# Change to workspace root
cd "$WORKSPACE_ROOT"

# Modules to clean (in reverse dependency order for safe cleanup)
MODULES=(
{{- if .EnableMicroservices}}
    "services/notification-service"
    "services/user-service"
{{- end}}
{{- if .EnableTesting}}
    "tests/integration"
{{- end}}
{{- if .EnableWorker}}
    "cmd/worker"
{{- end}}
{{- if .EnableCLI}}
    "cmd/cli"
{{- end}}
{{- if .EnableWebAPI}}
    "cmd/api"
{{- end}}
{{- if ne .MessageQueue "none"}}
    "pkg/events"
{{- end}}
{{- if ne .DatabaseType "none"}}
    "pkg/storage"
{{- end}}
    "pkg/models"
    "pkg/shared"
    "tools"
)

# Function to clean a module
clean_module() {
    local module=$1
    local module_name=$(basename "$module")
    
    print_status "Cleaning module: $module_name"
    
    if [[ ! -d "$module" ]]; then
        print_warning "Module $module does not exist, skipping"
        return 0
    fi
    
    cd "$module"
    
    # Clean Go build artifacts
    if command -v go &> /dev/null; then
        print_status "  ‚Üí Cleaning Go build artifacts"
        go clean -cache 2>/dev/null || true
        go clean -testcache 2>/dev/null || true
        go clean -modcache 2>/dev/null || true
        go clean -fuzzcache 2>/dev/null || true
        go clean ./... 2>/dev/null || true
    fi
    
    # Remove common build artifacts
    print_status "  ‚Üí Removing build artifacts"
    rm -rf bin/ || true
    rm -rf build/ || true
    rm -rf dist/ || true
    rm -rf target/ || true
    rm -rf *.exe || true
    rm -rf *.test || true
    rm -rf coverage.out || true
    rm -rf coverage.html || true
    rm -rf .coverage/ || true
    rm -rf profile.out || true
    rm -rf cpu.prof || true
    rm -rf mem.prof || true
    rm -rf trace.out || true
    
    # Remove IDE files
    print_status "  ‚Üí Removing IDE files"
    rm -rf .vscode/ || true
    rm -rf .idea/ || true
    rm -rf *.swp || true
    rm -rf *.swo || true
    rm -rf *~ || true
    rm -rf .DS_Store || true
    rm -rf Thumbs.db || true
    
    # Remove log files
    print_status "  ‚Üí Removing log files"
    rm -rf logs/ || true
    rm -rf *.log || true
    rm -rf *.log.* || true
    
    # Remove temporary files
    print_status "  ‚Üí Removing temporary files"
    rm -rf tmp/ || true
    rm -rf temp/ || true
    rm -rf .tmp/ || true
    rm -rf node_modules/ || true
    
    # Force clean including vendor (if requested)
    if [[ "$FORCE" == true ]]; then
        print_status "  ‚Üí Force cleaning vendor directory"
        rm -rf vendor/ || true
        
        # Remove downloaded dependencies
        if [[ -f "go.mod" ]]; then
            go mod download || true
        fi
    fi
    
    cd - > /dev/null
    print_status "‚úÖ $module_name cleaned successfully"
    return 0
}

# Function to clean workspace-level artifacts
clean_workspace() {
    print_status "Cleaning workspace-level artifacts"
    
    # Remove workspace build artifacts
    rm -rf bin/ || true
    rm -rf build/ || true
    rm -rf dist/ || true
    rm -rf release/ || true
    rm -rf artifacts/ || true
    
    # Remove IDE workspace files
    rm -rf .vscode/ || true
    rm -rf .idea/ || true
    rm -rf *.code-workspace || true
    
    # Remove OS files
    find . -name ".DS_Store" -delete 2>/dev/null || true
    find . -name "Thumbs.db" -delete 2>/dev/null || true
    
    # Remove backup files
    find . -name "*~" -delete 2>/dev/null || true
    find . -name "*.bak" -delete 2>/dev/null || true
    find . -name "*.orig" -delete 2>/dev/null || true
    
    print_status "‚úÖ Workspace artifacts cleaned"
}

# Function to clean Go caches
clean_go_caches() {
    print_status "Cleaning Go build and module caches"
    
    if command -v go &> /dev/null; then
        # Clean build cache
        go clean -cache || true
        
        # Clean test cache
        go clean -testcache || true
        
        # Clean fuzz cache
        go clean -fuzzcache || true
        
        # Note: We don't clean modcache as it's shared across projects
        # Users can run 'go clean -modcache' manually if needed
        
        print_status "‚úÖ Go caches cleaned"
    else
        print_warning "Go not found, skipping cache cleanup"
    fi
}

{{- if .EnableDocker}}
# Function to clean Docker artifacts
clean_docker() {
    print_status "Cleaning Docker images and containers"
    
    if command -v docker &> /dev/null; then
        # Stop and remove containers
        print_status "  ‚Üí Stopping containers"
        docker-compose down 2>/dev/null || true
        docker-compose -f docker-compose.dev.yml down 2>/dev/null || true
        
        # Remove images built for this project
        print_status "  ‚Üí Removing project images"
        docker images --filter "reference={{.ProjectName}}*" -q | xargs -r docker rmi -f 2>/dev/null || true
        
        # Remove dangling images
        print_status "  ‚Üí Removing dangling images"
        docker image prune -f 2>/dev/null || true
        
        # Remove unused volumes
        print_status "  ‚Üí Removing unused volumes"
        docker volume prune -f 2>/dev/null || true
        
        # Remove unused networks
        print_status "  ‚Üí Removing unused networks"
        docker network prune -f 2>/dev/null || true
        
        print_status "‚úÖ Docker artifacts cleaned"
    else
        print_warning "Docker not found, skipping Docker cleanup"
    fi
}
{{- end}}

# Main execution
failed_modules=()

print_status "Starting cleanup process..."

# Clean workspace-level artifacts first
clean_workspace

# Clean each module
for module in "${MODULES[@]}"; do
    if ! clean_module "$module"; then
        failed_modules+=("$module")
    fi
done

# Clean Go caches if requested
if [[ "$CLEAN_CACHE" == true ]]; then
    clean_go_caches
fi

{{- if .EnableDocker}}
# Clean Docker if requested
if [[ "$CLEAN_DOCKER" == true ]]; then
    clean_docker
fi
{{- end}}

# Report results
echo ""
if [[ ${#failed_modules[@]} -eq 0 ]]; then
    print_status "üéâ All modules cleaned successfully!"
    
    echo ""
    print_info "Cleanup summary:"
    echo "  ‚Ä¢ Modules cleaned: ${#MODULES[@]}"
    echo "  ‚Ä¢ Build artifacts removed"
    echo "  ‚Ä¢ IDE files removed"
    echo "  ‚Ä¢ Log files removed"
    echo "  ‚Ä¢ Temporary files removed"
    
    if [[ "$FORCE" == true ]]; then
        echo "  ‚Ä¢ Vendor directories removed"
    fi
    
    if [[ "$CLEAN_CACHE" == true ]]; then
        echo "  ‚Ä¢ Go caches cleaned"
    fi
    
{{- if .EnableDocker}}
    if [[ "$CLEAN_DOCKER" == true ]]; then
        echo "  ‚Ä¢ Docker artifacts cleaned"
    fi
{{- end}}
    
    echo ""
    print_info "Workspace is now clean and ready for fresh builds."
    
    exit 0
else
    print_error "‚ùå Cleanup failed for modules:"
    for module in "${failed_modules[@]}"; do
        echo "  ‚Ä¢ $module"
    done
    
    echo ""
    print_info "You may need to manually clean failed modules."
    
    exit 1
fi