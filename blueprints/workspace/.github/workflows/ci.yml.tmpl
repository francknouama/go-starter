name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: {{.GoVersion}}

jobs:
  # Test workspace integrity first
  workspace-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Validate workspace configuration
      run: |
        go work sync
        go work vendor
    
    - name: Check for workspace issues
      run: |
        # Verify all modules are properly configured
        go list -m -json all | jq -r '.Path' | sort | uniq -c | awk '$1 > 1 {print "Duplicate module:", $2; exit 1}'

  # Build and test each module independently
  module-tests:
    runs-on: ubuntu-latest
    needs: workspace-validation
    strategy:
      matrix:
        module:
          - pkg/shared
          - pkg/models
{{- if ne .DatabaseType "none"}}
          - pkg/storage
{{- end}}
{{- if ne .MessageQueue "none"}}
          - pkg/events
{{- end}}
{{- if .EnableWebAPI}}
          - cmd/api
{{- end}}
{{- if .EnableCLI}}
          - cmd/cli
{{- end}}
{{- if .EnableWorker}}
          - cmd/worker
{{- end}}
{{- if .EnableMicroservices}}
          - services/user-service
          - services/notification-service
{{- end}}
{{- if .EnableTesting}}
          - tests/integration
{{- end}}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Sync workspace
      run: go work sync
    
    - name: Download dependencies for ${{ matrix.module }}
      working-directory: ${{ matrix.module }}
      run: go mod download
    
    - name: Run tests for ${{ matrix.module }}
      working-directory: ${{ matrix.module }}
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage for ${{ matrix.module }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.module }}
        path: ${{ matrix.module }}/coverage.html

  # Build all binaries
  build:
    runs-on: ubuntu-latest
    needs: module-tests
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Sync workspace
      run: go work sync
    
{{- if .EnableWebAPI}}
    - name: Build API server
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd cmd/api
        go build -ldflags="-w -s" -o ../../bin/api-${{ matrix.os }}-${{ matrix.arch }}$([ "${{ matrix.os }}" = "windows" ] && echo ".exe" || echo "") .
{{- end}}

{{- if .EnableCLI}}
    - name: Build CLI tool
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd cmd/cli
        go build -ldflags="-w -s" -o ../../bin/cli-${{ matrix.os }}-${{ matrix.arch }}$([ "${{ matrix.os }}" = "windows" ] && echo ".exe" || echo "") .
{{- end}}

{{- if .EnableWorker}}
    - name: Build worker
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd cmd/worker
        go build -ldflags="-w -s" -o ../../bin/worker-${{ matrix.os }}-${{ matrix.arch }}$([ "${{ matrix.os }}" = "windows" ] && echo ".exe" || echo "") .
{{- end}}

{{- if .EnableMicroservices}}
    - name: Build user service
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd services/user-service
        go build -ldflags="-w -s" -o ../../bin/user-service-${{ matrix.os }}-${{ matrix.arch }}$([ "${{ matrix.os }}" = "windows" ] && echo ".exe" || echo "") .
    
    - name: Build notification service
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd services/notification-service
        go build -ldflags="-w -s" -o ../../bin/notification-service-${{ matrix.os }}-${{ matrix.arch }}$([ "${{ matrix.os }}" = "windows" ] && echo ".exe" || echo "") .
{{- end}}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: bin/

  # Integration and end-to-end tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    services:
{{- if eq .DatabaseType "postgres"}}
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
{{- else if eq .DatabaseType "mysql"}}
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306
{{- else if eq .DatabaseType "mongodb"}}
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
{{- end}}

{{- if eq .MessageQueue "redis"}}
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
{{- else if eq .MessageQueue "nats"}}
      nats:
        image: nats:2.9
        ports:
          - 4222:4222
{{- end}}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Sync workspace
      run: go work sync
    
    - name: Wait for services
      run: |
        # Give services time to start up
        sleep 10
{{- if eq .DatabaseType "postgres"}}
        # Test PostgreSQL connection
        until pg_isready -h localhost -p 5432; do sleep 1; done
{{- else if eq .DatabaseType "mysql"}}
        # Test MySQL connection
        until mysqladmin ping -h127.0.0.1 -P3306 -uroot -prootpass; do sleep 1; done
{{- end}}
{{- if eq .MessageQueue "redis"}}
        # Test Redis connection
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done
{{- end}}
    
    - name: Run integration tests
      env:
{{- if eq .DatabaseType "postgres"}}
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb?sslmode=disable
{{- else if eq .DatabaseType "mysql"}}
        DATABASE_URL: mysql://root:rootpass@localhost:3306/testdb
{{- else if eq .DatabaseType "mongodb"}}
        DATABASE_URL: mongodb://admin:password@localhost:27017/testdb
{{- end}}
{{- if eq .MessageQueue "redis"}}
        REDIS_URL: redis://localhost:6379
{{- else if eq .MessageQueue "nats"}}
        NATS_URL: nats://localhost:4222
{{- end}}
      run: |
{{- if .EnableTesting}}
        cd tests/integration
        go test -v -timeout 10m ./...
{{- else}}
        # Run module-level integration tests
        go test -v -timeout 10m -tags integration ./...
{{- end}}

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    needs: workspace-validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Sync workspace
      run: go work sync
    
    - name: Run golangci-lint for each module
      run: |
        modules=(
          "pkg/shared"
          "pkg/models"
{{- if ne .DatabaseType "none"}}
          "pkg/storage"
{{- end}}
{{- if ne .MessageQueue "none"}}
          "pkg/events"
{{- end}}
{{- if .EnableWebAPI}}
          "cmd/api"
{{- end}}
{{- if .EnableCLI}}
          "cmd/cli"
{{- end}}
{{- if .EnableWorker}}
          "cmd/worker"
{{- end}}
{{- if .EnableMicroservices}}
          "services/user-service"
          "services/notification-service"
{{- end}}
        )
        
        for module in "${modules[@]}"; do
          echo "Linting $module..."
          cd "$module"
          golangci-lint run ./...
          cd - > /dev/null
        done
    
    - name: Check Go formatting
      run: |
        unformatted=$(gofmt -l .)
        if [ -n "$unformatted" ]; then
          echo "The following files are not formatted:"
          echo "$unformatted"
          exit 1
        fi
    
    - name: Run go vet
      run: |
        go vet ./...
    
    - name: Check for dependencies vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: workspace-validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

{{- if or .EnableDocker .EnableKubernetes}}
  # Container and infrastructure validation
  infrastructure:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
{{- if .EnableDocker}}
    - name: Validate Docker Compose
      run: |
        docker-compose config
        docker-compose -f docker-compose.dev.yml config
    
    - name: Build Docker images
      run: |
        docker-compose build
    
    - name: Test Docker containers
      run: |
        docker-compose up -d
        sleep 30
        # Add health checks here
        docker-compose down
{{- end}}

{{- if .EnableKubernetes}}
    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval for validation
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        
        # Validate all YAML files
        find deployments/k8s -name "*.yaml" -exec kubeval {} \;
{{- end}}
{{- end}}

  # Dependency check and update suggestions
  dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Check for outdated dependencies
      run: |
        go install github.com/psampaz/go-mod-outdated@latest
        
        modules=(
          "pkg/shared"
          "pkg/models"
{{- if ne .DatabaseType "none"}}
          "pkg/storage"
{{- end}}
{{- if ne .MessageQueue "none"}}
          "pkg/events"
{{- end}}
{{- if .EnableWebAPI}}
          "cmd/api"
{{- end}}
{{- if .EnableCLI}}
          "cmd/cli"
{{- end}}
{{- if .EnableWorker}}
          "cmd/worker"
{{- end}}
{{- if .EnableMicroservices}}
          "services/user-service"
          "services/notification-service"
{{- end}}
        )
        
        for module in "${modules[@]}"; do
          echo "Checking outdated dependencies in $module..."
          cd "$module"
          go list -u -m -json all | go-mod-outdated -update -direct || true
          cd - > /dev/null
        done

  # Performance benchmarks
  benchmarks:
    runs-on: ubuntu-latest
    needs: module-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Sync workspace
      run: go work sync
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmarks
        path: benchmark.txt