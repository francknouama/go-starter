{{if .ServiceMesh.TLS}}
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: {{.ProjectName}}
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-security
spec:
  selector:
    matchLabels:
      app: {{.ProjectName}}
  mtls:
    mode: STRICT

---

# Namespace-wide mTLS policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    component: service-mesh-security
spec:
  mtls:
    mode: STRICT

---
{{end}}

# Authorization policy for the service
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: {{.ProjectName}}
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-security
spec:
  selector:
    matchLabels:
      app: {{.ProjectName}}
  rules:
  # Allow health checks
  - to:
    - operation:
        paths: ["/health/*"]
    when:
    - key: source.ip
      values: ["0.0.0.0/0"]  # Allow from anywhere for health checks
  
  # Allow metrics collection
  - to:
    - operation:
        paths: ["/metrics"]
    when:
    - key: source.namespace
      values: ["istio-system", "monitoring", "{{.ServiceMesh.Namespace}}"]
  
  # Allow traffic from same namespace
  - from:
    - source:
        namespaces: ["{{.ServiceMesh.Namespace}}"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
  
  # Allow traffic from ingress gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]

{{if eq .CommunicationProtocol "rest"}}
  # Allow external traffic through gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
    to:
    - operation:
        paths: ["/api/*"]
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
{{end}}

---

{{if .EnableAuthentication}}
# JWT authentication policy
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: {{.ProjectName}}-jwt
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-auth
spec:
  selector:
    matchLabels:
      app: {{.ProjectName}}
  jwtRules:
  - issuer: "{{.ProjectName}}"
    audiences:
    - "{{.ProjectName}}"
    jwksUri: "https://{{.ProjectName}}.example.com/.well-known/jwks.json"
    forwardOriginalToken: true
  - issuer: "https://accounts.google.com"
    audiences:
    - "your-google-client-id"
    jwksUri: "https://www.googleapis.com/oauth2/v3/certs"

---

# Authorization policy requiring JWT for protected endpoints
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: {{.ProjectName}}-jwt-auth
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-auth
spec:
  selector:
    matchLabels:
      app: {{.ProjectName}}
  rules:
  # Public endpoints (no auth required)
  - to:
    - operation:
        paths: ["/health/*", "/metrics", "/api/v1/public/*"]
    when:
    - key: source.ip
      values: ["0.0.0.0/0"]

  # Protected endpoints (require valid JWT)
  - to:
    - operation:
        paths: ["/api/v1/protected/*", "/api/v1/admin/*"]
    when:
    - key: request.auth.claims[iss]
      values: ["{{.ProjectName}}", "https://accounts.google.com"]
    - key: request.auth.claims[aud]
      values: ["{{.ProjectName}}", "your-google-client-id"]

  # Admin endpoints (require admin role)
  - to:
    - operation:
        paths: ["/api/v1/admin/*"]
    when:
    - key: request.auth.claims[role]
      values: ["admin"]
{{end}}

---

# Rate limiting policy
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{.ProjectName}}-rate-limit
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-rate-limit
spec:
  workloadSelector:
    labels:
      app: {{.ProjectName}}
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.local_ratelimit
        typed_config:
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: local_rate_limiter
            token_bucket:
              max_tokens: 100
              tokens_per_fill: 100
              fill_interval: 60s
            filter_enabled:
              runtime_key: local_rate_limit_enabled
              default_value:
                numerator: 100
                denominator: HUNDRED
            filter_enforced:
              runtime_key: local_rate_limit_enforced
              default_value:
                numerator: 100
                denominator: HUNDRED
            response_headers_to_add:
              - append: false
                header:
                  key: x-local-rate-limit
                  value: 'true'

---

# Telemetry configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: {{.ProjectName}}
  namespace: {{.ServiceMesh.Namespace}}
  labels:
    app: {{.ProjectName}}
    component: service-mesh-telemetry
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        request_id:
          value: "%REQ(X-Request-ID)%"
        user_id:
          value: "%REQ(X-User-ID)%"
  tracing:
  - providers:
    - name: jaeger
  accessLogging:
  - providers:
    - name: otel