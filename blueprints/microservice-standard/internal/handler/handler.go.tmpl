package handler

import (
{{if eq .Logger "zap"}}
	"go.uber.org/zap"
{{else if eq .Logger "logrus"}}
	"github.com/sirupsen/logrus"
{{else if eq .Logger "zerolog"}}
	"github.com/rs/zerolog/log"
{{else}}
	"log/slog"
{{end}}
)

// ServiceHandler defines the interface for our service logic
type ServiceHandler struct {
{{if eq .Logger "zap"}}
	logger *zap.Logger
{{else if eq .Logger "logrus"}}
	logger *logrus.Logger
{{else if eq .Logger "zerolog"}}
	logger zerolog.Logger
{{else}}
	logger *slog.Logger
{{end}}
}

// NewServiceHandler creates a new ServiceHandler instance
func NewServiceHandler({{if eq .Logger "zap"}}logger *zap.Logger{{else if eq .Logger "logrus"}}logger *logrus.Logger{{else if eq .Logger "zerolog"}}logger zerolog.Logger{{else}}logger *slog.Logger{{end}}) *ServiceHandler {
	return &ServiceHandler{
		logger: logger,
	}
}

// SayHello returns a greeting message
func (h *ServiceHandler) SayHello(name string) string {
	message := "Hello " + name
{{if eq .Logger "zap"}}
	h.logger.Info("SayHello called", zap.String("name", name), zap.String("message", message))
{{else if eq .Logger "logrus"}}
	h.logger.WithFields(logrus.Fields{"name": name, "message": message}).Info("SayHello called")
{{else if eq .Logger "zerolog"}}
	h.logger.Info().Str("name", name).Str("message", message).Msg("SayHello called")
{{else}}
	h.logger.Info("SayHello called", "name", name, "message", message)
{{end}}
	return message
}
