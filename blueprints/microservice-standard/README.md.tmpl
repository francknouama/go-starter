# {{.ProjectName}}

This is a standard Go microservice generated by go-starter.

## Features

- **Go Version**: {{.GoVersion}}
- **Communication Protocol**: {{.CommunicationProtocol}}
{{if ne .ServiceDiscovery "none"}}- **Service Discovery**: {{.ServiceDiscovery}}{{end}}

## Getting Started

### Prerequisites

- Go {{.GoVersion}} or higher
- Docker (for containerization)
{{if eq .CommunicationProtocol "grpc"}}- Protocol Buffers Compiler and Go plugins{{end}}

{{if eq .CommunicationProtocol "grpc"}}
#### Installing Protocol Buffers Tools

**macOS (using Homebrew):**
```bash
# Install protobuf compiler and Go plugins
brew install protobuf protoc-gen-go protoc-gen-go-grpc
```

**Ubuntu/Debian:**
```bash
# Install protobuf compiler
sudo apt update
sudo apt install protobuf-compiler

# Install Go plugins
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Make sure Go bin is in your PATH
export PATH="$PATH:$(go env GOPATH)/bin"
```

**Windows (using Chocolatey):**
```bash
# Install protobuf compiler
choco install protoc

# Install Go plugins
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Make sure Go bin is in your PATH
set PATH=%PATH%;%GOPATH%\bin
```

**Manual Installation:**
1. Download Protocol Buffers from: https://github.com/protocolbuffers/protobuf/releases
2. Extract and add `protoc` to your PATH
3. Install Go plugins:
   ```bash
   go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
   go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
   ```
{{end}}

### Build and Run

{{if eq .CommunicationProtocol "grpc"}}
**Generate Protocol Buffer files first:**
```bash
# Generate Go code from proto files
protoc --go_out=. --go-grpc_out=. proto/service.proto
```
{{end}}

```bash
make build
make run
```

### Docker

```bash
docker build -t {{.ProjectName}} .
docker run -p {{.Port}}:{{.Port}} {{.ProjectName}}
```

## Configuration

Configuration is managed via `configs/config.yaml`.

## Endpoints

{{if eq .CommunicationProtocol "grpc"}}
### gRPC

The gRPC server listens on port `{{.Port}}`.

Example usage with `grpcurl`:

```bash
grpsurl -plaintext localhost:{{.Port}} {{.ProjectName}}.{{.ProjectName}}/SayHello
```
{{end}}

{{if eq .CommunicationProtocol "rest"}}
### REST

The REST server listens on port `{{.Port}}`.

Example usage with `curl`:

```bash
curl http://localhost:{{.Port}}/health
```
{{end}}
