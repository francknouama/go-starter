name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "{{.GoVersion}}"
  GOPROXY: "https://proxy.golang.org,direct"
  GOSUMDB: "sum.golang.org"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    strategy:
      matrix:
        go-version: ["1.20", "1.21", "1.22"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Archive coverage results
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == env.GO_VERSION
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Build for Linux AMD64
      run: |
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bootstrap .
        chmod +x bootstrap

    - name: Build for Linux ARM64
      run: |
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o bootstrap-arm64 .
        chmod +x bootstrap-arm64

    - name: Create deployment package
      run: |
        zip lambda-deployment.zip bootstrap
        zip lambda-deployment-arm64.zip bootstrap-arm64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lambda-binaries
        path: |
          bootstrap
          bootstrap-arm64
          lambda-deployment.zip
          lambda-deployment-arm64.zip

  validate-sam:
    name: Validate SAM Template
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install SAM CLI
      run: |
        pip install aws-sam-cli

    - name: Validate SAM template
      run: |
        sam validate --template template.yaml

  validate-terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "~1.0"

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,apigateway,logs,iam
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
          LAMBDA_EXECUTOR: docker
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambda-binaries

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Configure AWS CLI for LocalStack
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        export AWS_ENDPOINT_URL=http://localhost:4566
        go test -v ./tests/integration/...
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check for known vulnerabilities
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Go mod tidy check
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check out code
      uses: actions/checkout@v4

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt
        cat benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  # Summary job that depends on all other jobs
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, lint, build, validate-sam, validate-terraform, security-scan, dependency-check, code-quality]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.test.result }}" != "success" || 
              "${{ needs.lint.result }}" != "success" || 
              "${{ needs.build.result }}" != "success" || 
              "${{ needs.validate-sam.result }}" != "success" || 
              "${{ needs.validate-terraform.result }}" != "success" || 
              "${{ needs.security-scan.result }}" != "success" || 
              "${{ needs.dependency-check.result }}" != "success" || 
              "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "One or more required jobs failed"
          exit 1
        fi
        echo "All required jobs passed successfully"