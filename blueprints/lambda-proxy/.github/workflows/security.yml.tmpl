name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: "{{.GoVersion}}"

jobs:
  gosec:
    name: Gosec Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -severity medium ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif
        category: gosec

    - name: Upload Gosec results artifact
      uses: actions/upload-artifact@v3
      with:
        name: gosec-results
        path: gosec.sarif

  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: |
        govulncheck -json ./... > govulncheck-results.json || true
        govulncheck ./...

    - name: Upload govulncheck results
      uses: actions/upload-artifact@v3
      with:
        name: govulncheck-results
        path: govulncheck-results.json

  nancy:
    name: Nancy Dependency Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Install Nancy
      run: |
        curl -L -o nancy https://github.com/sonatypecommunity/nancy/releases/download/v1.0.42/nancy-v1.0.42-linux-amd64
        chmod +x nancy
        sudo mv nancy /usr/local/bin/

    - name: Run Nancy
      run: |
        go list -json -deps ./... | nancy sleuth --loud

  trivy:
    name: Trivy Security Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: |
        cat > Dockerfile.scan << 'EOF'
        FROM golang:{{.GoVersion}}-alpine AS builder
        WORKDIR /app
        COPY go.* ./
        RUN go mod download
        COPY . .
        RUN CGO_ENABLED=0 go build -o lambda-app .

        FROM alpine:latest
        RUN apk --no-cache add ca-certificates
        WORKDIR /root/
        COPY --from=builder /app/lambda-app .
        CMD ["./lambda-app"]
        EOF
        docker build -f Dockerfile.scan -t lambda-security-scan:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'lambda-security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy

    - name: Upload Trivy results artifact
      uses: actions/upload-artifact@v3
      with:
        name: trivy-results
        path: trivy-results.sarif

  gitleaks:
    name: Gitleaks Secret Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  licenses:
    name: License Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        echo "Checking licenses for all dependencies..."
        go-licenses report ./... > licenses-report.txt 2>&1 || true
        
        echo "License report:"
        cat licenses-report.txt
        
        # Check for restrictive licenses
        if grep -E "(GPL|AGPL|LGPL)" licenses-report.txt; then
          echo "❌ Found potentially restrictive licenses"
          exit 1
        else
          echo "✅ No restrictive licenses found"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses-report.txt

  hadolint:
    name: Hadolint Dockerfile Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Dockerfile for Lambda
      run: |
        cat > Dockerfile << 'EOF'
        # Multi-stage build for AWS Lambda
        FROM golang:{{.GoVersion}}-alpine AS builder

        # Install ca-certificates and git
        RUN apk add --no-cache ca-certificates git

        WORKDIR /app

        # Copy go mod files
        COPY go.mod go.sum ./

        # Download dependencies
        RUN go mod download

        # Copy source code
        COPY . .

        # Build the application
        RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o bootstrap .

        # Final stage
        FROM public.ecr.aws/lambda/provided:al2

        # Copy the binary from builder stage
        COPY --from=builder /app/bootstrap ${LAMBDA_RUNTIME_DIR}

        # Set the CMD to your handler
        CMD [ "bootstrap" ]
        EOF

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: error
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif
        category: hadolint

  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OSV-Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --format=sarif
          --output=osv-results.sarif
          ./
      continue-on-error: true

    - name: Upload OSV scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: osv-results.sarif
        category: osv-scanner

  semgrep:
    name: Semgrep Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/golang
        generateSarif: "1"

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif
        category: semgrep

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [gosec, govulncheck, nancy, trivy, gitleaks, licenses, hadolint, osv-scanner, semgrep]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "| Scanner | Status | Results |" >> security-summary.md
        echo "|---------|--------|---------|" >> security-summary.md
        
        # Check each job status
        if [ "${{ needs.gosec.result }}" = "success" ]; then
          echo "| Gosec | ✅ Passed | Static analysis completed |" >> security-summary.md
        else
          echo "| Gosec | ❌ Failed | Static analysis found issues |" >> security-summary.md
        fi
        
        if [ "${{ needs.govulncheck.result }}" = "success" ]; then
          echo "| govulncheck | ✅ Passed | No known vulnerabilities |" >> security-summary.md
        else
          echo "| govulncheck | ❌ Failed | Vulnerabilities found |" >> security-summary.md
        fi
        
        if [ "${{ needs.nancy.result }}" = "success" ]; then
          echo "| Nancy | ✅ Passed | Dependencies clean |" >> security-summary.md
        else
          echo "| Nancy | ❌ Failed | Vulnerable dependencies found |" >> security-summary.md
        fi
        
        if [ "${{ needs.trivy.result }}" = "success" ]; then
          echo "| Trivy | ✅ Passed | Container scan clean |" >> security-summary.md
        else
          echo "| Trivy | ❌ Failed | Container vulnerabilities found |" >> security-summary.md
        fi
        
        if [ "${{ needs.gitleaks.result }}" = "success" ]; then
          echo "| Gitleaks | ✅ Passed | No secrets detected |" >> security-summary.md
        else
          echo "| Gitleaks | ❌ Failed | Potential secrets found |" >> security-summary.md
        fi
        
        if [ "${{ needs.licenses.result }}" = "success" ]; then
          echo "| License Check | ✅ Passed | Compatible licenses |" >> security-summary.md
        else
          echo "| License Check | ❌ Failed | License issues found |" >> security-summary.md
        fi
        
        if [ "${{ needs.hadolint.result }}" = "success" ]; then
          echo "| Hadolint | ✅ Passed | Dockerfile best practices |" >> security-summary.md
        else
          echo "| Hadolint | ❌ Failed | Dockerfile issues found |" >> security-summary.md
        fi
        
        if [ "${{ needs.osv-scanner.result }}" = "success" ]; then
          echo "| OSV Scanner | ✅ Passed | No OSV vulnerabilities |" >> security-summary.md
        else
          echo "| OSV Scanner | ❌ Failed | OSV vulnerabilities found |" >> security-summary.md
        fi
        
        if [ "${{ needs.semgrep.result }}" = "success" ]; then
          echo "| Semgrep | ✅ Passed | Code analysis clean |" >> security-summary.md
        else
          echo "| Semgrep | ❌ Failed | Code issues found |" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review any failed scans in the Security tab" >> security-summary.md
        echo "2. Address identified vulnerabilities" >> security-summary.md
        echo "3. Update dependencies if needed" >> security-summary.md
        echo "4. Follow security best practices" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md