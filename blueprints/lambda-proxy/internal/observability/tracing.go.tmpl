package observability

import (
	"context"
	"os"

	"github.com/aws/aws-xray-sdk-go/xray"
	xraylog "github.com/aws/aws-xray-sdk-go/xraylog"
)

var (
	tracingEnabled = true
	tracingService = "{{.ProjectName}}"
)

// InitializeTracing initializes AWS X-Ray tracing
func InitializeTracing() {
	// Check if tracing is disabled
	if os.Getenv("_X_AMZN_TRACE_ID") == "" {
		tracingEnabled = false
		LogInfo("X-Ray tracing disabled (not running in Lambda)", nil)
		return
	}
	
	// Configure X-Ray logger
	xray.SetLogger(xraylog.NewDefaultLogger(os.Stderr, xraylog.LogLevelInfo))
	
	LogInfo("X-Ray tracing initialized", map[string]interface{}{
		"service_name": tracingService,
	})
}

// TraceSegment wraps a function call with X-Ray tracing
func TraceSegment(ctx context.Context, name string, fn func(context.Context) error) error {
	if !tracingEnabled {
		return fn(ctx)
	}
	
	_, seg := xray.BeginSegment(ctx, name)
	defer seg.Close(nil)
	
	// Add service annotation
	seg.AddAnnotation("service", tracingService)
	
	err := fn(ctx)
	if err != nil {
		seg.AddAnnotation("error", true)
		seg.AddMetadata("error_details", map[string]interface{}{
			"message": err.Error(),
		})
	}
	
	return err
}

// TraceSubsegment wraps a function call with X-Ray subsegment tracing
func TraceSubsegment(ctx context.Context, name string, fn func(context.Context) error) error {
	if !tracingEnabled {
		return fn(ctx)
	}
	
	_, subseg := xray.BeginSubsegment(ctx, name)
	defer subseg.Close(nil)
	
	err := fn(ctx)
	if err != nil {
		subseg.AddAnnotation("error", true)
		subseg.AddMetadata("error_details", map[string]interface{}{
			"message": err.Error(),
		})
	}
	
	return err
}

// AddTraceAnnotation adds an annotation to the current X-Ray segment
func AddTraceAnnotation(ctx context.Context, key string, value interface{}) {
	if !tracingEnabled {
		return
	}
	
	if seg := xray.GetSegment(ctx); seg != nil {
		seg.AddAnnotation(key, value)
	}
}

// AddTraceMetadata adds metadata to the current X-Ray segment
func AddTraceMetadata(ctx context.Context, namespace string, data interface{}) {
	if !tracingEnabled {
		return
	}
	
	if seg := xray.GetSegment(ctx); seg != nil {
		seg.AddMetadata(namespace, data)
	}
}