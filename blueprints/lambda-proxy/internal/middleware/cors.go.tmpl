package middleware

import (
	"context"
	"net/http"
	"strings"

{{- if eq .Framework "gin"}}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo"}}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
{{- else if eq .Framework "fiber"}}
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
{{- else if eq .Framework "chi"}}
	"net/http"
{{- else if eq .Framework "stdlib"}}
	"github.com/aws/aws-lambda-go/events"
{{- end}}
	"{{.ModulePath}}/internal/config"
)

{{- if eq .Framework "gin"}}
// CORS returns a Gin middleware for CORS handling
func CORS() gin.HandlerFunc {
	return gin.HandlerFunc(func(c *gin.Context) {
		origin := c.Request.Header.Get("Origin")
		
		// Set CORS headers
		c.Header("Access-Control-Allow-Origin", getAllowedOrigin(origin))
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Accept, Authorization, X-Requested-With")
		c.Header("Access-Control-Allow-Credentials", "true")
		c.Header("Access-Control-Max-Age", "86400")
		
		// Handle preflight requests
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}
		
		c.Next()
	})
}

{{- else if eq .Framework "echo"}}
// CORS returns an Echo middleware for CORS handling
func CORS() echo.MiddlewareFunc {
	return middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOriginFunc: func(origin string) (bool, error) {
			return isOriginAllowed(origin), nil
		},
		AllowMethods:     []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodDelete, http.MethodOptions},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization", "X-Requested-With"},
		AllowCredentials: true,
		MaxAge:           86400,
	})
}

{{- else if eq .Framework "fiber"}}
// CORS returns a Fiber middleware for CORS handling
func CORS() fiber.Handler {
	return cors.New(cors.Config{
		AllowOriginFunc: func(origin string) bool {
			return isOriginAllowed(origin)
		},
		AllowMethods:     "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders:     "Origin,Content-Type,Accept,Authorization,X-Requested-With",
		AllowCredentials: true,
		MaxAge:           86400,
	})
}

{{- else if eq .Framework "chi"}}
// CORS returns a Chi middleware for CORS handling
func CORS(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		
		// Set CORS headers
		w.Header().Set("Access-Control-Allow-Origin", getAllowedOrigin(origin))
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type, Accept, Authorization, X-Requested-With")
		w.Header().Set("Access-Control-Allow-Credentials", "true")
		w.Header().Set("Access-Control-Max-Age", "86400")
		
		// Handle preflight requests
		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusNoContent)
			return
		}
		
		next.ServeHTTP(w, r)
	})
}

{{- else if eq .Framework "stdlib"}}
// CORSStdlib handles CORS for standard library
func CORSStdlib(ctx context.Context, request events.APIGatewayProxyRequest) events.APIGatewayProxyResponse {
	origin := ""
	if headers := request.Headers; headers != nil {
		if o, exists := headers["origin"]; exists {
			origin = o
		} else if o, exists := headers["Origin"]; exists {
			origin = o
		}
	}
	
	// Handle preflight requests
	if request.HTTPMethod == "OPTIONS" {
		return events.APIGatewayProxyResponse{
			StatusCode: http.StatusNoContent,
			Headers: map[string]string{
				"Access-Control-Allow-Origin":      getAllowedOrigin(origin),
				"Access-Control-Allow-Methods":     "GET, POST, PUT, DELETE, OPTIONS",
				"Access-Control-Allow-Headers":     "Origin, Content-Type, Accept, Authorization, X-Requested-With",
				"Access-Control-Allow-Credentials": "true",
				"Access-Control-Max-Age":           "86400",
			},
		}
	}
	
	// Return empty response to continue processing
	return events.APIGatewayProxyResponse{}
}
{{- end}}

// isOriginAllowed checks if the origin is allowed
func isOriginAllowed(origin string) bool {
	if origin == "" {
		return true
	}
	
	allowedOrigins := config.GetCORSOriginsList()
	
	// Check for wildcard
	for _, allowed := range allowedOrigins {
		if allowed == "*" {
			return true
		}
		if allowed == origin {
			return true
		}
		// Simple wildcard matching (e.g., *.example.com)
		if strings.HasPrefix(allowed, "*.") {
			domain := allowed[2:]
			if strings.HasSuffix(origin, "."+domain) || origin == domain {
				return true
			}
		}
	}
	
	return false
}

// getAllowedOrigin returns the appropriate origin for the Access-Control-Allow-Origin header
func getAllowedOrigin(origin string) string {
	if isOriginAllowed(origin) {
		return origin
	}
	
	// Return the first allowed origin or "*" if no specific origins are configured
	allowedOrigins := config.GetCORSOriginsList()
	if len(allowedOrigins) > 0 && allowedOrigins[0] != "*" {
		return allowedOrigins[0]
	}
	
	return "*"
}