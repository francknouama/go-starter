package handlers

import (
{{- if eq .Framework "none"}}
	// Minimal imports for none framework
{{- else}}
	"context"
	"encoding/json"
	"net/http"
	"runtime"
	"time"

{{- if eq .Framework "gin"}}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo"}}
	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber"}}
	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi"}}
	// net/http already imported above
{{- else if eq .Framework "stdlib"}}
	"github.com/aws/aws-lambda-go/events"
{{- end}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/models"
{{- end}}
)

{{- if eq .Framework "none"}}
// HealthHandler is a stub for the none framework
type HealthHandler struct{}

// NewHealthHandler creates a new health handler stub
func NewHealthHandler() *HealthHandler {
	return &HealthHandler{}
}
{{- else}}
// HealthHandler handles health check requests
type HealthHandler struct {
	startTime time.Time
}

// NewHealthHandler creates a new health handler
func NewHealthHandler() *HealthHandler {
	return &HealthHandler{
		startTime: time.Now(),
	}
}
{{- end}}

{{- if eq .Framework "gin"}}
// Check handles GET /health
func (h *HealthHandler) Check(c *gin.Context) {
	health := h.getHealthStatus()
	c.JSON(http.StatusOK, health)
}

// Ready handles GET /health/ready
func (h *HealthHandler) Ready(c *gin.Context) {
	ready := h.getReadinessStatus()
	status := http.StatusOK
	if !ready.Ready {
		status = http.StatusServiceUnavailable
	}
	c.JSON(status, ready)
}

{{- else if eq .Framework "echo"}}
// Check handles GET /health
func (h *HealthHandler) Check(c echo.Context) error {
	health := h.getHealthStatus()
	return c.JSON(http.StatusOK, health)
}

// Ready handles GET /health/ready
func (h *HealthHandler) Ready(c echo.Context) error {
	ready := h.getReadinessStatus()
	status := http.StatusOK
	if !ready.Ready {
		status = http.StatusServiceUnavailable
	}
	return c.JSON(status, ready)
}

{{- else if eq .Framework "fiber"}}
// Check handles GET /health
func (h *HealthHandler) Check(c *fiber.Ctx) error {
	health := h.getHealthStatus()
	return c.JSON(health)
}

// Ready handles GET /health/ready
func (h *HealthHandler) Ready(c *fiber.Ctx) error {
	ready := h.getReadinessStatus()
	if !ready.Ready {
		c.Status(http.StatusServiceUnavailable)
	}
	return c.JSON(ready)
}

{{- else if eq .Framework "chi"}}
// Check handles GET /health
func (h *HealthHandler) Check(w http.ResponseWriter, r *http.Request) {
	health := h.getHealthStatus()
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(health)
}

// Ready handles GET /health/ready
func (h *HealthHandler) Ready(w http.ResponseWriter, r *http.Request) {
	ready := h.getReadinessStatus()
	w.Header().Set("Content-Type", "application/json")
	
	status := http.StatusOK
	if !ready.Ready {
		status = http.StatusServiceUnavailable
	}
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(ready)
}

{{- else if eq .Framework "stdlib"}}
// CheckStdlib handles GET /health for standard library
func (h *HealthHandler) CheckStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	health := h.getHealthStatus()
	body, err := json.Marshal(health)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: http.StatusInternalServerError,
			Body:       `{"error": "Failed to marshal health status"}`,
		}, nil
	}
	
	return events.APIGatewayProxyResponse{
		StatusCode: http.StatusOK,
		Headers: map[string]string{
			"Content-Type": "application/json",
			"Access-Control-Allow-Origin": config.GetCORSOrigins(),
		},
		Body: string(body),
	}, nil
}

// ReadyStdlib handles GET /health/ready for standard library
func (h *HealthHandler) ReadyStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	ready := h.getReadinessStatus()
	body, err := json.Marshal(ready)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: http.StatusInternalServerError,
			Body:       `{"error": "Failed to marshal readiness status"}`,
		}, nil
	}
	
	status := http.StatusOK
	if !ready.Ready {
		status = http.StatusServiceUnavailable
	}
	
	return events.APIGatewayProxyResponse{
		StatusCode: status,
		Headers: map[string]string{
			"Content-Type": "application/json",
			"Access-Control-Allow-Origin": config.GetCORSOrigins(),
		},
		Body: string(body),
	}, nil
}
{{- end}}

{{- if ne .Framework "none"}}
// getHealthStatus returns the current health status
func (h *HealthHandler) getHealthStatus() models.HealthResponse {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)
	
	return models.HealthResponse{
		Status:    "healthy",
		Service:   config.GetServiceName(),
		Version:   "1.0.0",
		Timestamp: time.Now(),
		Uptime:    time.Since(h.startTime),
		Environment: config.GetEnv(),
		Memory: models.MemoryStats{
			Alloc:      m.Alloc,
			TotalAlloc: m.TotalAlloc,
			Sys:        m.Sys,
			NumGC:      m.NumGC,
		},
		Goroutines: runtime.NumGoroutine(),
	}
}

// getReadinessStatus returns the current readiness status
func (h *HealthHandler) getReadinessStatus() models.ReadinessResponse {
	// Check if the service has been running for at least 5 seconds
	ready := time.Since(h.startTime) > 5*time.Second
	
	checks := []models.ReadinessCheck{
		{
			Name:   "startup_time",
			Status: "pass",
			Detail: "Service has been running for sufficient time",
		},
	}
	
	// Add AWS service checks if needed
	if config.IsTracingEnabled() {
		checks = append(checks, models.ReadinessCheck{
			Name:   "xray_tracing",
			Status: "pass",
			Detail: "X-Ray tracing is enabled",
		})
	}
	
	if config.IsMetricsEnabled() {
		checks = append(checks, models.ReadinessCheck{
			Name:   "cloudwatch_metrics",
			Status: "pass", 
			Detail: "CloudWatch metrics are enabled",
		})
	}
	
	return models.ReadinessResponse{
		Ready:     ready,
		Service:   config.GetServiceName(),
		Timestamp: time.Now(),
		Checks:    checks,
	}
}
{{- end}}