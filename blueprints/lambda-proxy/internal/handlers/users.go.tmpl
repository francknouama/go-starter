package handlers

import (
{{- if eq .Framework "none"}}
	// Minimal imports for none framework
{{- else}}
	"context"
	"encoding/json"
	"net/http"

{{- if eq .Framework "gin"}}
	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo"}}
	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber"}}
	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi"}}
	"github.com/go-chi/chi/v5"
{{- else if eq .Framework "stdlib"}}
	"github.com/aws/aws-lambda-go/events"
{{- end}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/models"
	"{{.ModulePath}}/internal/services"
{{- end}}
)

{{- if eq .Framework "none"}}
// UserHandler is a stub for the none framework
type UserHandler struct{}

// NewUserHandler creates a new user handler stub
func NewUserHandler() *UserHandler {
	return &UserHandler{}
}
{{- else}}
// UserHandler handles user-related requests
type UserHandler struct {
	userService services.UserService
}

// NewUserHandler creates a new user handler
func NewUserHandler() *UserHandler {
	return &UserHandler{
		userService: services.NewUserService(),
	}
}
{{- end}}

{{- if ne .AuthType "none"}}
{{- if eq .Framework "gin"}}
// GetProfile handles GET /users/profile
func (h *UserHandler) GetProfile(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
		return
	}
	
	user, err := h.userService.GetProfile(c.Request.Context(), userID.(string))
	if err != nil {
		c.JSON(http.StatusNotFound, models.ErrorResponse{
			Error: err.Error(),
			Code:  "USER_NOT_FOUND",
		})
		return
	}
	
	c.JSON(http.StatusOK, user)
}

// UpdateProfile handles PUT /users/profile
func (h *UserHandler) UpdateProfile(c *gin.Context) {
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
		return
	}
	
	var req models.UpdateProfileRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
		return
	}
	
	user, err := h.userService.UpdateProfile(c.Request.Context(), userID.(string), req)
	if err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: err.Error(),
			Code:  "UPDATE_FAILED",
		})
		return
	}
	
	c.JSON(http.StatusOK, user)
}

{{- else if eq .Framework "echo"}}
// GetProfile handles GET /users/profile
func (h *UserHandler) GetProfile(c echo.Context) error {
	userID := c.Get("userID")
	if userID == nil {
		return c.JSON(http.StatusUnauthorized, models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
	}
	
	user, err := h.userService.GetProfile(c.Request().Context(), userID.(string))
	if err != nil {
		return c.JSON(http.StatusNotFound, models.ErrorResponse{
			Error: err.Error(),
			Code:  "USER_NOT_FOUND",
		})
	}
	
	return c.JSON(http.StatusOK, user)
}

// UpdateProfile handles PUT /users/profile
func (h *UserHandler) UpdateProfile(c echo.Context) error {
	userID := c.Get("userID")
	if userID == nil {
		return c.JSON(http.StatusUnauthorized, models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
	}
	
	var req models.UpdateProfileRequest
	if err := c.Bind(&req); err != nil {
		return c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
	}
	
	user, err := h.userService.UpdateProfile(c.Request().Context(), userID.(string), req)
	if err != nil {
		return c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: err.Error(),
			Code:  "UPDATE_FAILED",
		})
	}
	
	return c.JSON(http.StatusOK, user)
}

{{- else if eq .Framework "fiber"}}
// GetProfile handles GET /users/profile
func (h *UserHandler) GetProfile(c *fiber.Ctx) error {
	userID := c.Locals("userID")
	if userID == nil {
		return c.Status(http.StatusUnauthorized).JSON(models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
	}
	
	user, err := h.userService.GetProfile(c.Context(), userID.(string))
	if err != nil {
		return c.Status(http.StatusNotFound).JSON(models.ErrorResponse{
			Error: err.Error(),
			Code:  "USER_NOT_FOUND",
		})
	}
	
	return c.JSON(user)
}

// UpdateProfile handles PUT /users/profile
func (h *UserHandler) UpdateProfile(c *fiber.Ctx) error {
	userID := c.Locals("userID")
	if userID == nil {
		return c.Status(http.StatusUnauthorized).JSON(models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
	}
	
	var req models.UpdateProfileRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(http.StatusBadRequest).JSON(models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
	}
	
	user, err := h.userService.UpdateProfile(c.Context(), userID.(string), req)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(models.ErrorResponse{
			Error: err.Error(),
			Code:  "UPDATE_FAILED",
		})
	}
	
	return c.JSON(user)
}

{{- else if eq .Framework "chi"}}
// GetProfile handles GET /users/profile
func (h *UserHandler) GetProfile(w http.ResponseWriter, r *http.Request) {
	userID := r.Context().Value("userID")
	if userID == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
		return
	}
	
	user, err := h.userService.GetProfile(r.Context(), userID.(string))
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusNotFound)
		json.NewEncoder(w).Encode(models.ErrorResponse{
			Error: err.Error(),
			Code:  "USER_NOT_FOUND",
		})
		return
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(user)
}

// UpdateProfile handles PUT /users/profile
func (h *UserHandler) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	userID := r.Context().Value("userID")
	if userID == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(models.ErrorResponse{
			Error: "User not authenticated",
			Code:  "UNAUTHORIZED",
		})
		return
	}
	
	var req models.UpdateProfileRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
		return
	}
	
	user, err := h.userService.UpdateProfile(r.Context(), userID.(string), req)
	if err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(models.ErrorResponse{
			Error: err.Error(),
			Code:  "UPDATE_FAILED",
		})
		return
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(user)
}

{{- else if eq .Framework "stdlib"}}
// GetProfileStdlib handles GET /users/profile for standard library
func (h *UserHandler) GetProfileStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	userID := ctx.Value("userID")
	if userID == nil {
		return h.createErrorResponse(http.StatusUnauthorized, "User not authenticated", "UNAUTHORIZED"), nil
	}
	
	user, err := h.userService.GetProfile(ctx, userID.(string))
	if err != nil {
		return h.createErrorResponse(http.StatusNotFound, err.Error(), "USER_NOT_FOUND"), nil
	}
	
	return h.createSuccessResponse(http.StatusOK, user), nil
}

// UpdateProfileStdlib handles PUT /users/profile for standard library
func (h *UserHandler) UpdateProfileStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	userID := ctx.Value("userID")
	if userID == nil {
		return h.createErrorResponse(http.StatusUnauthorized, "User not authenticated", "UNAUTHORIZED"), nil
	}
	
	var req models.UpdateProfileRequest
	if err := json.Unmarshal([]byte(request.Body), &req); err != nil {
		return h.createErrorResponse(http.StatusBadRequest, "Invalid request body", "INVALID_REQUEST"), nil
	}
	
	user, err := h.userService.UpdateProfile(ctx, userID.(string), req)
	if err != nil {
		return h.createErrorResponse(http.StatusBadRequest, err.Error(), "UPDATE_FAILED"), nil
	}
	
	return h.createSuccessResponse(http.StatusOK, user), nil
}
{{- end}}

{{- else}}
{{- if eq .Framework "gin"}}
// ListUsers handles GET /users
func (h *UserHandler) ListUsers(c *gin.Context) {
	users, err := h.userService.ListUsers(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusInternalServerError, models.ErrorResponse{
			Error: err.Error(),
			Code:  "LIST_FAILED",
		})
		return
	}
	
	c.JSON(http.StatusOK, users)
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(c *gin.Context) {
	id := c.Param("id")
	user, err := h.userService.GetUser(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, models.ErrorResponse{
			Error: err.Error(),
			Code:  "USER_NOT_FOUND",
		})
		return
	}
	
	c.JSON(http.StatusOK, user)
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(c *gin.Context) {
	var req models.CreateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
		return
	}
	
	user, err := h.userService.CreateUser(c.Request.Context(), req)
	if err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: err.Error(),
			Code:  "CREATE_FAILED",
		})
		return
	}
	
	c.JSON(http.StatusCreated, user)
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(c *gin.Context) {
	id := c.Param("id")
	var req models.UpdateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: "Invalid request body",
			Code:  "INVALID_REQUEST",
		})
		return
	}
	
	user, err := h.userService.UpdateUser(c.Request.Context(), id, req)
	if err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: err.Error(),
			Code:  "UPDATE_FAILED",
		})
		return
	}
	
	c.JSON(http.StatusOK, user)
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(c *gin.Context) {
	id := c.Param("id")
	err := h.userService.DeleteUser(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusBadRequest, models.ErrorResponse{
			Error: err.Error(),
			Code:  "DELETE_FAILED",
		})
		return
	}
	
	c.JSON(http.StatusOK, models.MessageResponse{
		Message: "User deleted successfully",
	})
}

{{- else if eq .Framework "stdlib"}}
// ListUsersStdlib handles GET /users for standard library
func (h *UserHandler) ListUsersStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	users, err := h.userService.ListUsers(ctx)
	if err != nil {
		return h.createErrorResponse(http.StatusInternalServerError, err.Error(), "LIST_FAILED"), nil
	}
	
	return h.createSuccessResponse(http.StatusOK, users), nil
}

// GetUserStdlib handles GET /users/{id} for standard library
func (h *UserHandler) GetUserStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	id := request.PathParameters["id"]
	user, err := h.userService.GetUser(ctx, id)
	if err != nil {
		return h.createErrorResponse(http.StatusNotFound, err.Error(), "USER_NOT_FOUND"), nil
	}
	
	return h.createSuccessResponse(http.StatusOK, user), nil
}

// CreateUserStdlib handles POST /users for standard library
func (h *UserHandler) CreateUserStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	var req models.CreateUserRequest
	if err := json.Unmarshal([]byte(request.Body), &req); err != nil {
		return h.createErrorResponse(http.StatusBadRequest, "Invalid request body", "INVALID_REQUEST"), nil
	}
	
	user, err := h.userService.CreateUser(ctx, req)
	if err != nil {
		return h.createErrorResponse(http.StatusBadRequest, err.Error(), "CREATE_FAILED"), nil
	}
	
	return h.createSuccessResponse(http.StatusCreated, user), nil
}

// UpdateUserStdlib handles PUT /users/{id} for standard library
func (h *UserHandler) UpdateUserStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	id := request.PathParameters["id"]
	var req models.UpdateUserRequest
	if err := json.Unmarshal([]byte(request.Body), &req); err != nil {
		return h.createErrorResponse(http.StatusBadRequest, "Invalid request body", "INVALID_REQUEST"), nil
	}
	
	user, err := h.userService.UpdateUser(ctx, id, req)
	if err != nil {
		return h.createErrorResponse(http.StatusBadRequest, err.Error(), "UPDATE_FAILED"), nil
	}
	
	return h.createSuccessResponse(http.StatusOK, user), nil
}

// DeleteUserStdlib handles DELETE /users/{id} for standard library
func (h *UserHandler) DeleteUserStdlib(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	id := request.PathParameters["id"]
	err := h.userService.DeleteUser(ctx, id)
	if err != nil {
		return h.createErrorResponse(http.StatusBadRequest, err.Error(), "DELETE_FAILED"), nil
	}
	
	response := models.MessageResponse{
		Message: "User deleted successfully",
	}
	return h.createSuccessResponse(http.StatusOK, response), nil
}
{{- end}}
{{- end}}

{{- if eq .Framework "stdlib"}}
// Helper methods for standard library responses
func (h *UserHandler) createErrorResponse(statusCode int, message string, code string) events.APIGatewayProxyResponse {
	errorResponse := models.ErrorResponse{
		Error: message,
		Code:  code,
	}
	
	body, _ := json.Marshal(errorResponse)
	
	return events.APIGatewayProxyResponse{
		StatusCode: statusCode,
		Headers: map[string]string{
			"Content-Type": "application/json",
			"Access-Control-Allow-Origin": config.GetCORSOrigins(),
		},
		Body: string(body),
	}
}

func (h *UserHandler) createSuccessResponse(statusCode int, data interface{}) events.APIGatewayProxyResponse {
	body, err := json.Marshal(data)
	if err != nil {
		return h.createErrorResponse(http.StatusInternalServerError, "Failed to marshal response", "INTERNAL_ERROR")
	}
	
	return events.APIGatewayProxyResponse{
		StatusCode: statusCode,
		Headers: map[string]string{
			"Content-Type": "application/json",
			"Access-Control-Allow-Origin": config.GetCORSOrigins(),
		},
		Body: string(body),
	}
}
{{- end}}