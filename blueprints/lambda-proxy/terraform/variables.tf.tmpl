# Core Variables
variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "{{.ProjectName}}"
  
  validation {
    condition     = can(regex("^[a-zA-Z0-9-_]+$", var.project_name))
    error_message = "Project name must contain only alphanumeric characters, hyphens, and underscores."
  }
}

variable "environment" {
  description = "Environment name (e.g., dev, staging, production)"
  type        = string
  default     = "production"
  
  validation {
    condition     = contains(["development", "dev", "staging", "production", "prod"], var.environment)
    error_message = "Environment must be one of: development, dev, staging, production, prod."
  }
}

variable "aws_region" {
  description = "AWS region where resources will be created"
  type        = string
  default     = "us-east-1"
}

# Application Configuration
variable "log_level" {
  description = "Log level for the application"
  type        = string
  default     = "info"
  
  validation {
    condition     = contains(["debug", "info", "warn", "error"], var.log_level)
    error_message = "Log level must be one of: debug, info, warn, error."
  }
}

variable "cors_origins" {
  description = "CORS allowed origins (comma-separated)"
  type        = string
  default     = "{{.CorsOrigins}}"
}

# Lambda Configuration
variable "lambda_timeout" {
  description = "Lambda function timeout in seconds"
  type        = number
  default     = 30
  
  validation {
    condition     = var.lambda_timeout >= 1 && var.lambda_timeout <= 900
    error_message = "Lambda timeout must be between 1 and 900 seconds."
  }
}

variable "lambda_memory_size" {
  description = "Lambda function memory size in MB"
  type        = number
  default     = 256
  
  validation {
    condition     = var.lambda_memory_size >= 128 && var.lambda_memory_size <= 10240
    error_message = "Lambda memory size must be between 128 and 10240 MB."
  }
}

variable "lambda_architecture" {
  description = "Lambda function architecture"
  type        = string
  default     = "x86_64"
  
  validation {
    condition     = contains(["x86_64", "arm64"], var.lambda_architecture)
    error_message = "Lambda architecture must be either x86_64 or arm64."
  }
}

variable "lambda_reserved_concurrency" {
  description = "Lambda function reserved concurrency (-1 for no limit)"
  type        = number
  default     = -1
  
  validation {
    condition     = var.lambda_reserved_concurrency == -1 || var.lambda_reserved_concurrency >= 0
    error_message = "Reserved concurrency must be -1 (no limit) or a non-negative number."
  }
}

{{- if eq .AuthType "jwt"}}
# JWT Authentication Variables
variable "jwt_secret" {
  description = "JWT signing secret (must be at least 32 characters)"
  type        = string
  sensitive   = true
  
  validation {
    condition     = length(var.jwt_secret) >= 32
    error_message = "JWT secret must be at least 32 characters long."
  }
}

variable "jwt_issuer" {
  description = "JWT token issuer URL"
  type        = string
  default     = "{{.JWTIssuer}}"
  
  validation {
    condition     = can(regex("^https?://", var.jwt_issuer))
    error_message = "JWT issuer must be a valid URL starting with http:// or https://."
  }
}

variable "jwt_audience" {
  description = "JWT token audience"
  type        = string
  default     = "{{.ProjectName}}"
}

variable "jwt_expiry_hours" {
  description = "JWT token expiry time in hours"
  type        = number
  default     = 24
  
  validation {
    condition     = var.jwt_expiry_hours >= 1 && var.jwt_expiry_hours <= 168
    error_message = "JWT expiry must be between 1 and 168 hours (1 week)."
  }
}
{{- end}}

{{- if eq .AuthType "cognito"}}
# Cognito Authentication Variables
variable "cognito_user_pool_id" {
  description = "AWS Cognito User Pool ID"
  type        = string
  default     = "{{.CognitoUserPool}}"
  
  validation {
    condition     = can(regex("^[a-zA-Z0-9-_]+_[a-zA-Z0-9]+$", var.cognito_user_pool_id))
    error_message = "Cognito User Pool ID must be in the format: region_poolid."
  }
}

variable "cognito_client_id" {
  description = "AWS Cognito User Pool Client ID"
  type        = string
  
  validation {
    condition     = length(var.cognito_client_id) >= 1
    error_message = "Cognito Client ID cannot be empty."
  }
}

variable "cognito_region" {
  description = "AWS region for Cognito User Pool"
  type        = string
  default     = ""  # Will default to aws_region if not specified
}
{{- end}}

# API Gateway Configuration
variable "api_gateway_throttling_rate_limit" {
  description = "API Gateway throttling rate limit (requests per second)"
  type        = number
  default     = 50
  
  validation {
    condition     = var.api_gateway_throttling_rate_limit >= 1
    error_message = "Throttling rate limit must be at least 1."
  }
}

variable "api_gateway_throttling_burst_limit" {
  description = "API Gateway throttling burst limit"
  type        = number
  default     = 100
  
  validation {
    condition     = var.api_gateway_throttling_burst_limit >= 1
    error_message = "Throttling burst limit must be at least 1."
  }
}

variable "api_gateway_stage_variables" {
  description = "API Gateway stage variables"
  type        = map(string)
  default     = {}
}

# CloudWatch Configuration
variable "cloudwatch_log_retention_days" {
  description = "CloudWatch logs retention period in days"
  type        = number
  default     = 14
  
  validation {
    condition = contains([
      1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653
    ], var.cloudwatch_log_retention_days)
    error_message = "Log retention days must be one of the valid CloudWatch retention periods."
  }
}

variable "enable_xray_tracing" {
  description = "Enable AWS X-Ray tracing"
  type        = bool
  default     = true
}

variable "enable_cloudwatch_metrics" {
  description = "Enable CloudWatch custom metrics"
  type        = bool
  default     = true
}

# Monitoring and Alerting
variable "alarm_error_threshold" {
  description = "CloudWatch alarm threshold for Lambda errors"
  type        = number
  default     = 5
  
  validation {
    condition     = var.alarm_error_threshold >= 1
    error_message = "Error threshold must be at least 1."
  }
}

variable "alarm_duration_threshold" {
  description = "CloudWatch alarm threshold for Lambda duration (milliseconds)"
  type        = number
  default     = 10000  # 10 seconds
  
  validation {
    condition     = var.alarm_duration_threshold >= 1000
    error_message = "Duration threshold must be at least 1000 milliseconds."
  }
}

variable "alarm_throttle_threshold" {
  description = "CloudWatch alarm threshold for Lambda throttles"
  type        = number
  default     = 1
  
  validation {
    condition     = var.alarm_throttle_threshold >= 1
    error_message = "Throttle threshold must be at least 1."
  }
}

variable "sns_alarm_topic_arn" {
  description = "SNS topic ARN for CloudWatch alarms (optional)"
  type        = string
  default     = ""
}

# Security Configuration
variable "enable_api_gateway_access_logs" {
  description = "Enable API Gateway access logs"
  type        = bool
  default     = true
}

variable "api_gateway_minimum_compression_size" {
  description = "Minimum response size to compress (bytes, -1 to disable)"
  type        = number
  default     = 1024
  
  validation {
    condition     = var.api_gateway_minimum_compression_size == -1 || var.api_gateway_minimum_compression_size >= 0
    error_message = "Compression size must be -1 (disabled) or a non-negative number."
  }
}

# VPC Configuration (optional)
variable "vpc_config" {
  description = "VPC configuration for Lambda function"
  type = object({
    subnet_ids         = list(string)
    security_group_ids = list(string)
  })
  default = null
}

# Custom Domain Configuration (optional)
variable "custom_domain_name" {
  description = "Custom domain name for API Gateway"
  type        = string
  default     = ""
}

variable "certificate_arn" {
  description = "ACM certificate ARN for custom domain"
  type        = string
  default     = ""
}

# Tags
variable "additional_tags" {
  description = "Additional tags to apply to all resources"
  type        = map(string)
  default     = {}
}

variable "enable_enhanced_monitoring" {
  description = "Enable enhanced monitoring and insights"
  type        = bool
  default     = false
}

# Environment-specific overrides
variable "environment_config" {
  description = "Environment-specific configuration overrides"
  type = object({
    lambda_memory_size = optional(number)
    lambda_timeout     = optional(number)
    log_level         = optional(string)
    enable_xray       = optional(bool)
  })
  default = {}
}

# Feature flags
variable "feature_flags" {
  description = "Feature flags for conditional resource creation"
  type = object({
    enable_dashboard    = optional(bool, false)
    enable_canary      = optional(bool, false)
    enable_insights    = optional(bool, false)
    enable_backup      = optional(bool, false)
  })
  default = {}
}