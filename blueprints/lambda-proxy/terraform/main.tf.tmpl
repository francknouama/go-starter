terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4"
    }
  }
}

# Variables
variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "{{.ProjectName}}"
}

variable "environment" {
  description = "Environment name"
  type        = string
  default     = "production"
}

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "log_level" {
  description = "Log level for the application"
  type        = string
  default     = "info"
  validation {
    condition     = contains(["debug", "info", "warn", "error"], var.log_level)
    error_message = "Log level must be one of: debug, info, warn, error."
  }
}

{{- if eq .AuthType "jwt"}}
variable "jwt_secret" {
  description = "JWT signing secret"
  type        = string
  sensitive   = true
}

variable "jwt_issuer" {
  description = "JWT token issuer"
  type        = string
  default     = "{{.JWTIssuer}}"
}
{{- end}}

{{- if eq .AuthType "cognito"}}
variable "cognito_user_pool_id" {
  description = "Cognito User Pool ID"
  type        = string
  default     = "{{.CognitoUserPool}}"
}

variable "cognito_client_id" {
  description = "Cognito User Pool Client ID"
  type        = string
}
{{- end}}

variable "cors_origins" {
  description = "CORS allowed origins"
  type        = string
  default     = "{{.CorsOrigins}}"
}

variable "lambda_timeout" {
  description = "Lambda function timeout in seconds"
  type        = number
  default     = 30
}

variable "lambda_memory_size" {
  description = "Lambda function memory size in MB"
  type        = number
  default     = 256
}

# Data sources
data "aws_caller_identity" "current" {}

data "aws_region" "current" {}

# Create deployment package
data "archive_file" "lambda_zip" {
  type        = "zip"
  source_dir  = "${path.module}/../"
  output_path = "${path.module}/{{.ProjectName}}.zip"
  excludes = [
    "terraform/",
    "*.tf",
    "*.tfstate*",
    ".terraform/",
    ".git/",
    "*.md",
    ".env*",
    "event-examples/"
  ]
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name = "${var.project_name}-${var.environment}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name        = "${var.project_name}-${var.environment}-lambda-role"
    Environment = var.environment
    Service     = var.project_name
  }
}

# IAM Policy for Lambda
resource "aws_iam_role_policy" "lambda_policy" {
  name = "${var.project_name}-${var.environment}-lambda-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:*"
      },
      {
        Effect = "Allow"
        Action = [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "cloudwatch:PutMetricData"
        ]
        Resource = "*"
      }
{{- if eq .AuthType "cognito"}}
      ,
      {
        Effect = "Allow"
        Action = [
          "cognito-idp:AdminGetUser",
          "cognito-idp:AdminListGroupsForUser"
        ]
        Resource = "arn:aws:cognito-idp:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:userpool/${var.cognito_user_pool_id}"
      }
{{- end}}
    ]
  })
}

# CloudWatch Log Group for Lambda
resource "aws_cloudwatch_log_group" "lambda_logs" {
  name              = "/aws/lambda/${var.project_name}-${var.environment}"
  retention_in_days = 14

  tags = {
    Name        = "${var.project_name}-${var.environment}-lambda-logs"
    Environment = var.environment
    Service     = var.project_name
  }
}

# Lambda Function
resource "aws_lambda_function" "main" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = "${var.project_name}-${var.environment}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "bootstrap"
  runtime         = "provided.al2"
  timeout         = var.lambda_timeout
  memory_size     = var.lambda_memory_size
  architectures   = ["x86_64"]
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256

  environment {
    variables = {
      SERVICE_NAME     = var.project_name
      ENVIRONMENT      = var.environment
      LOG_LEVEL        = var.log_level
{{- if ne .AuthType "none"}}
      AUTH_TYPE        = "{{.AuthType}}"
{{- if eq .AuthType "jwt"}}
      JWT_SECRET       = var.jwt_secret
      JWT_ISSUER       = var.jwt_issuer
      JWT_AUDIENCE     = var.project_name
      JWT_EXPIRY_HOURS = "24"
{{- end}}
{{- if eq .AuthType "cognito"}}
      COGNITO_USER_POOL = var.cognito_user_pool_id
      COGNITO_CLIENT_ID = var.cognito_client_id
      COGNITO_REGION    = data.aws_region.current.name
{{- end}}
{{- end}}
      CORS_ORIGINS     = var.cors_origins
      TRACING_ENABLED  = "true"
      METRICS_ENABLED  = "true"
    }
  }

  tracing_config {
    mode = "Active"
  }

  depends_on = [
    aws_iam_role_policy.lambda_policy,
    aws_cloudwatch_log_group.lambda_logs,
  ]

  tags = {
    Name        = "${var.project_name}-${var.environment}"
    Environment = var.environment
    Service     = var.project_name
    Framework   = "{{.Framework}}"
  }
}

{{- if eq .AuthType "jwt"}}
# JWT Authorizer Lambda Function
resource "aws_lambda_function" "authorizer" {
  filename         = "${path.module}/authorizer.zip"  # You'll need to create this separately
  function_name    = "${var.project_name}-${var.environment}-authorizer"
  role            = aws_iam_role.authorizer_role.arn
  handler         = "authorizer"
  runtime         = "provided.al2"
  timeout         = 10
  memory_size     = 128
  source_code_hash = filebase64sha256("${path.module}/authorizer.zip")

  environment {
    variables = {
      JWT_SECRET   = var.jwt_secret
      JWT_ISSUER   = var.jwt_issuer
      JWT_AUDIENCE = var.project_name
    }
  }

  tags = {
    Name        = "${var.project_name}-${var.environment}-authorizer"
    Environment = var.environment
    Service     = var.project_name
    Component   = "Authorizer"
  }
}

# IAM Role for Authorizer Lambda
resource "aws_iam_role" "authorizer_role" {
  name = "${var.project_name}-${var.environment}-authorizer-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name        = "${var.project_name}-${var.environment}-authorizer-role"
    Environment = var.environment
    Service     = var.project_name
  }
}

# IAM Policy for Authorizer Lambda
resource "aws_iam_role_policy_attachment" "authorizer_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.authorizer_role.name
}

# CloudWatch Log Group for Authorizer
resource "aws_cloudwatch_log_group" "authorizer_logs" {
  name              = "/aws/lambda/${var.project_name}-${var.environment}-authorizer"
  retention_in_days = 14

  tags = {
    Name        = "${var.project_name}-${var.environment}-authorizer-logs"
    Environment = var.environment
    Service     = var.project_name
  }
}
{{- end}}

# API Gateway REST API
resource "aws_api_gateway_rest_api" "main" {
  name        = "${var.project_name}-${var.environment}-api"
  description = "API Gateway for ${var.project_name}"

  endpoint_configuration {
    types = ["REGIONAL"]
  }

  tags = {
    Name        = "${var.project_name}-${var.environment}-api"
    Environment = var.environment
    Service     = var.project_name
  }
}

{{- if eq .AuthType "jwt"}}
# API Gateway Authorizer
resource "aws_api_gateway_authorizer" "jwt" {
  name                   = "${var.project_name}-jwt-authorizer"
  rest_api_id           = aws_api_gateway_rest_api.main.id
  authorizer_uri        = aws_lambda_function.authorizer.invoke_arn
  authorizer_credentials = aws_iam_role.api_gateway_authorizer_role.arn
  type                  = "TOKEN"
  identity_source       = "method.request.header.Authorization"
  identity_validation_expression = "^Bearer [-0-9A-Za-z\\._~+/]+=*$"
  authorizer_result_ttl_in_seconds = 300
}

# IAM Role for API Gateway to invoke authorizer
resource "aws_iam_role" "api_gateway_authorizer_role" {
  name = "${var.project_name}-${var.environment}-api-authorizer-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "apigateway.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "api_gateway_authorizer_policy" {
  name = "${var.project_name}-${var.environment}-api-authorizer-policy"
  role = aws_iam_role.api_gateway_authorizer_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "lambda:InvokeFunction"
        ]
        Resource = aws_lambda_function.authorizer.arn
      }
    ]
  })
}
{{- end}}

# API Gateway Resource (catch-all)
resource "aws_api_gateway_resource" "proxy" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  parent_id   = aws_api_gateway_rest_api.main.root_resource_id
  path_part   = "{proxy+}"
}

# API Gateway Method (catch-all)
resource "aws_api_gateway_method" "proxy" {
  rest_api_id   = aws_api_gateway_rest_api.main.id
  resource_id   = aws_api_gateway_resource.proxy.id
  http_method   = "ANY"
  authorization = {{if eq .AuthType "jwt"}}"CUSTOM"{{else if eq .AuthType "cognito"}}"COGNITO_USER_POOLS"{{else}}"NONE"{{end}}
{{- if eq .AuthType "jwt"}}
  authorizer_id = aws_api_gateway_authorizer.jwt.id
{{- end}}

  request_parameters = {
    "method.request.path.proxy" = true
  }
}

# API Gateway Method (root)
resource "aws_api_gateway_method" "root" {
  rest_api_id   = aws_api_gateway_rest_api.main.id
  resource_id   = aws_api_gateway_rest_api.main.root_resource_id
  http_method   = "ANY"
  authorization = "NONE"
}

# API Gateway Integration (proxy)
resource "aws_api_gateway_integration" "proxy" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  resource_id = aws_api_gateway_method.proxy.resource_id
  http_method = aws_api_gateway_method.proxy.http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = aws_lambda_function.main.invoke_arn
}

# API Gateway Integration (root)
resource "aws_api_gateway_integration" "root" {
  rest_api_id = aws_api_gateway_rest_api.main.id
  resource_id = aws_api_gateway_method.root.resource_id
  http_method = aws_api_gateway_method.root.http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = aws_lambda_function.main.invoke_arn
}

# API Gateway Deployment
resource "aws_api_gateway_deployment" "main" {
  depends_on = [
    aws_api_gateway_integration.proxy,
    aws_api_gateway_integration.root,
  ]

  rest_api_id = aws_api_gateway_rest_api.main.id

  triggers = {
    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.proxy.id,
      aws_api_gateway_method.proxy.id,
      aws_api_gateway_integration.proxy.id,
      aws_api_gateway_method.root.id,
      aws_api_gateway_integration.root.id,
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }
}

# API Gateway Stage
resource "aws_api_gateway_stage" "main" {
  deployment_id = aws_api_gateway_deployment.main.id
  rest_api_id   = aws_api_gateway_rest_api.main.id
  stage_name    = var.environment

  access_log_destination_arn = aws_cloudwatch_log_group.api_gateway_logs.arn
  access_log_format = jsonencode({
    requestId      = "$context.requestId"
    ip            = "$context.identity.sourceIp"
    caller        = "$context.identity.caller"
    user          = "$context.identity.user"
    requestTime   = "$context.requestTime"
    httpMethod    = "$context.httpMethod"
    resourcePath  = "$context.resourcePath"
    status        = "$context.status"
    protocol      = "$context.protocol"
    responseLength = "$context.responseLength"
    responseTime  = "$context.responseTime"
    error         = "$context.error.message"
    integrationError = "$context.integration.error"
  })

  xray_tracing_enabled = true

  tags = {
    Name        = "${var.project_name}-${var.environment}-stage"
    Environment = var.environment
    Service     = var.project_name
  }
}

# CloudWatch Log Group for API Gateway
resource "aws_cloudwatch_log_group" "api_gateway_logs" {
  name              = "/aws/apigateway/${var.project_name}-${var.environment}"
  retention_in_days = 14

  tags = {
    Name        = "${var.project_name}-${var.environment}-api-logs"
    Environment = var.environment
    Service     = var.project_name
  }
}

# Lambda Permission for API Gateway
resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.main.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.main.execution_arn}/*/*"
}

# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "lambda_errors" {
  alarm_name          = "${var.project_name}-${var.environment}-lambda-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "Errors"
  namespace           = "AWS/Lambda"
  period              = "300"
  statistic           = "Sum"
  threshold           = "5"
  alarm_description   = "This metric monitors lambda errors"
  alarm_actions       = []

  dimensions = {
    FunctionName = aws_lambda_function.main.function_name
  }

  tags = {
    Name        = "${var.project_name}-${var.environment}-lambda-errors"
    Environment = var.environment
    Service     = var.project_name
  }
}

resource "aws_cloudwatch_metric_alarm" "lambda_duration" {
  alarm_name          = "${var.project_name}-${var.environment}-lambda-duration"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "Duration"
  namespace           = "AWS/Lambda"
  period              = "300"
  statistic           = "Average"
  threshold           = "10000"  # 10 seconds
  alarm_description   = "This metric monitors lambda duration"
  alarm_actions       = []

  dimensions = {
    FunctionName = aws_lambda_function.main.function_name
  }

  tags = {
    Name        = "${var.project_name}-${var.environment}-lambda-duration"
    Environment = var.environment
    Service     = var.project_name
  }
}

resource "aws_cloudwatch_metric_alarm" "lambda_throttles" {
  alarm_name          = "${var.project_name}-${var.environment}-lambda-throttles"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "1"
  metric_name         = "Throttles"
  namespace           = "AWS/Lambda"
  period              = "300"
  statistic           = "Sum"
  threshold           = "1"
  alarm_description   = "This metric monitors lambda throttles"
  alarm_actions       = []

  dimensions = {
    FunctionName = aws_lambda_function.main.function_name
  }

  tags = {
    Name        = "${var.project_name}-${var.environment}-lambda-throttles"
    Environment = var.environment
    Service     = var.project_name
  }
}