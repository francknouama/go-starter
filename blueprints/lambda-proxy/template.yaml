name: lambda-proxy
displayName: AWS Lambda API Proxy
description: Serverless REST API with AWS API Gateway and Lambda proxy integration
type: lambda-proxy
category: serverless
complexity: intermediate
tags: [aws, lambda, api-gateway, serverless, rest-api, proxy]

# Metadata
metadata:
  version: "1.0.0"
  author: "go-starter"
  license: "MIT"
  goVersion: "1.21"

# Template Variables
variables:
  - name: ProjectName
    type: string
    description: "Name of the Lambda proxy project"
    required: true
  
  - name: ModulePath
    type: string
    description: "Go module path (e.g., github.com/user/project)"
    required: true
  
  - name: GoVersion
    type: string
    description: "Go version for the project"
    default: "1.21"
    
  - name: Framework
    type: select
    description: "HTTP framework for API routing"
    options: ["gin", "echo", "fiber", "chi", "stdlib"]
    default: "gin"
    
  - name: LoggerType
    type: select
    description: "Logging library"
    options: ["slog", "zap", "logrus", "zerolog"]
    default: "slog"

# File Definitions - Only existing files
files:
  # Core Application Files
  - source: main.go.tmpl
    destination: main.go
    description: "Lambda entry point with framework adapter"
    
  - source: handler.go.tmpl
    destination: handler.go
    description: "Framework-specific router setup and configuration"
    condition: "{{ne .Framework \"stdlib\"}}"
    
  - source: handler_stdlib.go.tmpl
    destination: handler.go
    description: "Standard library HTTP handler"
    condition: "{{eq .Framework \"stdlib\"}}"

  # Internal Structure
  - source: internal/config/config.go.tmpl
    destination: internal/config/config.go
    description: "Configuration management"
    
  - source: internal/handlers/health.go.tmpl
    destination: internal/handlers/health.go
    description: "Health check endpoints"
    
  - source: internal/handlers/auth.go.tmpl
    destination: internal/handlers/auth.go
    description: "Authentication endpoints"
    condition: "{{ne .AuthType \"none\"}}"
    
  - source: internal/handlers/users.go.tmpl
    destination: internal/handlers/users.go
    description: "User management endpoints"
    
  - source: internal/handlers/api.go.tmpl
    destination: internal/handlers/api.go
    description: "Business logic API endpoints"

  # Middleware
  - source: internal/middleware/cors.go.tmpl
    destination: internal/middleware/cors.go
    description: "CORS handling middleware"
    
  - source: internal/middleware/logging.go.tmpl
    destination: internal/middleware/logging.go
    description: "Request logging middleware"
    
  - source: internal/middleware/auth.go.tmpl
    destination: internal/middleware/auth.go
    description: "Authentication middleware"
    condition: "{{ne .AuthType \"none\"}}"
    
  - source: internal/middleware/recovery.go.tmpl
    destination: internal/middleware/recovery.go
    description: "Panic recovery middleware"

  # Models and Services
  - source: internal/models/request.go.tmpl
    destination: internal/models/request.go
    description: "API request models"
    
  - source: internal/models/response.go.tmpl
    destination: internal/models/response.go
    description: "API response models"
    
  - source: internal/services/auth.go.tmpl
    destination: internal/services/auth.go
    description: "Authentication service"
    condition: "{{ne .AuthType \"none\"}}"
    
  - source: internal/services/users.go.tmpl
    destination: internal/services/users.go
    description: "User management service"

  # Observability
  - source: internal/observability/tracing.go.tmpl
    destination: internal/observability/tracing.go
    description: "X-Ray tracing integration"
    
  - source: internal/observability/metrics.go.tmpl
    destination: internal/observability/metrics.go
    description: "CloudWatch metrics"
    
  - source: internal/observability/logger.go.tmpl
    destination: internal/observability/logger.go
    description: "Observability logger setup"

  # Infrastructure as Code
  - source: template.yaml.tmpl
    destination: template.yaml
    description: "AWS SAM template for deployment"
    
  - source: terraform/main.tf.tmpl
    destination: terraform/main.tf
    description: "Terraform main configuration"
    
  - source: terraform/variables.tf.tmpl
    destination: terraform/variables.tf
    description: "Terraform variables"
    
  - source: terraform/outputs.tf.tmpl
    destination: terraform/outputs.tf
    description: "Terraform outputs"

  # Configuration Files
  - source: .env.example.tmpl
    destination: .env.example
    description: "Environment variables example"
    
  - source: samconfig.toml.tmpl
    destination: samconfig.toml
    description: "SAM CLI configuration"
    
  - source: scripts/deploy.sh.tmpl
    destination: scripts/deploy.sh
    description: "Deployment script"
    mode: 0755
    
  - source: scripts/local-dev.sh.tmpl
    destination: scripts/local-dev.sh
    description: "Local development script"
    mode: 0755

  # Go Module
  - source: go.mod.tmpl
    destination: go.mod
    description: "Go module dependencies"

# Dependencies
dependencies:
  - module: "github.com/aws/aws-lambda-go"
    version: "v1.41.0"
  - module: "github.com/aws/aws-sdk-go-v2"
    version: "v1.18.1"
  - module: "github.com/aws/aws-xray-sdk-go"
    version: "v1.8.2"
  - module: "github.com/awslabs/aws-lambda-go-api-proxy"
    version: "v0.16.0"