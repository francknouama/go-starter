package main

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambdacontext"
	"{{.ModulePath}}/internal/logger"
	"{{.ModulePath}}/internal/observability"
)

// Request represents the input to our Lambda function
type Request struct {
	Name    string            `json:"name"`
	Message string            `json:"message"`
	Meta    map[string]string `json:"meta,omitempty"`
}

// Response represents the output from our Lambda function
type Response struct {
	StatusCode int               `json:"statusCode"`
	Body       string            `json:"body"`
	Headers    map[string]string `json:"headers,omitempty"`
}

// HandleRequest is the Lambda function handler with comprehensive observability
func HandleRequest(ctx context.Context, event json.RawMessage) (Response, error) {
	// Initialize observability for this request
	startTime := time.Now()
	observability.InitializeCloudWatchLogging(ctx)
	
	// Initialize tracing and metrics
	observability.InitializeTracing()
	if err := observability.InitializeMetrics(ctx); err != nil {
		appLogger.WarnWith("Failed to initialize metrics", logger.Fields{
			"error": err.Error(),
		})
	}
	
	// Get Lambda context information
	lc, _ := lambdacontext.FromContext(ctx)
	requestID := lc.AwsRequestID
	
	// Log request start with observability
	requestSize := int64(len(event))
	observability.LogRequestStart(ctx, requestSize, "", "")
	
	// Record request size metric
	observability.RecordRequestSize(float64(requestSize))
	
	// Check if we have sufficient time to process the request
	deadline, hasDeadline := ctx.Deadline()
	if hasDeadline {
		timeLeft := time.Until(deadline)
		observability.AddTraceAnnotation(ctx, "time_remaining_ms", timeLeft.Milliseconds())
		
		appLogger.InfoWith("Lambda function invoked", logger.Fields{
			"request_id":            requestID,
			"invoked_function_arn":  lc.InvokedFunctionArn,
			"time_remaining":        timeLeft.String(),
		})

		// Check if we have sufficient time (need at least 100ms buffer for cleanup)
		if timeLeft < 100*time.Millisecond {
			appLogger.WarnWith("Insufficient time to process request", logger.Fields{
				"request_id":     requestID,
				"time_remaining": timeLeft.String(),
			})
			
			response := Response{
				StatusCode: 408,
				Body:       `{"error": "Request timeout: insufficient time to process"}`,
				Headers:    map[string]string{"Content-Type": "application/json"},
			}
			
			// Log completion with error
			duration := time.Since(startTime)
			observability.LogRequestComplete(ctx, duration, 408, int64(len(response.Body)), fmt.Errorf("timeout"))
			
			return response, nil
		}

		// Log warning if we're approaching timeout
		if timeLeft < 5*time.Second {
			appLogger.WarnWith("Approaching Lambda timeout", logger.Fields{
				"request_id":     requestID,
				"time_remaining": timeLeft.String(),
			})
			observability.AddTraceAnnotation(ctx, "approaching_timeout", true)
		}
	} else {
		appLogger.InfoWith("Lambda function invoked (no deadline)", logger.Fields{
			"request_id":           requestID,
			"invoked_function_arn": lc.InvokedFunctionArn,
		})
	}

	// Create a context with timeout buffer for safe cleanup
	processingCtx := ctx
	if hasDeadline {
		timeLeft := time.Until(deadline)
		if timeLeft > 200*time.Millisecond {
			// Reserve 100ms for cleanup, use 100ms less for processing
			processingTimeout := timeLeft - 100*time.Millisecond
			var cancel context.CancelFunc
			processingCtx, cancel = context.WithTimeout(ctx, processingTimeout)
			defer cancel()
		}
	}

	// Wrap the entire processing logic with tracing
	var response Response
	var processingError error
	
	err := observability.TraceSegment(processingCtx, "lambda_handler", func(ctx context.Context) error {
		// Try to parse as API Gateway request first
		var apiEvent events.APIGatewayProxyRequest
		if err := json.Unmarshal(event, &apiEvent); err == nil && apiEvent.HTTPMethod != "" {
			observability.AddTraceAnnotation(ctx, "event_type", "api_gateway")
			response, processingError = handleAPIGatewayRequest(ctx, apiEvent)
			return processingError
		}

		// Fallback to direct invocation
		observability.AddTraceAnnotation(ctx, "event_type", "direct_invocation")
		var request Request
		if err := json.Unmarshal(event, &request); err != nil {
			appLogger.ErrorWith("Failed to parse request", logger.Fields{
				"error":      err.Error(),
				"request_id": requestID,
			})
			response = Response{
				StatusCode: 400,
				Body:       `{"error": "Invalid request format"}`,
				Headers:    map[string]string{"Content-Type": "application/json"},
			}
			processingError = err
			return err
		}

		response, processingError = handleDirectRequest(ctx, request)
		return processingError
	})
	
	// Log request completion with metrics
	duration := time.Since(startTime)
	responseSize := int64(len(response.Body))
	observability.LogRequestComplete(ctx, duration, response.StatusCode, responseSize, err)
	
	// Log business event for successful processing
	if err == nil && response.StatusCode == 200 {
		observability.LogBusinessEvent(ctx, "lambda", "request_processed", map[string]interface{}{
			"status_code":    response.StatusCode,
			"response_size":  responseSize,
			"duration_ms":    duration.Milliseconds(),
		})
	}
	
	return response, err
}

// handleAPIGatewayRequest handles API Gateway proxy requests with context awareness
func handleAPIGatewayRequest(ctx context.Context, event events.APIGatewayProxyRequest) (Response, error) {
	requestID := getRequestID(ctx)
	
	// Check for context cancellation at start
	select {
	case <-ctx.Done():
		appLogger.WarnWith("API Gateway request cancelled", logger.Fields{
			"request_id": requestID,
			"error":      ctx.Err().Error(),
		})
		return Response{
			StatusCode: 408,
			Body:       `{"error": "Request timeout"}`,
			Headers:    map[string]string{"Content-Type": "application/json"},
		}, nil
	default:
		// Continue processing
	}
	
	appLogger.InfoWith("Handling API Gateway request", logger.Fields{
		"method":     event.HTTPMethod,
		"path":       event.Path,
		"request_id": requestID,
		"user_agent": event.Headers["User-Agent"],
	})

	// Parse body for POST/PUT requests
	var request Request
	if event.Body != "" {
		if err := json.Unmarshal([]byte(event.Body), &request); err != nil {
			appLogger.WarnWith("Failed to parse request body", logger.Fields{
				"error":      err.Error(),
				"request_id": requestID,
			})
			return Response{
				StatusCode: 400,
				Body:       `{"error": "Invalid JSON in request body"}`,
				Headers:    map[string]string{"Content-Type": "application/json"},
			}, nil
		}
	} else {
		// Use query parameters for GET requests
		request.Name = event.QueryStringParameters["name"]
		request.Message = event.QueryStringParameters["message"]
	}

	// Process the request with tracing
	var result map[string]interface{}
	err := observability.TraceSubsegment(ctx, "process_api_request", func(ctx context.Context) error {
		var processErr error
		result, processErr = processRequest(ctx, request)
		return processErr
	})
	
	if err != nil {
		appLogger.ErrorWith("Request processing failed", logger.Fields{
			"error":      err.Error(),
			"request_id": requestID,
		})
		return Response{
			StatusCode: 500,
			Body:       `{"error": "Internal server error"}`,
			Headers:    map[string]string{"Content-Type": "application/json"},
		}, nil
	}

	responseBody, _ := json.Marshal(result)
	
	appLogger.InfoWith("Request processed successfully", logger.Fields{
		"request_id":    requestID,
		"response_size": len(responseBody),
	})

	return Response{
		StatusCode: 200,
		Body:       string(responseBody),
		Headers:    map[string]string{"Content-Type": "application/json"},
	}, nil
}

// handleDirectRequest handles direct Lambda invocations with context awareness
func handleDirectRequest(ctx context.Context, request Request) (Response, error) {
	requestID := getRequestID(ctx)
	
	// Check for context cancellation at start
	select {
	case <-ctx.Done():
		appLogger.WarnWith("Direct request cancelled", logger.Fields{
			"request_id": requestID,
			"error":      ctx.Err().Error(),
		})
		return Response{
			StatusCode: 408,
			Body:       `{"error": "Request timeout"}`,
		}, nil
	default:
		// Continue processing
	}
	
	appLogger.InfoWith("Handling direct request", logger.Fields{
		"name":       request.Name,
		"request_id": requestID,
	})

	result, err := processRequest(ctx, request)
	if err != nil {
		appLogger.ErrorWith("Request processing failed", logger.Fields{
			"error":      err.Error(),
			"request_id": requestID,
		})
		return Response{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "%s"}`, err.Error()),
		}, nil
	}

	responseBody, _ := json.Marshal(result)
	
	appLogger.InfoWith("Request processed successfully", logger.Fields{
		"request_id":    requestID,
		"response_size": len(responseBody),
	})

	return Response{
		StatusCode: 200,
		Body:       string(responseBody),
	}, nil
}

// processRequest contains the core business logic with context handling
func processRequest(ctx context.Context, request Request) (map[string]interface{}, error) {
	requestID := getRequestID(ctx)
	
	appLogger.DebugWith("Processing request", logger.Fields{
		"name":       request.Name,
		"message":    request.Message,
		"request_id": requestID,
	})

	// Check for context cancellation before starting processing
	select {
	case <-ctx.Done():
		appLogger.WarnWith("Request cancelled before processing", logger.Fields{
			"request_id": requestID,
			"error":      ctx.Err().Error(),
		})
		return nil, ctx.Err()
	default:
		// Continue processing
	}

	// Add your business logic here
	if request.Name == "" {
		return nil, fmt.Errorf("name is required")
	}

	// Simulate processing work with context awareness
	processingComplete := make(chan map[string]interface{}, 1)
	processingError := make(chan error, 1)
	
	go func() {
		// Your actual business logic would go here
		// This is a simple example that respects context cancellation
		
		// Check for cancellation during processing
		select {
		case <-ctx.Done():
			processingError <- ctx.Err()
			return
		default:
			// Simulate some work
		}

		result := map[string]interface{}{
			"greeting":   fmt.Sprintf("Hello, %s!", request.Name),
			"message":    request.Message,
			"processed":  true,
			"request_id": requestID,
			"timestamp":  time.Now().UTC().Format(time.RFC3339),
		}

		if request.Meta != nil {
			result["meta"] = request.Meta
		}

		processingComplete <- result
	}()

	// Wait for either processing completion or context cancellation
	select {
	case <-ctx.Done():
		appLogger.WarnWith("Request cancelled during processing", logger.Fields{
			"request_id": requestID,
			"error":      ctx.Err().Error(),
		})
		return nil, ctx.Err()
	case err := <-processingError:
		return nil, err
	case result := <-processingComplete:
		appLogger.DebugWith("Request processing completed", logger.Fields{
			"request_id": requestID,
		})
		return result, nil
	}
}

// getRequestID extracts the AWS request ID from Lambda context
func getRequestID(ctx context.Context) string {
	// Use proper AWS Lambda context to get request ID
	lc, ok := lambdacontext.FromContext(ctx)
	if ok && lc.AwsRequestID != "" {
		return lc.AwsRequestID
	}
	
	// Fallback for non-Lambda contexts (testing, local development)
	if requestID, ok := ctx.Value("request_id").(string); ok {
		return requestID
	}
	
	return "unknown"
}