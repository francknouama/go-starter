package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"{{.ModulePath}}/internal/infrastructure/config"
	"{{.ModulePath}}/internal/infrastructure/container"
	"{{.ModulePath}}/internal/infrastructure/server"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Create dependency injection container
	container := container.NewContainer(cfg)

	// Initialize all dependencies
	if err := container.Initialize(); err != nil {
		log.Fatalf("Failed to initialize container: %v", err)
	}

	// Create and start server with extracted dependencies
	srv := server.NewServer(
		cfg,
		container.HealthPort(),
		{{- if ne .DatabaseDriver ""}}
		container.{{.DomainName | title}}Port(),
		{{- end}}
		{{- if ne .AuthType ""}}
		container.AuthPort(),
		{{- end}}
		container.Logger(),
	)

	// Start server in a goroutine
	go func() {
		if err := srv.Start(); err != nil {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// Graceful shutdown
	// Note: Server handles its own shutdown timeout internally

	if err := srv.Shutdown(); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exited")
}