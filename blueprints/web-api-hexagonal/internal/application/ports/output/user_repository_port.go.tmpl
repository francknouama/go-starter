package output

import (
	"context"
	"{{.ModulePath}}/internal/domain/entities"
)

// {{.DomainName | title}}RepositoryPort defines the interface for {{.DomainName}} persistence operations
// This is a secondary port that will be implemented by driven adapters
type {{.DomainName | title}}RepositoryPort interface {
	// Create saves a new {{.DomainName}} to the repository
	Create(ctx context.Context, {{.DomainName}} *entities.{{.DomainName | title}}) error
	
	// GetByID retrieves a {{.DomainName}} by its ID
	GetByID(ctx context.Context, id string) (*entities.{{.DomainName | title}}, error)
	
	// GetByEmail retrieves a {{.DomainName}} by email
	GetByEmail(ctx context.Context, email string) (*entities.{{.DomainName | title}}, error)
	
	// Update updates an existing {{.DomainName}}
	Update(ctx context.Context, {{.DomainName}} *entities.{{.DomainName | title}}) error
	
	// Delete removes a {{.DomainName}} by its ID
	Delete(ctx context.Context, id string) error
	
	// List retrieves {{.DomainName}}s with pagination
	List(ctx context.Context, limit, offset int) ([]*entities.{{.DomainName | title}}, error)
	
	// Count returns the total number of {{.DomainName}}s
	Count(ctx context.Context) (int64, error)
	
	// ExistsByEmail checks if a {{.DomainName}} exists by email
	ExistsByEmail(ctx context.Context, email string) (bool, error)
	
	// ExistsByID checks if a {{.DomainName}} exists by ID
	ExistsByID(ctx context.Context, id string) (bool, error)
}