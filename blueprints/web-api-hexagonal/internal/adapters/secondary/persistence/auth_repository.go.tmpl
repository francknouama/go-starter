package persistence

import (
	"context"
	"fmt"
	"time"

	"{{.ModulePath}}/internal/application/ports/output"
	"{{.ModulePath}}/internal/domain/entities"
	"{{.ModulePath}}/internal/domain/valueobjects"
)

// AuthRepository implements the AuthRepositoryPort interface
// This is a secondary adapter for authentication data persistence
type AuthRepository struct {
	db     *Database
	logger output.LoggerPort
}

// NewAuthRepository creates a new auth repository
func NewAuthRepository(db *Database, logger output.LoggerPort) output.AuthRepositoryPort {
	return &AuthRepository{
		db:     db,
		logger: logger,
	}
}

// CreateSession creates a new authentication session
func (r *AuthRepository) CreateSession(ctx context.Context, session *entities.AuthSession) error {
	r.logger.Info(ctx, "Creating auth session in repository", output.String("session_id", session.SessionID()))

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	model := &AuthSessionModel{
		SessionID: session.SessionID(),
		UserID:    session.UserID(),
		Token:     session.Token(),
		ExpiresAt: session.ExpiresAt().Unix(),
		CreatedAt: session.CreatedAt().Unix(),
	}

	if err := r.db.gorm.WithContext(ctx).Create(model).Error; err != nil {
		r.logger.Error(ctx, "Failed to create auth session in database", output.Error(err))
		return fmt.Errorf("failed to create auth session: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `INSERT INTO auth_sessions (session_id, user_id, token, expires_at, created_at) 
			  VALUES ($1, $2, $3, $4, $5)`
	
	_, err := r.db.sqlx.ExecContext(ctx, query,
		session.SessionID(),
		session.UserID(),
		session.Token(),
		session.ExpiresAt().Unix(),
		session.CreatedAt().Unix(),
	)
	if err != nil {
		r.logger.Error(ctx, "Failed to create auth session in database", output.Error(err))
		return fmt.Errorf("failed to create auth session: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	query := `INSERT INTO auth_sessions (session_id, user_id, token, expires_at, created_at) 
			  VALUES ($1, $2, $3, $4, $5)`
	
	_, err := r.db.sql.ExecContext(ctx, query,
		session.SessionID(),
		session.UserID(),
		session.Token(),
		session.ExpiresAt().Unix(),
		session.CreatedAt().Unix(),
	)
	if err != nil {
		r.logger.Error(ctx, "Failed to create auth session in database", output.Error(err))
		return fmt.Errorf("failed to create auth session: %w", err)
	}
	{{- end}}

	r.logger.Info(ctx, "Auth session created successfully in repository", output.String("session_id", session.SessionID()))
	return nil
}

// GetSessionByID retrieves an authentication session by its ID
func (r *AuthRepository) GetSessionByID(ctx context.Context, sessionID string) (*entities.AuthSession, error) {
	r.logger.Info(ctx, "Getting auth session by ID from repository", output.String("session_id", sessionID))

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	var model AuthSessionModel
	if err := r.db.gorm.WithContext(ctx).Where("session_id = ?", sessionID).First(&model).Error; err != nil {
		r.logger.Error(ctx, "Failed to get auth session by ID", output.String("session_id", sessionID), output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	var model AuthSessionModel
	query := `SELECT session_id, user_id, token, expires_at, created_at 
			  FROM auth_sessions WHERE session_id = $1`
	
	if err := r.db.sqlx.GetContext(ctx, &model, query, sessionID); err != nil {
		r.logger.Error(ctx, "Failed to get auth session by ID", output.String("session_id", sessionID), output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	var model AuthSessionModel
	query := `SELECT session_id, user_id, token, expires_at, created_at 
			  FROM auth_sessions WHERE session_id = $1`
	
	row := r.db.sql.QueryRowContext(ctx, query, sessionID)
	if err := row.Scan(&model.SessionID, &model.UserID, &model.Token, &model.ExpiresAt, &model.CreatedAt); err != nil {
		r.logger.Error(ctx, "Failed to get auth session by ID", output.String("session_id", sessionID), output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}
	{{- end}}

	return r.sessionModelToEntity(&model)
}

// GetSessionByToken retrieves an authentication session by its token
func (r *AuthRepository) GetSessionByToken(ctx context.Context, token string) (*entities.AuthSession, error) {
	r.logger.Info(ctx, "Getting auth session by token from repository")

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	var model AuthSessionModel
	if err := r.db.gorm.WithContext(ctx).Where("token = ?", token).First(&model).Error; err != nil {
		r.logger.Error(ctx, "Failed to get auth session by token", output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	var model AuthSessionModel
	query := `SELECT session_id, user_id, token, expires_at, created_at 
			  FROM auth_sessions WHERE token = $1`
	
	if err := r.db.sqlx.GetContext(ctx, &model, query, token); err != nil {
		r.logger.Error(ctx, "Failed to get auth session by token", output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	var model AuthSessionModel
	query := `SELECT session_id, user_id, token, expires_at, created_at 
			  FROM auth_sessions WHERE token = $1`
	
	row := r.db.sql.QueryRowContext(ctx, query, token)
	if err := row.Scan(&model.SessionID, &model.UserID, &model.Token, &model.ExpiresAt, &model.CreatedAt); err != nil {
		r.logger.Error(ctx, "Failed to get auth session by token", output.Error(err))
		return nil, fmt.Errorf("auth session not found: %w", err)
	}
	{{- end}}

	return r.sessionModelToEntity(&model)
}

// DeleteSession removes an authentication session by its ID
func (r *AuthRepository) DeleteSession(ctx context.Context, sessionID string) error {
	r.logger.Info(ctx, "Deleting auth session from repository", output.String("session_id", sessionID))

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	if err := r.db.gorm.WithContext(ctx).Where("session_id = ?", sessionID).Delete(&AuthSessionModel{}).Error; err != nil {
		r.logger.Error(ctx, "Failed to delete auth session from database", output.Error(err))
		return fmt.Errorf("failed to delete auth session: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM auth_sessions WHERE session_id = $1`
	
	_, err := r.db.sqlx.ExecContext(ctx, query, sessionID)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete auth session from database", output.Error(err))
		return fmt.Errorf("failed to delete auth session: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM auth_sessions WHERE session_id = $1`
	
	_, err := r.db.sql.ExecContext(ctx, query, sessionID)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete auth session from database", output.Error(err))
		return fmt.Errorf("failed to delete auth session: %w", err)
	}
	{{- end}}

	r.logger.Info(ctx, "Auth session deleted successfully from repository", output.String("session_id", sessionID))
	return nil
}

// DeleteExpiredSessions removes all expired authentication sessions
func (r *AuthRepository) DeleteExpiredSessions(ctx context.Context) error {
	r.logger.Info(ctx, "Deleting expired auth sessions from repository")

	now := time.Now().Unix()

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	result := r.db.gorm.WithContext(ctx).Where("expires_at < ?", now).Delete(&AuthSessionModel{})
	if result.Error != nil {
		r.logger.Error(ctx, "Failed to delete expired auth sessions from database", output.Error(result.Error))
		return fmt.Errorf("failed to delete expired auth sessions: %w", result.Error)
	}

	r.logger.Info(ctx, "Expired auth sessions deleted successfully", output.Int64("count", result.RowsAffected))

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM auth_sessions WHERE expires_at < $1`
	
	result, err := r.db.sqlx.ExecContext(ctx, query, now)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete expired auth sessions from database", output.Error(err))
		return fmt.Errorf("failed to delete expired auth sessions: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	r.logger.Info(ctx, "Expired auth sessions deleted successfully", output.Int64("count", rowsAffected))

	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM auth_sessions WHERE expires_at < $1`
	
	result, err := r.db.sql.ExecContext(ctx, query, now)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete expired auth sessions from database", output.Error(err))
		return fmt.Errorf("failed to delete expired auth sessions: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	r.logger.Info(ctx, "Expired auth sessions deleted successfully", output.Int64("count", rowsAffected))
	{{- end}}

	return nil
}

// CreateRefreshToken creates a new refresh token
func (r *AuthRepository) CreateRefreshToken(ctx context.Context, refreshToken *entities.RefreshToken) error {
	r.logger.Info(ctx, "Creating refresh token in repository", output.String("user_id", refreshToken.UserID()))

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	model := &RefreshTokenModel{
		Token:     refreshToken.Token(),
		UserID:    refreshToken.UserID(),
		ExpiresAt: refreshToken.ExpiresAt().Unix(),
		CreatedAt: refreshToken.CreatedAt().Unix(),
	}

	if err := r.db.gorm.WithContext(ctx).Create(model).Error; err != nil {
		r.logger.Error(ctx, "Failed to create refresh token in database", output.Error(err))
		return fmt.Errorf("failed to create refresh token: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `INSERT INTO refresh_tokens (token, user_id, expires_at, created_at) 
			  VALUES ($1, $2, $3, $4)`
	
	_, err := r.db.sqlx.ExecContext(ctx, query,
		refreshToken.Token(),
		refreshToken.UserID(),
		refreshToken.ExpiresAt().Unix(),
		refreshToken.CreatedAt().Unix(),
	)
	if err != nil {
		r.logger.Error(ctx, "Failed to create refresh token in database", output.Error(err))
		return fmt.Errorf("failed to create refresh token: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	query := `INSERT INTO refresh_tokens (token, user_id, expires_at, created_at) 
			  VALUES ($1, $2, $3, $4)`
	
	_, err := r.db.sql.ExecContext(ctx, query,
		refreshToken.Token(),
		refreshToken.UserID(),
		refreshToken.ExpiresAt().Unix(),
		refreshToken.CreatedAt().Unix(),
	)
	if err != nil {
		r.logger.Error(ctx, "Failed to create refresh token in database", output.Error(err))
		return fmt.Errorf("failed to create refresh token: %w", err)
	}
	{{- end}}

	r.logger.Info(ctx, "Refresh token created successfully in repository")
	return nil
}

// GetRefreshTokenByToken retrieves a refresh token by its token value
func (r *AuthRepository) GetRefreshTokenByToken(ctx context.Context, token string) (*entities.RefreshToken, error) {
	r.logger.Info(ctx, "Getting refresh token by token from repository")

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	var model RefreshTokenModel
	if err := r.db.gorm.WithContext(ctx).Where("token = ?", token).First(&model).Error; err != nil {
		r.logger.Error(ctx, "Failed to get refresh token by token", output.Error(err))
		return nil, fmt.Errorf("refresh token not found: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	var model RefreshTokenModel
	query := `SELECT token, user_id, expires_at, created_at 
			  FROM refresh_tokens WHERE token = $1`
	
	if err := r.db.sqlx.GetContext(ctx, &model, query, token); err != nil {
		r.logger.Error(ctx, "Failed to get refresh token by token", output.Error(err))
		return nil, fmt.Errorf("refresh token not found: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	var model RefreshTokenModel
	query := `SELECT token, user_id, expires_at, created_at 
			  FROM refresh_tokens WHERE token = $1`
	
	row := r.db.sql.QueryRowContext(ctx, query, token)
	if err := row.Scan(&model.Token, &model.UserID, &model.ExpiresAt, &model.CreatedAt); err != nil {
		r.logger.Error(ctx, "Failed to get refresh token by token", output.Error(err))
		return nil, fmt.Errorf("refresh token not found: %w", err)
	}
	{{- end}}

	return r.refreshTokenModelToEntity(&model)
}

// DeleteRefreshToken removes a refresh token by its token value
func (r *AuthRepository) DeleteRefreshToken(ctx context.Context, token string) error {
	r.logger.Info(ctx, "Deleting refresh token from repository")

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	if err := r.db.gorm.WithContext(ctx).Where("token = ?", token).Delete(&RefreshTokenModel{}).Error; err != nil {
		r.logger.Error(ctx, "Failed to delete refresh token from database", output.Error(err))
		return fmt.Errorf("failed to delete refresh token: %w", err)
	}

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM refresh_tokens WHERE token = $1`
	
	_, err := r.db.sqlx.ExecContext(ctx, query, token)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete refresh token from database", output.Error(err))
		return fmt.Errorf("failed to delete refresh token: %w", err)
	}

	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM refresh_tokens WHERE token = $1`
	
	_, err := r.db.sql.ExecContext(ctx, query, token)
	if err != nil {
		r.logger.Error(ctx, "Failed to delete refresh token from database", output.Error(err))
		return fmt.Errorf("failed to delete refresh token: %w", err)
	}
	{{- end}}

	r.logger.Info(ctx, "Refresh token deleted successfully from repository")
	return nil
}

// CleanupExpiredTokens removes all expired refresh tokens
func (r *AuthRepository) CleanupExpiredTokens(ctx context.Context) error {
	r.logger.Info(ctx, "Cleaning up expired refresh tokens from repository")

	now := time.Now().Unix()

	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	result := r.db.gorm.WithContext(ctx).Where("expires_at < ?", now).Delete(&RefreshTokenModel{})
	if result.Error != nil {
		r.logger.Error(ctx, "Failed to cleanup expired refresh tokens from database", output.Error(result.Error))
		return fmt.Errorf("failed to cleanup expired refresh tokens: %w", result.Error)
	}

	r.logger.Info(ctx, "Expired refresh tokens cleaned up successfully", output.Int64("count", result.RowsAffected))

	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM refresh_tokens WHERE expires_at < $1`
	
	result, err := r.db.sqlx.ExecContext(ctx, query, now)
	if err != nil {
		r.logger.Error(ctx, "Failed to cleanup expired refresh tokens from database", output.Error(err))
		return fmt.Errorf("failed to cleanup expired refresh tokens: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	r.logger.Info(ctx, "Expired refresh tokens cleaned up successfully", output.Int64("count", rowsAffected))

	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM refresh_tokens WHERE expires_at < $1`
	
	result, err := r.db.sql.ExecContext(ctx, query, now)
	if err != nil {
		r.logger.Error(ctx, "Failed to cleanup expired refresh tokens from database", output.Error(err))
		return fmt.Errorf("failed to cleanup expired refresh tokens: %w", err)
	}

	rowsAffected, _ := result.RowsAffected()
	r.logger.Info(ctx, "Expired refresh tokens cleaned up successfully", output.Int64("count", rowsAffected))
	{{- end}}

	return nil
}

// sessionModelToEntity converts a session database model to a domain entity
func (r *AuthRepository) sessionModelToEntity(model *AuthSessionModel) (*entities.AuthSession, error) {
	// Create value objects
	sessionID, err := valueobjects.SessionIDFromString(model.SessionID)
	if err != nil {
		return nil, fmt.Errorf("invalid session ID: %w", err)
	}

	userID, err := valueobjects.UserIDFromString(model.UserID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	// Reconstruct entity
	entity := entities.ReconstructAuthSession(
		sessionID,
		userID,
		model.Token,
		time.Unix(model.ExpiresAt, 0),
		time.Unix(model.CreatedAt, 0),
	)

	return entity, nil
}

// refreshTokenModelToEntity converts a refresh token database model to a domain entity
func (r *AuthRepository) refreshTokenModelToEntity(model *RefreshTokenModel) (*entities.RefreshToken, error) {
	// Create value objects
	userID, err := valueobjects.UserIDFromString(model.UserID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	// Reconstruct entity
	entity := entities.ReconstructRefreshToken(
		model.Token,
		userID,
		time.Unix(model.ExpiresAt, 0),
		time.Unix(model.CreatedAt, 0),
	)

	return entity, nil
}

// Interface-compliant methods for AuthRepositoryPort

// StoreRefreshToken stores a refresh token
func (r *AuthRepository) StoreRefreshToken(ctx context.Context, userID, token string, expiresAt time.Time) error {
	r.logger.Info(ctx, "Storing refresh token in repository", output.String("user_id", userID))
	
	// Create value objects
	userIDObj, err := valueobjects.UserIDFromString(userID)
	if err != nil {
		return fmt.Errorf("invalid user ID: %w", err)
	}
	
	// Create refresh token entity
	refreshToken := entities.NewRefreshToken(token, userIDObj, expiresAt)
	
	// Store using existing method
	return r.CreateRefreshToken(ctx, refreshToken)
}

// GetRefreshToken retrieves a refresh token
func (r *AuthRepository) GetRefreshToken(ctx context.Context, token string) (*output.RefreshToken, error) {
	r.logger.Info(ctx, "Getting refresh token from repository", output.String("token", token))
	
	// Get using existing method
	entity, err := r.GetRefreshTokenByToken(ctx, token)
	if err != nil {
		return nil, err
	}
	
	// Convert to output type
	return &output.RefreshToken{
		Token:     entity.Token(),
		UserID:    entity.UserID(),
		ExpiresAt: entity.ExpiresAt(),
		CreatedAt: entity.CreatedAt(),
	}, nil
}

// RevokeRefreshToken revokes a refresh token
func (r *AuthRepository) RevokeRefreshToken(ctx context.Context, token string) error {
	r.logger.Info(ctx, "Revoking refresh token in repository", output.String("token", token))
	
	// Use existing method
	return r.DeleteRefreshToken(ctx, token)
}

// RevokeAllUserTokens revokes all refresh tokens for a user
func (r *AuthRepository) RevokeAllUserTokens(ctx context.Context, userID string) error {
	r.logger.Info(ctx, "Revoking all user tokens in repository", output.String("user_id", userID))
	
	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	result := r.db.gorm.WithContext(ctx).Where("user_id = ?", userID).Delete(&RefreshTokenModel{})
	if result.Error != nil {
		r.logger.Error(ctx, "Failed to revoke all user tokens from database", output.Error(result.Error))
		return fmt.Errorf("failed to revoke all user tokens: %w", result.Error)
	}
	
	r.logger.Info(ctx, "All user tokens revoked successfully", output.String("user_id", userID))
	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM refresh_tokens WHERE user_id = $1`
	
	_, err := r.db.sqlx.ExecContext(ctx, query, userID)
	if err != nil {
		r.logger.Error(ctx, "Failed to revoke all user tokens from database", output.Error(err))
		return fmt.Errorf("failed to revoke all user tokens: %w", err)
	}
	
	r.logger.Info(ctx, "All user tokens revoked successfully", output.String("user_id", userID))
	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM refresh_tokens WHERE user_id = $1`
	
	_, err := r.db.sql.ExecContext(ctx, query, userID)
	if err != nil {
		r.logger.Error(ctx, "Failed to revoke all user tokens from database", output.Error(err))
		return fmt.Errorf("failed to revoke all user tokens: %w", err)
	}
	
	r.logger.Info(ctx, "All user tokens revoked successfully", output.String("user_id", userID))
	{{- end}}
	
	return nil
}

// GetPasswordResetToken retrieves a password reset token
func (r *AuthRepository) GetPasswordResetToken(ctx context.Context, token string) (*output.PasswordResetToken, error) {
	r.logger.Info(ctx, "Getting password reset token from repository", output.String("token", token))
	
	{{- if eq .DatabaseORM "gorm"}}
	var model PasswordResetTokenModel
	// GORM implementation
	if err := r.db.gorm.WithContext(ctx).Where("token = ?", token).First(&model).Error; err != nil {
		r.logger.Error(ctx, "Failed to get password reset token from database", output.Error(err))
		return nil, fmt.Errorf("failed to get password reset token: %w", err)
	}
	{{- else if eq .DatabaseORM "sqlx"}}
	var model PasswordResetTokenModel
	// SQLx implementation
	query := `SELECT token, user_id, expires_at, created_at FROM password_reset_tokens WHERE token = $1`
	
	if err := r.db.sqlx.GetContext(ctx, &model, query, token); err != nil {
		r.logger.Error(ctx, "Failed to get password reset token from database", output.Error(err))
		return nil, fmt.Errorf("failed to get password reset token: %w", err)
	}
	{{- else}}
	var model PasswordResetTokenModel
	// Standard database/sql implementation
	query := `SELECT token, user_id, expires_at, created_at FROM password_reset_tokens WHERE token = $1`
	
	row := r.db.sql.QueryRowContext(ctx, query, token)
	if err := row.Scan(&model.Token, &model.UserID, &model.ExpiresAt, &model.CreatedAt); err != nil {
		r.logger.Error(ctx, "Failed to get password reset token from database", output.Error(err))
		return nil, fmt.Errorf("failed to get password reset token: %w", err)
	}
	{{- end}}
	
	// Convert to output type
	return &output.PasswordResetToken{
		Token:     model.Token,
		UserID:    model.UserID,
		ExpiresAt: time.Unix(model.ExpiresAt, 0),
		CreatedAt: time.Unix(model.CreatedAt, 0),
	}, nil
}

// StorePasswordResetToken stores a password reset token
func (r *AuthRepository) StorePasswordResetToken(ctx context.Context, userID, token string, expiresAt time.Time) error {
	r.logger.Info(ctx, "Storing password reset token in repository", output.String("user_id", userID))
	
	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	model := &PasswordResetTokenModel{
		Token:     token,
		UserID:    userID,
		ExpiresAt: expiresAt.Unix(),
		CreatedAt: time.Now().Unix(),
	}
	
	if err := r.db.gorm.WithContext(ctx).Create(model).Error; err != nil {
		r.logger.Error(ctx, "Failed to store password reset token in database", output.Error(err))
		return fmt.Errorf("failed to store password reset token: %w", err)
	}
	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `INSERT INTO password_reset_tokens (token, user_id, expires_at, created_at) VALUES ($1, $2, $3, $4)`
	
	_, err := r.db.sqlx.ExecContext(ctx, query, token, userID, expiresAt.Unix(), time.Now().Unix())
	if err != nil {
		r.logger.Error(ctx, "Failed to store password reset token in database", output.Error(err))
		return fmt.Errorf("failed to store password reset token: %w", err)
	}
	{{- else}}
	// Standard database/sql implementation
	query := `INSERT INTO password_reset_tokens (token, user_id, expires_at, created_at) VALUES ($1, $2, $3, $4)`
	
	_, err := r.db.sql.ExecContext(ctx, query, token, userID, expiresAt.Unix(), time.Now().Unix())
	if err != nil {
		r.logger.Error(ctx, "Failed to store password reset token in database", output.Error(err))
		return fmt.Errorf("failed to store password reset token: %w", err)
	}
	{{- end}}
	
	r.logger.Info(ctx, "Password reset token stored successfully", output.String("user_id", userID))
	return nil
}

// RevokePasswordResetToken revokes a password reset token
func (r *AuthRepository) RevokePasswordResetToken(ctx context.Context, token string) error {
	r.logger.Info(ctx, "Revoking password reset token in repository", output.String("token", token))
	
	{{- if eq .DatabaseORM "gorm"}}
	// GORM implementation
	result := r.db.gorm.WithContext(ctx).Where("token = ?", token).Delete(&PasswordResetTokenModel{})
	if result.Error != nil {
		r.logger.Error(ctx, "Failed to revoke password reset token from database", output.Error(result.Error))
		return fmt.Errorf("failed to revoke password reset token: %w", result.Error)
	}
	{{- else if eq .DatabaseORM "sqlx"}}
	// SQLx implementation
	query := `DELETE FROM password_reset_tokens WHERE token = $1`
	
	_, err := r.db.sqlx.ExecContext(ctx, query, token)
	if err != nil {
		r.logger.Error(ctx, "Failed to revoke password reset token from database", output.Error(err))
		return fmt.Errorf("failed to revoke password reset token: %w", err)
	}
	{{- else}}
	// Standard database/sql implementation
	query := `DELETE FROM password_reset_tokens WHERE token = $1`
	
	_, err := r.db.sql.ExecContext(ctx, query, token)
	if err != nil {
		r.logger.Error(ctx, "Failed to revoke password reset token from database", output.Error(err))
		return fmt.Errorf("failed to revoke password reset token: %w", err)
	}
	{{- end}}
	
	r.logger.Info(ctx, "Password reset token revoked successfully", output.String("token", token))
	return nil
}

// StoreSession stores a user session
func (r *AuthRepository) StoreSession(ctx context.Context, sessionID, userID string, expiresAt time.Time) error {
	r.logger.Info(ctx, "Storing session in repository", output.String("session_id", sessionID))
	
	// Create value objects
	sessionIDObj, err := valueobjects.SessionIDFromString(sessionID)
	if err != nil {
		return fmt.Errorf("invalid session ID: %w", err)
	}
	
	userIDObj, err := valueobjects.UserIDFromString(userID)
	if err != nil {
		return fmt.Errorf("invalid user ID: %w", err)
	}
	
	// Create session entity
	session := entities.NewAuthSession(sessionIDObj, userIDObj, "session_token", expiresAt)
	
	// Store using existing method
	return r.CreateSession(ctx, session)
}

// GetSession retrieves a user session
func (r *AuthRepository) GetSession(ctx context.Context, sessionID string) (*output.Session, error) {
	r.logger.Info(ctx, "Getting session from repository", output.String("session_id", sessionID))
	
	// Get using existing method
	entity, err := r.GetSessionByID(ctx, sessionID)
	if err != nil {
		return nil, err
	}
	
	// Convert to output type
	return &output.Session{
		SessionID: entity.SessionID(),
		UserID:    entity.UserID(),
		ExpiresAt: entity.ExpiresAt(),
		CreatedAt: entity.CreatedAt(),
	}, nil
}

// RevokeSession revokes a user session
func (r *AuthRepository) RevokeSession(ctx context.Context, sessionID string) error {
	r.logger.Info(ctx, "Revoking session in repository", output.String("session_id", sessionID))
	
	// Use existing method
	return r.DeleteSession(ctx, sessionID)
}

