package logger

import (
	"context"
	"os"

	"github.com/rs/zerolog"

	"{{.ModulePath}}/internal/application/ports/output"
)

// ZerologAdapter implements the LoggerPort interface using zerolog
type ZerologAdapter struct {
	logger zerolog.Logger
}

// NewZerologAdapter creates a new zerolog adapter
func NewZerologAdapter() output.LoggerPort {
	// Create a logger with JSON output to stdout
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
	
	// Set global log level
	zerolog.SetGlobalLevel(zerolog.InfoLevel)
	
	return &ZerologAdapter{
		logger: logger,
	}
}

// NewZerologAdapterWithLevel creates a new zerolog adapter with specified log level
func NewZerologAdapterWithLevel(level string) output.LoggerPort {
	// Create a logger with JSON output to stdout
	logger := zerolog.New(os.Stdout).With().Timestamp().Logger()
	
	// Set log level based on string
	switch level {
	case "debug":
		zerolog.SetGlobalLevel(zerolog.DebugLevel)
	case "info":
		zerolog.SetGlobalLevel(zerolog.InfoLevel)
	case "warn":
		zerolog.SetGlobalLevel(zerolog.WarnLevel)
	case "error":
		zerolog.SetGlobalLevel(zerolog.ErrorLevel)
	default:
		zerolog.SetGlobalLevel(zerolog.InfoLevel)
	}
	
	return &ZerologAdapter{
		logger: logger,
	}
}

// Debug logs a debug message
func (z *ZerologAdapter) Debug(ctx context.Context, msg string, fields ...output.Field) {
	event := z.logger.Debug()
	z.addFieldsToEventFromFields(event, fields...)
	event.Msg(msg)
}

// Info logs an info message
func (z *ZerologAdapter) Info(ctx context.Context, msg string, fields ...output.Field) {
	event := z.logger.Info()
	z.addFieldsToEventFromFields(event, fields...)
	event.Msg(msg)
}

// Warn logs a warning message
func (z *ZerologAdapter) Warn(ctx context.Context, msg string, fields ...output.Field) {
	event := z.logger.Warn()
	z.addFieldsToEventFromFields(event, fields...)
	event.Msg(msg)
}

// Error logs an error message
func (z *ZerologAdapter) Error(ctx context.Context, msg string, fields ...output.Field) {
	event := z.logger.Error()
	z.addFieldsToEventFromFields(event, fields...)
	event.Msg(msg)
}

// Fatal logs a fatal message and terminates the application
func (z *ZerologAdapter) Fatal(ctx context.Context, msg string, fields ...output.Field) {
	event := z.logger.Fatal()
	z.addFieldsToEventFromFields(event, fields...)
	event.Msg(msg)
}

// WithFields returns a logger with additional fields
func (z *ZerologAdapter) WithFields(fields ...output.Field) output.LoggerPort {
	logger := z.logger.With()
	
	for _, field := range fields {
		logger = logger.Interface(field.Key, field.Value)
	}
	
	return &ZerologAdapter{
		logger: logger.Logger(),
	}
}

// WithError returns a logger with an error field
func (z *ZerologAdapter) WithError(err error) output.LoggerPort {
	return &ZerologAdapter{
		logger: z.logger.With().Err(err).Logger(),
	}
}

// DisableColor disables color output
func (z *ZerologAdapter) DisableColor() {
	// Zerolog doesn't have built-in color support to disable
	// This is a no-op for compatibility with the Logger interface
}

// addFieldsToEventFromFields converts output.Field slice to zerolog event fields
func (z *ZerologAdapter) addFieldsToEventFromFields(event *zerolog.Event, fields ...output.Field) {
	for _, field := range fields {
		event.Interface(field.Key, field.Value)
	}
}