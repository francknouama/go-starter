package logger

import (
	"context"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"

	"{{.ModulePath}}/internal/application/ports/output"
)

// ZapAdapter implements the LoggerPort interface using zap
type ZapAdapter struct {
	logger *zap.Logger
}

// NewZapAdapter creates a new zap adapter
func NewZapAdapter() output.LoggerPort {
	// Create a production logger with JSON encoding
	logger, _ := zap.NewProduction()
	
	return &ZapAdapter{
		logger: logger,
	}
}

// NewZapAdapterWithLevel creates a new zap adapter with specified log level
func NewZapAdapterWithLevel(level string) output.LoggerPort {
	var zapLevel zapcore.Level
	
	switch level {
	case "debug":
		zapLevel = zapcore.DebugLevel
	case "info":
		zapLevel = zapcore.InfoLevel
	case "warn":
		zapLevel = zapcore.WarnLevel
	case "error":
		zapLevel = zapcore.ErrorLevel
	default:
		zapLevel = zapcore.InfoLevel
	}
	
	config := zap.NewProductionConfig()
	config.Level = zap.NewAtomicLevelAt(zapLevel)
	
	logger, _ := config.Build()
	
	return &ZapAdapter{
		logger: logger,
	}
}

// Debug logs a debug message
func (z *ZapAdapter) Debug(ctx context.Context, msg string, fields ...output.Field) {
	zapFields := z.convertFieldsToZap(fields...)
	z.logger.Debug(msg, zapFields...)
}

// Info logs an info message
func (z *ZapAdapter) Info(ctx context.Context, msg string, fields ...output.Field) {
	zapFields := z.convertFieldsToZap(fields...)
	z.logger.Info(msg, zapFields...)
}

// Warn logs a warning message
func (z *ZapAdapter) Warn(ctx context.Context, msg string, fields ...output.Field) {
	zapFields := z.convertFieldsToZap(fields...)
	z.logger.Warn(msg, zapFields...)
}

// Error logs an error message
func (z *ZapAdapter) Error(ctx context.Context, msg string, fields ...output.Field) {
	zapFields := z.convertFieldsToZap(fields...)
	z.logger.Error(msg, zapFields...)
}

// Fatal logs a fatal message and terminates the application
func (z *ZapAdapter) Fatal(ctx context.Context, msg string, fields ...output.Field) {
	zapFields := z.convertFieldsToZap(fields...)
	z.logger.Fatal(msg, zapFields...)
}

// WithFields returns a logger with additional fields
func (z *ZapAdapter) WithFields(fields ...output.Field) output.LoggerPort {
	zapFields := z.convertFieldsToZap(fields...)
	return &ZapAdapter{
		logger: z.logger.With(zapFields...),
	}
}

// WithError returns a logger with an error field
func (z *ZapAdapter) WithError(err error) output.LoggerPort {
	return &ZapAdapter{
		logger: z.logger.With(zap.Error(err)),
	}
}

// convertFieldsToZap converts output.Field slice to zap fields
func (z *ZapAdapter) convertFieldsToZap(fields ...output.Field) []zap.Field {
	zapFields := make([]zap.Field, len(fields))
	for i, field := range fields {
		zapFields[i] = zap.Any(field.Key, field.Value)
	}
	return zapFields
}