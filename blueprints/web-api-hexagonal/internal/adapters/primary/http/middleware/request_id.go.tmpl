package middleware

import (
	"context"
	"net/http"
	
	"github.com/google/uuid"
)

// RequestIDKey is the key used to store request ID in context
type contextKey string

const (
	// RequestIDKey is the context key for request ID
	RequestIDKey contextKey = "request-id"
	// RequestIDHeader is the header name for request ID
	RequestIDHeader = "X-Request-ID"
)

// RequestID returns a middleware that adds a unique request ID to each request
func RequestID() func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// Check if request ID exists in header
			requestID := r.Header.Get(RequestIDHeader)
			if requestID == "" {
				// Generate new UUID
				requestID = uuid.New().String()
			}
			
			// Set request ID in context
			ctx := context.WithValue(r.Context(), RequestIDKey, requestID)
			
			// Set request ID in response header
			w.Header().Set(RequestIDHeader, requestID)
			
			// Continue with the request
			next.ServeHTTP(w, r.WithContext(ctx))
		})
	}
}

// GetRequestID retrieves the request ID from the context
func GetRequestID(ctx context.Context) string {
	if requestID := ctx.Value(RequestIDKey); requestID != nil {
		if id, ok := requestID.(string); ok {
			return id
		}
	}
	return ""
}

// RequestIDFromRequest is a convenience function to get request ID from http.Request
func RequestIDFromRequest(r *http.Request) string {
	return GetRequestID(r.Context())
}