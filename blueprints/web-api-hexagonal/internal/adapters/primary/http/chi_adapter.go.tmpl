package http

import (
	"net/http"

	"github.com/go-chi/chi/v5"
	chimiddleware "github.com/go-chi/chi/v5/middleware"

	"{{.ModulePath}}/internal/adapters/primary/http/middleware"
	"{{.ModulePath}}/internal/application/ports/input"
	"{{.ModulePath}}/internal/application/ports/output"
)

// ChiAdapter implements the HTTP server using Chi framework
type ChiAdapter struct {
	router      *chi.Mux
	healthPort  input.HealthPort
	{{- if ne .DatabaseDriver ""}}
	{{.DomainName}}Port input.{{.DomainName | title}}Port
	{{- end}}
	{{- if ne .AuthType ""}}
	authPort    input.AuthPort
	{{- end}}
	logger      output.LoggerPort
}

// NewChiAdapter creates a new Chi HTTP adapter
func NewChiAdapter(
	healthPort input.HealthPort,
	{{- if ne .DatabaseDriver ""}}
	{{.DomainName}}Port input.{{.DomainName | title}}Port,
	{{- end}}
	{{- if ne .AuthType ""}}
	authPort input.AuthPort,
	{{- end}}
	logger output.LoggerPort,
) *ChiAdapter {
	router := chi.NewRouter()
	
	// Add recovery middleware
	router.Use(chimiddleware.Recoverer)
	
	adapter := &ChiAdapter{
		router:      router,
		healthPort:  healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port: {{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort:    authPort,
		{{- end}}
		logger:      logger,
	}
	
	adapter.setupMiddleware()
	adapter.setupRoutes()
	
	return adapter
}

// setupMiddleware configures the middleware chain
func (c *ChiAdapter) setupMiddleware() {
	// CORS middleware
	corsConfig := middleware.DefaultCORSConfig()
	c.router.Use(middleware.CORS(corsConfig))
	
	// Logging middleware
	loggingConfig := middleware.LoggingConfig{
		SkipPaths: []string{"/health", "/metrics"},
		Logger:    c.logger,
	}
	c.router.Use(middleware.Logging(loggingConfig))
}

// setupRoutes configures all the HTTP routes
func (c *ChiAdapter) setupRoutes() {
	// Health check routes
	healthHandler := NewHealthHandler(c.healthPort, c.logger)
	c.router.Get("/health", healthHandler.HandleHealth)
	c.router.Get("/health/ready", healthHandler.HandleReadiness)
	
	// API routes
	c.router.Route("/api/v1", func(r chi.Router) {
		{{- if ne .DatabaseDriver ""}}
		// {{.DomainName | title}} routes
		{{.DomainName}}Handler := New{{.DomainName | title}}Handler(c.{{.DomainName}}Port, c.logger)
		r.Route("/{{.DomainName}}s", func(r chi.Router) {
			r.Post("/", {{.DomainName}}Handler.HandleCreate)
			r.Get("/{id}", {{.DomainName}}Handler.HandleGetByID)
			r.Put("/{id}", {{.DomainName}}Handler.HandleUpdate)
			r.Delete("/{id}", {{.DomainName}}Handler.HandleDelete)
			r.Get("/", {{.DomainName}}Handler.HandleList)
		})
		{{- end}}
		
		{{- if ne .AuthType ""}}
		// Authentication routes
		authHandler := NewAuthHandler(c.authPort, c.logger)
		r.Route("/auth", func(r chi.Router) {
			r.Post("/login", authHandler.HandleLogin)
			r.Post("/register", authHandler.HandleRegister)
			r.Post("/refresh", authHandler.HandleRefreshToken)
			r.Post("/logout", authHandler.HandleLogout)
			r.Post("/change-password", authHandler.HandleChangePassword)
			r.Post("/reset-password", authHandler.HandleResetPassword)
			r.Post("/confirm-reset", authHandler.HandleConfirmPasswordReset)
		})
		
		// Protected routes that require authentication
		authConfig := middleware.DefaultAuthConfig(c.authPort, c.logger)
		r.Group(func(r chi.Router) {
			r.Use(middleware.Auth(authConfig))
			
			{{- if ne .DatabaseDriver ""}}
			// Protected {{.DomainName}} routes
			{{.DomainName}}Handler := New{{.DomainName | title}}Handler(c.{{.DomainName}}Port, c.logger)
			r.Route("/{{.DomainName}}s", func(r chi.Router) {
				r.Get("/me", {{.DomainName}}Handler.HandleGetProfile)
				r.Put("/me", {{.DomainName}}Handler.HandleUpdateProfile)
			})
			{{- end}}
		})
		{{- end}}
	})
}

// Start starts the HTTP server
func (c *ChiAdapter) Start(addr string) error {
	c.logger.Info(nil, "Starting Chi HTTP server", output.String("address", addr))
	return http.ListenAndServe(addr, c.router)
}

// Stop stops the HTTP server gracefully
func (c *ChiAdapter) Stop() error {
	c.logger.Info(nil, "Stopping Chi HTTP server")
	// Chi uses standard HTTP server, so we'll just log
	// In a real implementation, you might want to use http.Server with context
	return nil
}

// Handler returns the underlying HTTP handler
func (c *ChiAdapter) Handler() http.Handler {
	return c.router
}