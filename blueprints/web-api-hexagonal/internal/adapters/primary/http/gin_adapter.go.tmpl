package http

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"{{.ModulePath}}/internal/adapters/primary/http/middleware"
	"{{.ModulePath}}/internal/application/ports/input"
	"{{.ModulePath}}/internal/application/ports/output"
)

// GinAdapter implements the HTTP server using Gin framework
type GinAdapter struct {
	router      *gin.Engine
	healthPort  input.HealthPort
	{{- if ne .DatabaseDriver ""}}
	{{.DomainName}}Port input.{{.DomainName | title}}Port
	{{- end}}
	{{- if ne .AuthType ""}}
	authPort    input.AuthPort
	{{- end}}
	logger      output.LoggerPort
}

// NewGinAdapter creates a new Gin HTTP adapter
func NewGinAdapter(
	healthPort input.HealthPort,
	{{- if ne .DatabaseDriver ""}}
	{{.DomainName}}Port input.{{.DomainName | title}}Port,
	{{- end}}
	{{- if ne .AuthType ""}}
	authPort input.AuthPort,
	{{- end}}
	logger output.LoggerPort,
) *GinAdapter {
	// Set Gin to release mode for production
	gin.SetMode(gin.ReleaseMode)
	
	router := gin.New()
	
	// Add recovery middleware
	router.Use(gin.Recovery())
	
	adapter := &GinAdapter{
		router:      router,
		healthPort:  healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port: {{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort:    authPort,
		{{- end}}
		logger:      logger,
	}
	
	adapter.setupMiddleware()
	adapter.setupRoutes()
	
	return adapter
}

// setupMiddleware configures the middleware chain
func (g *GinAdapter) setupMiddleware() {
	// Request ID middleware
	g.router.Use(wrapMiddleware(middleware.RequestID()))
	
	// Security headers middleware
	securityConfig := middleware.DefaultSecurityConfig()
	g.router.Use(wrapMiddleware(middleware.Security(securityConfig)))
	
	// CORS middleware
	corsConfig := middleware.DefaultCORSConfig()
	g.router.Use(wrapMiddleware(middleware.CORS(corsConfig)))
	
	// Content type validation middleware
	g.router.Use(wrapMiddleware(middleware.ContentTypeValidation()))
	
	// Logging middleware
	loggingConfig := middleware.LoggingConfig{
		SkipPaths: []string{"/health", "/metrics"},
		Logger:    g.logger,
	}
	g.router.Use(wrapMiddleware(middleware.Logging(loggingConfig)))
	
	// Error handler middleware
	g.router.Use(wrapMiddleware(middleware.ErrorHandler(g.logger)))
}

// wrapMiddleware wraps a standard http.Handler middleware for use with Gin
func wrapMiddleware(middleware func(http.Handler) http.Handler) gin.HandlerFunc {
	return func(c *gin.Context) {
		middleware(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			c.Next()
		})).ServeHTTP(c.Writer, c.Request)
	}
}

// setupRoutes configures all the HTTP routes
func (g *GinAdapter) setupRoutes() {
	// Health check routes
	healthHandler := NewHealthHandler(g.healthPort, g.logger)
	g.router.GET("/health", g.adaptHandler(healthHandler.HandleHealth))
	g.router.GET("/health/ready", g.adaptHandler(healthHandler.HandleReadiness))
	
	// API routes
	api := g.router.Group("/api")
	
	{{- if ne .DatabaseDriver ""}}
	// {{.DomainName | title}} routes
	{{.DomainName}}Handler := New{{.DomainName | title}}Handler(g.{{.DomainName}}Port, g.logger)
	{{.DomainName}}Routes := api.Group("/{{.DomainName}}s")
	{
		{{.DomainName}}Routes.POST("", g.adaptHandler({{.DomainName}}Handler.HandleCreate))
		{{.DomainName}}Routes.GET("/:id", g.adaptHandler({{.DomainName}}Handler.HandleGetByID))
		{{.DomainName}}Routes.PUT("/:id", g.adaptHandler({{.DomainName}}Handler.HandleUpdate))
		{{.DomainName}}Routes.DELETE("/:id", g.adaptHandler({{.DomainName}}Handler.HandleDelete))
		{{.DomainName}}Routes.GET("", g.adaptHandler({{.DomainName}}Handler.HandleList))
	}
	{{- end}}
	
	{{- if ne .AuthType ""}}
	// Authentication routes
	authHandler := NewAuthHandler(g.authPort, g.logger)
	authRoutes := api.Group("/auth")
	{
		authRoutes.POST("/login", g.adaptHandler(authHandler.HandleLogin))
		authRoutes.POST("/register", g.adaptHandler(authHandler.HandleRegister))
		authRoutes.POST("/refresh", g.adaptHandler(authHandler.HandleRefreshToken))
		authRoutes.POST("/logout", g.adaptHandler(authHandler.HandleLogout))
		authRoutes.POST("/change-password", g.adaptHandler(authHandler.HandleChangePassword))
		authRoutes.POST("/reset-password", g.adaptHandler(authHandler.HandleResetPassword))
		authRoutes.POST("/confirm-reset", g.adaptHandler(authHandler.HandleConfirmPasswordReset))
	}
	
	// Protected routes that require authentication
	authConfig := middleware.DefaultAuthConfig(g.authPort, g.logger)
	protected := api.Group("")
	protected.Use(gin.WrapH(middleware.Auth(authConfig)(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// This will be replaced by the actual handler
	}))))
	
	{{- if ne .DatabaseDriver ""}}
	// Protected {{.DomainName}} routes
	protected{{.DomainName | title}}Routes := protected.Group("/{{.DomainName}}s")
	{
		protected{{.DomainName | title}}Routes.GET("/me", g.adaptHandler({{.DomainName}}Handler.HandleGetProfile))
		protected{{.DomainName | title}}Routes.PUT("/me", g.adaptHandler({{.DomainName}}Handler.HandleUpdateProfile))
		// Alias routes for compatibility with tests
		protected{{.DomainName | title}}Routes.GET("/profile", g.adaptHandler({{.DomainName}}Handler.HandleGetProfile))
		protected{{.DomainName | title}}Routes.PUT("/profile", g.adaptHandler({{.DomainName}}Handler.HandleUpdateProfile))
	}
	{{- end}}
	{{- end}}
}

// adaptHandler adapts a standard HTTP handler to Gin handler
func (g *GinAdapter) adaptHandler(handler http.HandlerFunc) gin.HandlerFunc {
	return gin.WrapF(handler)
}

// Start starts the HTTP server
func (g *GinAdapter) Start(addr string) error {
	g.logger.Info(nil, "Starting Gin HTTP server", output.String("address", addr))
	return g.router.Run(addr)
}

// Stop stops the HTTP server gracefully
func (g *GinAdapter) Stop() error {
	g.logger.Info(nil, "Stopping Gin HTTP server")
	// Gin doesn't have a built-in graceful shutdown, so we'll just log
	// In a real implementation, you might want to use http.Server with context
	return nil
}

// Handler returns the underlying HTTP handler
func (g *GinAdapter) Handler() http.Handler {
	return g.router
}