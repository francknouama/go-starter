package server

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.ModulePath}}/internal/application/ports/input"
	"{{.ModulePath}}/internal/application/ports/output"
	"{{.ModulePath}}/internal/infrastructure/config"
	
	{{- if eq .Framework "gin"}}
	httpAdapter "{{.ModulePath}}/internal/adapters/primary/http"
	{{- else if eq .Framework "echo"}}
	httpAdapter "{{.ModulePath}}/internal/adapters/primary/http"
	{{- else if eq .Framework "fiber"}}
	httpAdapter "{{.ModulePath}}/internal/adapters/primary/http"
	{{- else if eq .Framework "chi"}}
	httpAdapter "{{.ModulePath}}/internal/adapters/primary/http"
	{{- else}}
	httpAdapter "{{.ModulePath}}/internal/adapters/primary/http"
	{{- end}}
)

// Server represents the main application server
type Server struct {
	config      *config.Config
	httpAdapter HTTPAdapter
	logger      output.LoggerPort
}

// HTTPAdapter defines the interface for HTTP adapters
type HTTPAdapter interface {
	Start(addr string) error
	Stop() error
	Handler() http.Handler
}

// NewServer creates a new server instance
func NewServer(
	cfg *config.Config,
	healthPort input.HealthPort,
	{{- if ne .DatabaseDriver ""}}
	{{.DomainName}}Port input.{{.DomainName | title}}Port,
	{{- end}}
	{{- if ne .AuthType ""}}
	authPort input.AuthPort,
	{{- end}}
	logger output.LoggerPort,
) *Server {
	// Create the appropriate HTTP adapter based on configuration
	var adapter HTTPAdapter
	
	{{- if eq .Framework "gin"}}
	adapter = httpAdapter.NewGinAdapter(
		healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort,
		{{- end}}
		logger,
	)
	{{- else if eq .Framework "echo"}}
	adapter = httpAdapter.NewEchoAdapter(
		healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort,
		{{- end}}
		logger,
	)
	{{- else if eq .Framework "fiber"}}
	adapter = httpAdapter.NewFiberAdapter(
		healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort,
		{{- end}}
		logger,
	)
	{{- else if eq .Framework "chi"}}
	adapter = httpAdapter.NewChiAdapter(
		healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort,
		{{- end}}
		logger,
	)
	{{- else}}
	adapter = httpAdapter.NewStdlibAdapter(
		healthPort,
		{{- if ne .DatabaseDriver ""}}
		{{.DomainName}}Port,
		{{- end}}
		{{- if ne .AuthType ""}}
		authPort,
		{{- end}}
		logger,
	)
	{{- end}}
	
	return &Server{
		config:      cfg,
		httpAdapter: adapter,
		logger:      logger,
	}
}

// Start starts the server
func (s *Server) Start() error {
	s.logger.Info(context.Background(), "Starting server",
		output.String("framework", "{{.Framework}}"),
		output.String("host", s.config.Server.Host),
		output.Int("port", s.config.Server.Port),
		output.String("environment", s.config.Environment),
	)
	
	// Create a channel to listen for interrupt signals
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
	
	// Start the HTTP server in a goroutine
	serverAddr := fmt.Sprintf("%s:%d", s.config.Server.Host, s.config.Server.Port)
	errChan := make(chan error, 1)
	
	go func() {
		s.logger.Info(context.Background(), "HTTP server starting", output.String("address", serverAddr))
		if err := s.httpAdapter.Start(serverAddr); err != nil && err != http.ErrServerClosed {
			errChan <- fmt.Errorf("failed to start HTTP server: %w", err)
		}
	}()
	
	// Wait for either an error or a signal
	select {
	case err := <-errChan:
		s.logger.Error(context.Background(), "Server startup error", output.Error(err))
		return err
	case sig := <-sigChan:
		s.logger.Info(context.Background(), "Received signal, shutting down server", output.String("signal", sig.String()))
		return s.Shutdown()
	}
}

// Shutdown gracefully shuts down the server
func (s *Server) Shutdown() error {
	s.logger.Info(context.Background(), "Shutting down server")
	
	// Create a context with timeout for shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	
	// Shutdown the HTTP adapter
	if err := s.httpAdapter.Stop(); err != nil {
		s.logger.Error(ctx, "Error shutting down HTTP adapter", output.Error(err))
		return fmt.Errorf("failed to shutdown HTTP adapter: %w", err)
	}
	
	s.logger.Info(context.Background(), "Server shutdown completed")
	return nil
}

// Handler returns the HTTP handler for the server
func (s *Server) Handler() http.Handler {
	return s.httpAdapter.Handler()
}

// Config returns the server configuration
func (s *Server) Config() *config.Config {
	return s.config
}

// Logger returns the server logger
func (s *Server) Logger() output.LoggerPort {
	return s.logger
}