package valueobjects

import (
	"errors"
)

// Password represents a secure password value object
type Password struct {
	value string
}

// NewPassword creates a new Password value object
func NewPassword(value string) (Password, error) {
	if value == "" {
		return Password{}, ErrEmptyPassword
	}
	
	if len(value) < 8 {
		return Password{}, ErrWeakPassword
	}
	
	// Additional password strength validation could go here
	// - At least one uppercase letter
	// - At least one lowercase letter
	// - At least one digit
	// - At least one special character
	
	return Password{value: value}, nil
}

// Value returns the string value of the password
// Note: In a real implementation, this should be handled carefully
func (p Password) Value() string {
	return p.value
}

// IsEmpty checks if the password is empty
func (p Password) IsEmpty() bool {
	return p.value == ""
}

// Length returns the length of the password
func (p Password) Length() int {
	return len(p.value)
}

// Equals checks if two passwords are equal
func (p Password) Equals(other Password) bool {
	return p.value == other.value
}

// HasMinLength checks if the password has minimum length
func (p Password) HasMinLength(min int) bool {
	return len(p.value) >= min
}

// Password value object errors
var (
	// ErrEmptyPassword is returned when the password is empty
	ErrEmptyPassword = errors.New("password cannot be empty")
	
	// ErrWeakPassword is returned when the password is too weak
	ErrWeakPassword = errors.New("password must be at least 8 characters long")
)