package events

import (
	"time"
)

// {{.DomainName | title}}LoggedInEvent represents a {{.DomainName}} logged in event
type {{.DomainName | title}}LoggedInEvent struct {
	*baseEvent
	{{.DomainName | title}}ID  string `json:"{{.DomainName}}_id"`
	Email     string `json:"email"`
	SessionID string `json:"session_id"`
	IPAddress string `json:"ip_address"`
	UserAgent string `json:"user_agent"`
}

// New{{.DomainName | title}}LoggedInEvent creates a new {{.DomainName}} logged in event
func New{{.DomainName | title}}LoggedInEvent({{.DomainName}}ID, email, sessionID, ipAddress, userAgent string) DomainEvent {
	return &{{.DomainName | title}}LoggedInEvent{
		baseEvent: &baseEvent{
			eventType:   "{{.DomainName}}.logged.in",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:  {{.DomainName}}ID,
		Email:     email,
		SessionID: sessionID,
		IPAddress: ipAddress,
		UserAgent: userAgent,
	}
}

// {{.DomainName | title}}LoggedOutEvent represents a {{.DomainName}} logged out event
type {{.DomainName | title}}LoggedOutEvent struct {
	*baseEvent
	{{.DomainName | title}}ID  string `json:"{{.DomainName}}_id"`
	Email     string `json:"email"`
	SessionID string `json:"session_id"`
	Reason    string `json:"reason"`
}

// New{{.DomainName | title}}LoggedOutEvent creates a new {{.DomainName}} logged out event
func New{{.DomainName | title}}LoggedOutEvent({{.DomainName}}ID, email, sessionID, reason string) DomainEvent {
	return &{{.DomainName | title}}LoggedOutEvent{
		baseEvent: &baseEvent{
			eventType:   "{{.DomainName}}.logged.out",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:  {{.DomainName}}ID,
		Email:     email,
		SessionID: sessionID,
		Reason:    reason,
	}
}

// {{.DomainName | title}}LoginFailedEvent represents a {{.DomainName}} login failed event
type {{.DomainName | title}}LoginFailedEvent struct {
	*baseEvent
	Email     string `json:"email"`
	IPAddress string `json:"ip_address"`
	UserAgent string `json:"user_agent"`
	Reason    string `json:"reason"`
}

// New{{.DomainName | title}}LoginFailedEvent creates a new {{.DomainName}} login failed event
func New{{.DomainName | title}}LoginFailedEvent(email, ipAddress, userAgent, reason string) DomainEvent {
	return &{{.DomainName | title}}LoginFailedEvent{
		baseEvent: &baseEvent{
			eventType:   "{{.DomainName}}.login.failed",
			eventID:     generateEventID(),
			aggregateID: email, // Use email as aggregate ID when {{.DomainName}} doesn't exist
			timestamp:   time.Now(),
		},
		Email:     email,
		IPAddress: ipAddress,
		UserAgent: userAgent,
		Reason:    reason,
	}
}

// {{.DomainName | title}}RegisteredEvent represents a {{.DomainName}} registered event
type {{.DomainName | title}}RegisteredEvent struct {
	*baseEvent
	{{.DomainName | title}}ID  string `json:"{{.DomainName}}_id"`
	Email     string `json:"email"`
	IPAddress string `json:"ip_address"`
	UserAgent string `json:"user_agent"`
}

// New{{.DomainName | title}}RegisteredEvent creates a new {{.DomainName}} registered event
func New{{.DomainName | title}}RegisteredEvent({{.DomainName}}ID, email, ipAddress, userAgent string) DomainEvent {
	return &{{.DomainName | title}}RegisteredEvent{
		baseEvent: &baseEvent{
			eventType:   "{{.DomainName}}.registered",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:  {{.DomainName}}ID,
		Email:     email,
		IPAddress: ipAddress,
		UserAgent: userAgent,
	}
}

// TokenRefreshedEvent represents a token refreshed event
type TokenRefreshedEvent struct {
	*baseEvent
	{{.DomainName | title}}ID     string `json:"{{.DomainName}}_id"`
	Email        string `json:"email"`
	OldTokenID   string `json:"old_token_id"`
	NewTokenID   string `json:"new_token_id"`
	IPAddress    string `json:"ip_address"`
	UserAgent    string `json:"user_agent"`
}

// NewTokenRefreshedEvent creates a new token refreshed event
func NewTokenRefreshedEvent({{.DomainName}}ID, email, oldTokenID, newTokenID, ipAddress, userAgent string) DomainEvent {
	return &TokenRefreshedEvent{
		baseEvent: &baseEvent{
			eventType:   "token.refreshed",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:     {{.DomainName}}ID,
		Email:        email,
		OldTokenID:   oldTokenID,
		NewTokenID:   newTokenID,
		IPAddress:    ipAddress,
		UserAgent:    userAgent,
	}
}

// PasswordResetRequestedEvent represents a password reset requested event
type PasswordResetRequestedEvent struct {
	*baseEvent
	{{.DomainName | title}}ID     string `json:"{{.DomainName}}_id"`
	Email        string `json:"email"`
	ResetToken   string `json:"reset_token"`
	IPAddress    string `json:"ip_address"`
	UserAgent    string `json:"user_agent"`
}

// NewPasswordResetRequestedEvent creates a new password reset requested event
func NewPasswordResetRequestedEvent({{.DomainName}}ID, email, resetToken, ipAddress, userAgent string) DomainEvent {
	return &PasswordResetRequestedEvent{
		baseEvent: &baseEvent{
			eventType:   "password.reset.requested",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:     {{.DomainName}}ID,
		Email:        email,
		ResetToken:   resetToken,
		IPAddress:    ipAddress,
		UserAgent:    userAgent,
	}
}

// PasswordResetCompletedEvent represents a password reset completed event
type PasswordResetCompletedEvent struct {
	*baseEvent
	{{.DomainName | title}}ID     string `json:"{{.DomainName}}_id"`
	Email        string `json:"email"`
	ResetToken   string `json:"reset_token"`
	IPAddress    string `json:"ip_address"`
	UserAgent    string `json:"user_agent"`
}

// NewPasswordResetCompletedEvent creates a new password reset completed event
func NewPasswordResetCompletedEvent({{.DomainName}}ID, email, resetToken, ipAddress, userAgent string) DomainEvent {
	return &PasswordResetCompletedEvent{
		baseEvent: &baseEvent{
			eventType:   "password.reset.completed",
			eventID:     generateEventID(),
			aggregateID: {{.DomainName}}ID,
			timestamp:   time.Now(),
		},
		{{.DomainName | title}}ID:     {{.DomainName}}ID,
		Email:        email,
		ResetToken:   resetToken,
		IPAddress:    ipAddress,
		UserAgent:    userAgent,
	}
}