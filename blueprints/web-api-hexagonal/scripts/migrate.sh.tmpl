#!/bin/bash

# Database migration script for {{.ProjectName}}
# This script provides a convenient interface for database migrations

set -e

# Default configuration
CONFIG_PATH="configs/config.dev.yaml"
DIRECTION="up"
STEPS=0
FORCE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Database migration utility for {{.ProjectName}}"
    echo ""
    echo "Options:"
    echo "  -c, --config PATH     Path to configuration file (default: configs/config.dev.yaml)"
    echo "  -d, --direction DIR   Migration direction: up, down, status, reset (default: up)"
    echo "  -s, --steps N         Number of migration steps (default: 0 for all)"
    echo "  -f, --force           Force migration even if there are conflicts"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                              # Apply all pending migrations"
    echo "  $0 -d up -s 1                  # Apply next migration"
    echo "  $0 -d down -s 1                # Revert last migration"
    echo "  $0 -d status                   # Show migration status"
    echo "  $0 -d reset -f                 # Reset database (dangerous!)"
    echo "  $0 -c configs/config.prod.yaml # Use production config"
}

# Function to check if required tools are installed
check_dependencies() {
    if ! command -v go &> /dev/null; then
        print_error "Go is not installed or not in PATH"
        exit 1
    fi
    
    # Check if migration script exists
    if [ ! -f "scripts/migrate.go" ]; then
        print_error "Migration script not found: scripts/migrate.go"
        print_error "Make sure you're running this from the project root directory"
        exit 1
    fi
}

# Function to check if config file exists
check_config() {
    if [ ! -f "$CONFIG_PATH" ]; then
        print_error "Configuration file not found: $CONFIG_PATH"
        print_error "Available config files:"
        ls -la configs/ 2>/dev/null || echo "No configs directory found"
        exit 1
    fi
}

# Function to run migration
run_migration() {
    local cmd="go run scripts/migrate.go -config=\"$CONFIG_PATH\" -direction=\"$DIRECTION\""
    
    if [ "$STEPS" -ne 0 ]; then
        cmd="$cmd -steps=$STEPS"
    fi
    
    if [ "$FORCE" = true ]; then
        cmd="$cmd -force"
    fi
    
    print_status "Running migration command: $cmd"
    eval $cmd
}

# Function to confirm dangerous operations
confirm_operation() {
    if [ "$DIRECTION" = "reset" ] && [ "$FORCE" = false ]; then
        print_warning "This will reset the database and delete all data!"
        read -p "Are you sure you want to continue? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_status "Operation cancelled"
            exit 0
        fi
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--config)
            CONFIG_PATH="$2"
            shift 2
            ;;
        -d|--direction)
            DIRECTION="$2"
            shift 2
            ;;
        -s|--steps)
            STEPS="$2"
            shift 2
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate direction
case $DIRECTION in
    up|down|status|reset)
        ;;
    *)
        print_error "Invalid direction: $DIRECTION"
        print_error "Valid directions: up, down, status, reset"
        exit 1
        ;;
esac

# Validate steps
if ! [[ "$STEPS" =~ ^[0-9]+$ ]]; then
    print_error "Steps must be a positive integer"
    exit 1
fi

# Main execution
print_status "Starting database migration for {{.ProjectName}}"
print_status "Configuration: $CONFIG_PATH"
print_status "Direction: $DIRECTION"
if [ "$STEPS" -ne 0 ]; then
    print_status "Steps: $STEPS"
fi

# Check dependencies and config
check_dependencies
check_config

# Confirm dangerous operations
confirm_operation

# Run the migration
run_migration

print_status "Migration completed successfully!"