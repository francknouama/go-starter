#!/bin/bash

# Development utility script for {{.ProjectName}}
# This script provides convenient development operations

set -e

# Default configuration
CONFIG_PATH="configs/config.dev.yaml"
ACTION="help"
VERBOSE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_debug() {
    if [ "$VERBOSE" = true ]; then
        echo -e "${BLUE}[DEBUG]${NC} $1"
    fi
}

# Function to show usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Development utility for {{.ProjectName}}"
    echo ""
    echo "Options:"
    echo "  -c, --config PATH     Path to configuration file (default: configs/config.dev.yaml)"
    echo "  -a, --action ACTION   Action to perform (default: help)"
    echo "  -v, --verbose         Enable verbose logging"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Actions:"
    echo "  help        Show this help message"
    echo "  dev         Start development server with hot reload"
    echo "  build       Build the application"
    echo "  test        Run all tests"
    echo "  test-unit   Run unit tests only"
    echo "  test-integration  Run integration tests only"
    echo "  lint        Run linter"
    echo "  format      Format code"
    echo "  seed        Seed the database with test data"
    echo "  clean       Clean database test data"
    echo "  reset       Reset database (clean + seed)"
    echo "  health      Check database health"
    echo "  deps        Download and tidy dependencies"
    echo "  docker-up   Start Docker services"
    echo "  docker-down Stop Docker services"
    echo ""
    echo "Examples:"
    echo "  $0 -a dev                       # Start development server"
    echo "  $0 -a build                     # Build application"
    echo "  $0 -a test -v                   # Run tests with verbose output"
    echo "  $0 -a seed                      # Seed database with test data"
    echo "  $0 -a reset -c configs/config.test.yaml  # Reset test database"
}

# Function to check if required tools are installed
check_dependencies() {
    print_debug "Checking dependencies..."
    
    if ! command -v go &> /dev/null; then
        print_error "Go is not installed or not in PATH"
        exit 1
    fi
    
    # Check if we're in the right directory
    if [ ! -f "go.mod" ]; then
        print_error "go.mod not found. Make sure you're in the project root directory"
        exit 1
    fi
    
    print_debug "Dependencies check passed"
}

# Function to check if config file exists
check_config() {
    if [ ! -f "$CONFIG_PATH" ]; then
        print_error "Configuration file not found: $CONFIG_PATH"
        print_error "Available config files:"
        ls -la configs/ 2>/dev/null || echo "No configs directory found"
        exit 1
    fi
    print_debug "Using config: $CONFIG_PATH"
}

# Function to start development server
start_dev_server() {
    print_status "Starting development server..."
    
    # Check if air is installed for hot reload
    if command -v air &> /dev/null; then
        print_status "Using air for hot reload"
        air
    else
        print_warning "air not found. Install with: go install github.com/cosmtrek/air@latest"
        print_status "Starting server without hot reload"
        go run cmd/server/main.go
    fi
}

# Function to build the application
build_app() {
    print_status "Building application..."
    
    # Create bin directory if it doesn't exist
    mkdir -p bin
    
    # Build the application
    go build -o bin/{{.ProjectName}} cmd/server/main.go
    
    print_status "Application built successfully: bin/{{.ProjectName}}"
}

# Function to run tests
run_tests() {
    local test_type="$1"
    
    case $test_type in
        "unit")
            print_status "Running unit tests..."
            go test -v ./tests/unit/...
            ;;
        "integration")
            print_status "Running integration tests..."
            go test -v ./tests/integration/...
            ;;
        *)
            print_status "Running all tests..."
            go test -v ./...
            ;;
    esac
}

# Function to run linter
run_lint() {
    print_status "Running linter..."
    
    if command -v golangci-lint &> /dev/null; then
        golangci-lint run
    else
        print_warning "golangci-lint not found. Install with:"
        print_warning "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b \$(go env GOPATH)/bin"
        print_status "Running basic go vet instead..."
        go vet ./...
    fi
}

# Function to format code
format_code() {
    print_status "Formatting code..."
    
    go fmt ./...
    
    # Run goimports if available
    if command -v goimports &> /dev/null; then
        print_debug "Running goimports..."
        goimports -w .
    else
        print_debug "goimports not found. Install with: go install golang.org/x/tools/cmd/goimports@latest"
    fi
}

# Function to manage database
manage_database() {
    local db_action="$1"
    
    if [ ! -f "scripts/dev.go" ]; then
        print_error "Database management script not found: scripts/dev.go"
        return 1
    fi
    
    print_status "Running database $db_action..."
    
    local cmd="go run scripts/dev.go -config=\"$CONFIG_PATH\" -action=\"$db_action\""
    
    if [ "$VERBOSE" = true ]; then
        cmd="$cmd -verbose"
    fi
    
    eval $cmd
}

# Function to manage dependencies
manage_deps() {
    print_status "Downloading and tidying dependencies..."
    
    go mod download
    go mod tidy
    
    print_status "Dependencies updated successfully"
}

# Function to manage Docker services
manage_docker() {
    local docker_action="$1"
    
    if [ ! -f "docker-compose.yml" ]; then
        print_error "docker-compose.yml not found"
        return 1
    fi
    
    case $docker_action in
        "up")
            print_status "Starting Docker services..."
            docker-compose up -d
            print_status "Docker services started"
            ;;
        "down")
            print_status "Stopping Docker services..."
            docker-compose down
            print_status "Docker services stopped"
            ;;
    esac
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--config)
            CONFIG_PATH="$2"
            shift 2
            ;;
        -a|--action)
            ACTION="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main execution
print_status "{{.ProjectName}} Development Utility"
print_debug "Action: $ACTION"
print_debug "Config: $CONFIG_PATH"

# Check dependencies (except for help)
if [ "$ACTION" != "help" ]; then
    check_dependencies
fi

# Execute action
case $ACTION in
    "help")
        show_usage
        ;;
    "dev")
        check_config
        start_dev_server
        ;;
    "build")
        build_app
        ;;
    "test")
        run_tests
        ;;
    "test-unit")
        run_tests "unit"
        ;;
    "test-integration")
        run_tests "integration"
        ;;
    "lint")
        run_lint
        ;;
    "format")
        format_code
        ;;
    "seed")
        check_config
        manage_database "seed"
        ;;
    "clean")
        check_config
        manage_database "clean"
        ;;
    "reset")
        check_config
        manage_database "reset"
        ;;
    "health")
        check_config
        manage_database "health"
        ;;
    "deps")
        manage_deps
        ;;
    "docker-up")
        manage_docker "up"
        ;;
    "docker-down")
        manage_docker "down"
        ;;
    *)
        print_error "Unknown action: $ACTION"
        show_usage
        exit 1
        ;;
esac

print_status "Operation completed successfully!"