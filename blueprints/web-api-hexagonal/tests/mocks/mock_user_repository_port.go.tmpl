// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"{{.ModulePath}}/internal/domain/entities"
)

// MockUserRepositoryPort is an autogenerated mock type for the UserRepositoryPort type
type MockUserRepositoryPort struct {
	mock.Mock
}

type MockUserRepositoryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryPort) EXPECT() *MockUserRepositoryPort_Expecter {
	return &MockUserRepositoryPort_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx
func (_m *MockUserRepositoryPort) Count(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockUserRepositoryPort_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserRepositoryPort_Expecter) Count(ctx interface{}) *MockUserRepositoryPort_Count_Call {
	return &MockUserRepositoryPort_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockUserRepositoryPort_Count_Call) Run(run func(ctx context.Context)) *MockUserRepositoryPort_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserRepositoryPort_Count_Call) Return(_a0 int64, _a1 error) *MockUserRepositoryPort_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_Count_Call) RunAndReturn(run func(context.Context) (int64, error)) *MockUserRepositoryPort_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserRepositoryPort) Create(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryPort_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepositoryPort_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *MockUserRepositoryPort_Expecter) Create(ctx interface{}, user interface{}) *MockUserRepositoryPort_Create_Call {
	return &MockUserRepositoryPort_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserRepositoryPort_Create_Call) Run(run func(ctx context.Context, user *entities.User)) *MockUserRepositoryPort_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockUserRepositoryPort_Create_Call) Return(_a0 error) *MockUserRepositoryPort_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryPort_Create_Call) RunAndReturn(run func(context.Context, *entities.User) error) *MockUserRepositoryPort_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockUserRepositoryPort) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryPort_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepositoryPort_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepositoryPort_Expecter) Delete(ctx interface{}, id interface{}) *MockUserRepositoryPort_Delete_Call {
	return &MockUserRepositoryPort_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserRepositoryPort_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUserRepositoryPort_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryPort_Delete_Call) Return(_a0 error) *MockUserRepositoryPort_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryPort_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockUserRepositoryPort_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepositoryPort) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type MockUserRepositoryPort_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepositoryPort_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *MockUserRepositoryPort_ExistsByEmail_Call {
	return &MockUserRepositoryPort_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *MockUserRepositoryPort_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepositoryPort_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryPort_ExistsByEmail_Call) Return(_a0 bool, _a1 error) *MockUserRepositoryPort_ExistsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_ExistsByEmail_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserRepositoryPort_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByID provides a mock function with given fields: ctx, id
func (_m *MockUserRepositoryPort) ExistsByID(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_ExistsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByID'
type MockUserRepositoryPort_ExistsByID_Call struct {
	*mock.Call
}

// ExistsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepositoryPort_Expecter) ExistsByID(ctx interface{}, id interface{}) *MockUserRepositoryPort_ExistsByID_Call {
	return &MockUserRepositoryPort_ExistsByID_Call{Call: _e.mock.On("ExistsByID", ctx, id)}
}

func (_c *MockUserRepositoryPort_ExistsByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepositoryPort_ExistsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryPort_ExistsByID_Call) Return(_a0 bool, _a1 error) *MockUserRepositoryPort_ExistsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_ExistsByID_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserRepositoryPort_ExistsByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepositoryPort) GetByEmail(ctx context.Context, email string) (*entities.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUserRepositoryPort_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepositoryPort_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUserRepositoryPort_GetByEmail_Call {
	return &MockUserRepositoryPort_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUserRepositoryPort_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepositoryPort_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryPort_GetByEmail_Call) Return(_a0 *entities.User, _a1 error) *MockUserRepositoryPort_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *MockUserRepositoryPort_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockUserRepositoryPort) GetByID(ctx context.Context, id string) (*entities.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepositoryPort_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepositoryPort_Expecter) GetByID(ctx interface{}, id interface{}) *MockUserRepositoryPort_GetByID_Call {
	return &MockUserRepositoryPort_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockUserRepositoryPort_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockUserRepositoryPort_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryPort_GetByID_Call) Return(_a0 *entities.User, _a1 error) *MockUserRepositoryPort_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *MockUserRepositoryPort_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, limit, offset
func (_m *MockUserRepositoryPort) List(ctx context.Context, limit int, offset int) ([]*entities.User, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*entities.User, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*entities.User); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryPort_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUserRepositoryPort_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockUserRepositoryPort_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockUserRepositoryPort_List_Call {
	return &MockUserRepositoryPort_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockUserRepositoryPort_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockUserRepositoryPort_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUserRepositoryPort_List_Call) Return(_a0 []*entities.User, _a1 error) *MockUserRepositoryPort_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryPort_List_Call) RunAndReturn(run func(context.Context, int, int) ([]*entities.User, error)) *MockUserRepositoryPort_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *MockUserRepositoryPort) Update(ctx context.Context, user *entities.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryPort_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepositoryPort_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entities.User
func (_e *MockUserRepositoryPort_Expecter) Update(ctx interface{}, user interface{}) *MockUserRepositoryPort_Update_Call {
	return &MockUserRepositoryPort_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *MockUserRepositoryPort_Update_Call) Run(run func(ctx context.Context, user *entities.User)) *MockUserRepositoryPort_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *MockUserRepositoryPort_Update_Call) Return(_a0 error) *MockUserRepositoryPort_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryPort_Update_Call) RunAndReturn(run func(context.Context, *entities.User) error) *MockUserRepositoryPort_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryPort creates a new instance of MockUserRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryPort {
	mock := &MockUserRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}