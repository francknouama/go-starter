// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"{{.ModulePath}}/internal/domain/events"
)

// MockEventPublisherPort is an autogenerated mock type for the EventPublisherPort type
type MockEventPublisherPort struct {
	mock.Mock
}

type MockEventPublisherPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisherPort) EXPECT() *MockEventPublisherPort_Expecter {
	return &MockEventPublisherPort_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, event
func (_m *MockEventPublisherPort) Publish(ctx context.Context, event events.DomainEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, events.DomainEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventPublisherPort_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockEventPublisherPort_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - event events.DomainEvent
func (_e *MockEventPublisherPort_Expecter) Publish(ctx interface{}, event interface{}) *MockEventPublisherPort_Publish_Call {
	return &MockEventPublisherPort_Publish_Call{Call: _e.mock.On("Publish", ctx, event)}
}

func (_c *MockEventPublisherPort_Publish_Call) Run(run func(ctx context.Context, event events.DomainEvent)) *MockEventPublisherPort_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.DomainEvent))
	})
	return _c
}

func (_c *MockEventPublisherPort_Publish_Call) Return(_a0 error) *MockEventPublisherPort_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventPublisherPort_Publish_Call) RunAndReturn(run func(context.Context, events.DomainEvent) error) *MockEventPublisherPort_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBatch provides a mock function with given fields: ctx, events
func (_m *MockEventPublisherPort) PublishBatch(ctx context.Context, events []events.DomainEvent) error {
	ret := _m.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []events.DomainEvent) error); ok {
		r0 = rf(ctx, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventPublisherPort_PublishBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBatch'
type MockEventPublisherPort_PublishBatch_Call struct {
	*mock.Call
}

// PublishBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - events []events.DomainEvent
func (_e *MockEventPublisherPort_Expecter) PublishBatch(ctx interface{}, events interface{}) *MockEventPublisherPort_PublishBatch_Call {
	return &MockEventPublisherPort_PublishBatch_Call{Call: _e.mock.On("PublishBatch", ctx, events)}
}

func (_c *MockEventPublisherPort_PublishBatch_Call) Run(run func(ctx context.Context, events []events.DomainEvent)) *MockEventPublisherPort_PublishBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]events.DomainEvent))
	})
	return _c
}

func (_c *MockEventPublisherPort_PublishBatch_Call) Return(_a0 error) *MockEventPublisherPort_PublishBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventPublisherPort_PublishBatch_Call) RunAndReturn(run func(context.Context, []events.DomainEvent) error) *MockEventPublisherPort_PublishBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisherPort creates a new instance of MockEventPublisherPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisherPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisherPort {
	mock := &MockEventPublisherPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}