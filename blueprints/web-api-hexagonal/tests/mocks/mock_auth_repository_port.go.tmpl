{{- if ne .AuthType ""}}
// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"{{.ModulePath}}/internal/domain/entities"
)

// MockAuthRepositoryPort is an autogenerated mock type for the AuthRepositoryPort type
type MockAuthRepositoryPort struct {
	mock.Mock
}

type MockAuthRepositoryPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepositoryPort) EXPECT() *MockAuthRepositoryPort_Expecter {
	return &MockAuthRepositoryPort_Expecter{mock: &_m.Mock}
}

// CreateRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *MockAuthRepositoryPort) CreateRefreshToken(ctx context.Context, refreshToken *entities.RefreshToken) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.RefreshToken) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepositoryPort_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type MockAuthRepositoryPort_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken *entities.RefreshToken
func (_e *MockAuthRepositoryPort_Expecter) CreateRefreshToken(ctx interface{}, refreshToken interface{}) *MockAuthRepositoryPort_CreateRefreshToken_Call {
	return &MockAuthRepositoryPort_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", ctx, refreshToken)}
}

func (_c *MockAuthRepositoryPort_CreateRefreshToken_Call) Run(run func(ctx context.Context, refreshToken *entities.RefreshToken)) *MockAuthRepositoryPort_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.RefreshToken))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_CreateRefreshToken_Call) Return(_a0 error) *MockAuthRepositoryPort_CreateRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepositoryPort_CreateRefreshToken_Call) RunAndReturn(run func(context.Context, *entities.RefreshToken) error) *MockAuthRepositoryPort_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *MockAuthRepositoryPort) CreateSession(ctx context.Context, session *entities.AuthSession) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.AuthSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepositoryPort_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockAuthRepositoryPort_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *entities.AuthSession
func (_e *MockAuthRepositoryPort_Expecter) CreateSession(ctx interface{}, session interface{}) *MockAuthRepositoryPort_CreateSession_Call {
	return &MockAuthRepositoryPort_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, session)}
}

func (_c *MockAuthRepositoryPort_CreateSession_Call) Run(run func(ctx context.Context, session *entities.AuthSession)) *MockAuthRepositoryPort_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.AuthSession))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_CreateSession_Call) Return(_a0 error) *MockAuthRepositoryPort_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepositoryPort_CreateSession_Call) RunAndReturn(run func(context.Context, *entities.AuthSession) error) *MockAuthRepositoryPort_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredSessions provides a mock function with given fields: ctx
func (_m *MockAuthRepositoryPort) DeleteExpiredSessions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepositoryPort_DeleteExpiredSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredSessions'
type MockAuthRepositoryPort_DeleteExpiredSessions_Call struct {
	*mock.Call
}

// DeleteExpiredSessions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthRepositoryPort_Expecter) DeleteExpiredSessions(ctx interface{}) *MockAuthRepositoryPort_DeleteExpiredSessions_Call {
	return &MockAuthRepositoryPort_DeleteExpiredSessions_Call{Call: _e.mock.On("DeleteExpiredSessions", ctx)}
}

func (_c *MockAuthRepositoryPort_DeleteExpiredSessions_Call) Run(run func(ctx context.Context)) *MockAuthRepositoryPort_DeleteExpiredSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteExpiredSessions_Call) Return(_a0 error) *MockAuthRepositoryPort_DeleteExpiredSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteExpiredSessions_Call) RunAndReturn(run func(context.Context) error) *MockAuthRepositoryPort_DeleteExpiredSessions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRefreshToken provides a mock function with given fields: ctx, token
func (_m *MockAuthRepositoryPort) DeleteRefreshToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepositoryPort_DeleteRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefreshToken'
type MockAuthRepositoryPort_DeleteRefreshToken_Call struct {
	*mock.Call
}

// DeleteRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthRepositoryPort_Expecter) DeleteRefreshToken(ctx interface{}, token interface{}) *MockAuthRepositoryPort_DeleteRefreshToken_Call {
	return &MockAuthRepositoryPort_DeleteRefreshToken_Call{Call: _e.mock.On("DeleteRefreshToken", ctx, token)}
}

func (_c *MockAuthRepositoryPort_DeleteRefreshToken_Call) Run(run func(ctx context.Context, token string)) *MockAuthRepositoryPort_DeleteRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteRefreshToken_Call) Return(_a0 error) *MockAuthRepositoryPort_DeleteRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteRefreshToken_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthRepositoryPort_DeleteRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *MockAuthRepositoryPort) DeleteSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepositoryPort_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockAuthRepositoryPort_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockAuthRepositoryPort_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *MockAuthRepositoryPort_DeleteSession_Call {
	return &MockAuthRepositoryPort_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *MockAuthRepositoryPort_DeleteSession_Call) Run(run func(ctx context.Context, sessionID string)) *MockAuthRepositoryPort_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteSession_Call) Return(_a0 error) *MockAuthRepositoryPort_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepositoryPort_DeleteSession_Call) RunAndReturn(run func(context.Context, string) error) *MockAuthRepositoryPort_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenByToken provides a mock function with given fields: ctx, token
func (_m *MockAuthRepositoryPort) GetRefreshTokenByToken(ctx context.Context, token string) (*entities.RefreshToken, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenByToken")
	}

	var r0 *entities.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.RefreshToken, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.RefreshToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepositoryPort_GetRefreshTokenByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenByToken'
type MockAuthRepositoryPort_GetRefreshTokenByToken_Call struct {
	*mock.Call
}

// GetRefreshTokenByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthRepositoryPort_Expecter) GetRefreshTokenByToken(ctx interface{}, token interface{}) *MockAuthRepositoryPort_GetRefreshTokenByToken_Call {
	return &MockAuthRepositoryPort_GetRefreshTokenByToken_Call{Call: _e.mock.On("GetRefreshTokenByToken", ctx, token)}
}

func (_c *MockAuthRepositoryPort_GetRefreshTokenByToken_Call) Run(run func(ctx context.Context, token string)) *MockAuthRepositoryPort_GetRefreshTokenByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_GetRefreshTokenByToken_Call) Return(_a0 *entities.RefreshToken, _a1 error) *MockAuthRepositoryPort_GetRefreshTokenByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepositoryPort_GetRefreshTokenByToken_Call) RunAndReturn(run func(context.Context, string) (*entities.RefreshToken, error)) *MockAuthRepositoryPort_GetRefreshTokenByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByID provides a mock function with given fields: ctx, sessionID
func (_m *MockAuthRepositoryPort) GetSessionByID(ctx context.Context, sessionID string) (*entities.AuthSession, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByID")
	}

	var r0 *entities.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.AuthSession, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.AuthSession); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepositoryPort_GetSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByID'
type MockAuthRepositoryPort_GetSessionByID_Call struct {
	*mock.Call
}

// GetSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockAuthRepositoryPort_Expecter) GetSessionByID(ctx interface{}, sessionID interface{}) *MockAuthRepositoryPort_GetSessionByID_Call {
	return &MockAuthRepositoryPort_GetSessionByID_Call{Call: _e.mock.On("GetSessionByID", ctx, sessionID)}
}

func (_c *MockAuthRepositoryPort_GetSessionByID_Call) Run(run func(ctx context.Context, sessionID string)) *MockAuthRepositoryPort_GetSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_GetSessionByID_Call) Return(_a0 *entities.AuthSession, _a1 error) *MockAuthRepositoryPort_GetSessionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepositoryPort_GetSessionByID_Call) RunAndReturn(run func(context.Context, string) (*entities.AuthSession, error)) *MockAuthRepositoryPort_GetSessionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionByToken provides a mock function with given fields: ctx, token
func (_m *MockAuthRepositoryPort) GetSessionByToken(ctx context.Context, token string) (*entities.AuthSession, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionByToken")
	}

	var r0 *entities.AuthSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.AuthSession, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.AuthSession); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AuthSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepositoryPort_GetSessionByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionByToken'
type MockAuthRepositoryPort_GetSessionByToken_Call struct {
	*mock.Call
}

// GetSessionByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthRepositoryPort_Expecter) GetSessionByToken(ctx interface{}, token interface{}) *MockAuthRepositoryPort_GetSessionByToken_Call {
	return &MockAuthRepositoryPort_GetSessionByToken_Call{Call: _e.mock.On("GetSessionByToken", ctx, token)}
}

func (_c *MockAuthRepositoryPort_GetSessionByToken_Call) Run(run func(ctx context.Context, token string)) *MockAuthRepositoryPort_GetSessionByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepositoryPort_GetSessionByToken_Call) Return(_a0 *entities.AuthSession, _a1 error) *MockAuthRepositoryPort_GetSessionByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepositoryPort_GetSessionByToken_Call) RunAndReturn(run func(context.Context, string) (*entities.AuthSession, error)) *MockAuthRepositoryPort_GetSessionByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepositoryPort creates a new instance of MockAuthRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepositoryPort {
	mock := &MockAuthRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
{{- end}}