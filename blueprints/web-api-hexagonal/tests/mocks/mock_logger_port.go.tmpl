// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"github.com/stretchr/testify/mock"
)

// MockLoggerPort is an autogenerated mock type for the LoggerPort type
type MockLoggerPort struct {
	mock.Mock
}

type MockLoggerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoggerPort) EXPECT() *MockLoggerPort_Expecter {
	return &MockLoggerPort_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: message, fields
func (_m *MockLoggerPort) Debug(message string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// MockLoggerPort_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLoggerPort_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - message string
//   - fields ...interface{}
func (_e *MockLoggerPort_Expecter) Debug(message interface{}, fields ...interface{}) *MockLoggerPort_Debug_Call {
	return &MockLoggerPort_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLoggerPort_Debug_Call) Run(run func(message string, fields ...interface{})) *MockLoggerPort_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerPort_Debug_Call) Return() *MockLoggerPort_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerPort_Debug_Call) RunAndReturn(run func(string, ...interface{})) *MockLoggerPort_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: message, fields
func (_m *MockLoggerPort) Error(message string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// MockLoggerPort_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLoggerPort_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message string
//   - fields ...interface{}
func (_e *MockLoggerPort_Expecter) Error(message interface{}, fields ...interface{}) *MockLoggerPort_Error_Call {
	return &MockLoggerPort_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLoggerPort_Error_Call) Run(run func(message string, fields ...interface{})) *MockLoggerPort_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerPort_Error_Call) Return() *MockLoggerPort_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerPort_Error_Call) RunAndReturn(run func(string, ...interface{})) *MockLoggerPort_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: message, fields
func (_m *MockLoggerPort) Info(message string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// MockLoggerPort_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLoggerPort_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - fields ...interface{}
func (_e *MockLoggerPort_Expecter) Info(message interface{}, fields ...interface{}) *MockLoggerPort_Info_Call {
	return &MockLoggerPort_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLoggerPort_Info_Call) Run(run func(message string, fields ...interface{})) *MockLoggerPort_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerPort_Info_Call) Return() *MockLoggerPort_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerPort_Info_Call) RunAndReturn(run func(string, ...interface{})) *MockLoggerPort_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: message, fields
func (_m *MockLoggerPort) Warn(message string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// MockLoggerPort_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLoggerPort_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - message string
//   - fields ...interface{}
func (_e *MockLoggerPort_Expecter) Warn(message interface{}, fields ...interface{}) *MockLoggerPort_Warn_Call {
	return &MockLoggerPort_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{message}, fields...)...)}
}

func (_c *MockLoggerPort_Warn_Call) Run(run func(message string, fields ...interface{})) *MockLoggerPort_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerPort_Warn_Call) Return() *MockLoggerPort_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerPort_Warn_Call) RunAndReturn(run func(string, ...interface{})) *MockLoggerPort_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggerPort creates a new instance of MockLoggerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggerPort {
	mock := &MockLoggerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}