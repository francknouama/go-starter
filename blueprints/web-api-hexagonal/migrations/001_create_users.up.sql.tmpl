-- Create {{.DomainName}}s table
CREATE TABLE {{.DomainName}}s (
    id VARCHAR(36) PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at BIGINT NOT NULL,
    updated_at BIGINT NOT NULL
);

-- Create index on email for faster lookups
CREATE INDEX idx_{{.DomainName}}s_email ON {{.DomainName}}s(email);

-- Create index on created_at for sorting
CREATE INDEX idx_{{.DomainName}}s_created_at ON {{.DomainName}}s(created_at DESC);

{{- if ne .AuthType ""}}
-- Create auth_sessions table for session management
CREATE TABLE auth_sessions (
    session_id VARCHAR(36) PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at BIGINT NOT NULL,
    created_at BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES {{.DomainName}}s(id) ON DELETE CASCADE
);

-- Create index on user_id for faster lookups
CREATE INDEX idx_auth_sessions_user_id ON auth_sessions(user_id);

-- Create index on token for faster lookups
CREATE INDEX idx_auth_sessions_token ON auth_sessions(token);

-- Create index on expires_at for cleanup
CREATE INDEX idx_auth_sessions_expires_at ON auth_sessions(expires_at);

-- Create refresh_tokens table for token refresh
CREATE TABLE refresh_tokens (
    token VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    expires_at BIGINT NOT NULL,
    created_at BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES {{.DomainName}}s(id) ON DELETE CASCADE
);

-- Create index on user_id for faster lookups
CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);

-- Create index on expires_at for cleanup
CREATE INDEX idx_refresh_tokens_expires_at ON refresh_tokens(expires_at);

-- Create password_reset_tokens table for password recovery
CREATE TABLE password_reset_tokens (
    token VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    expires_at BIGINT NOT NULL,
    created_at BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES {{.DomainName}}s(id) ON DELETE CASCADE
);

-- Create index on user_id for faster lookups
CREATE INDEX idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);

-- Create index on expires_at for cleanup
CREATE INDEX idx_password_reset_tokens_expires_at ON password_reset_tokens(expires_at);
{{- end}}

-- Insert default admin user (password: admin123)
INSERT INTO {{.DomainName}}s (
    id, 
    email, 
    first_name, 
    last_name, 
    password_hash, 
    created_at, 
    updated_at
) VALUES (
    'admin-user-id-00000000-0000-0000-0000-000000000000',
    'admin@{{.ProjectName}}.com',
    'Admin',
    'User',
    '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', -- password: admin123
    EXTRACT(EPOCH FROM NOW()),
    EXTRACT(EPOCH FROM NOW())
);

-- Create trigger to automatically update updated_at timestamp
{{- if eq .DatabaseDriver "postgres"}}
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = EXTRACT(EPOCH FROM NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_{{.DomainName}}s_updated_at BEFORE UPDATE ON {{.DomainName}}s
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
{{- else if eq .DatabaseDriver "mysql"}}
-- MySQL trigger for updating updated_at timestamp
CREATE TRIGGER update_{{.DomainName}}s_updated_at
    BEFORE UPDATE ON {{.DomainName}}s
    FOR EACH ROW
    SET NEW.updated_at = UNIX_TIMESTAMP();
{{- end}}