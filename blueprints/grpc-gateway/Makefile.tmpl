# {{.ProjectName}} Makefile

# Build configuration
BINARY_NAME={{.ProjectName}}
BUILD_DIR=./bin
PROTO_DIR=./proto
GEN_DIR=./gen

# Go configuration
GO_VERSION={{.GoVersion}}
GOOS=$(shell go env GOOS)
GOARCH=$(shell go env GOARCH)

# Protobuf and gRPC Gateway tools
PROTOC=protoc
PROTOC_GEN_GO=$(shell which protoc-gen-go)
PROTOC_GEN_GO_GRPC=$(shell which protoc-gen-go-grpc)
PROTOC_GEN_GRPC_GATEWAY=$(shell which protoc-gen-grpc-gateway)
PROTOC_GEN_OPENAPIV2=$(shell which protoc-gen-openapiv2)

.PHONY: help build run test clean generate install-tools docker dev certs certs-dev certs-prod

# Default target
all: generate build

help: ## Show this help message
	@echo "{{.ProjectName}} - gRPC Gateway Service"
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-20s %s\n", $$1, $$2}'

install-tools: ## Install required protobuf and gRPC tools
	@echo "Installing protobuf and gRPC tools..."
	go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
	go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

generate: ## Generate protobuf and gRPC Gateway code (using buf)
	@echo "Generating protobuf code with buf..."
	@mkdir -p $(GEN_DIR)
	@mkdir -p ./api
	@if command -v buf >/dev/null 2>&1; then \
		buf generate; \
	else \
		echo "Warning: buf not found, using protoc fallback..."; \
		$(MAKE) protoc-generate; \
	fi

protoc-generate: ## Generate code using protoc (fallback method)
	@echo "Generating protobuf code with protoc..."
	@mkdir -p $(GEN_DIR)
	@mkdir -p ./api
	$(PROTOC) \
		--proto_path=$(PROTO_DIR) \
		--go_out=$(GEN_DIR) \
		--go_opt=paths=source_relative \
		--go-grpc_out=$(GEN_DIR) \
		--go-grpc_opt=paths=source_relative \
		--grpc-gateway_out=$(GEN_DIR) \
		--grpc-gateway_opt=paths=source_relative \
		--openapiv2_out=./api \
		--openapiv2_opt=logtostderr=true \
		$(shell find $(PROTO_DIR) -name "*.proto")

buf-generate: ## Generate code using buf (alias for generate)
	@$(MAKE) generate

build: generate ## Build the application
	@echo "Building {{.ProjectName}}..."
	@mkdir -p $(BUILD_DIR)
	go build -o $(BUILD_DIR)/$(BINARY_NAME) ./cmd/server

run: build ## Build and run the application
	@echo "Starting {{.ProjectName}}..."
	$(BUILD_DIR)/$(BINARY_NAME)

dev: generate ## Run in development mode with hot reload
	@echo "Starting {{.ProjectName}} in development mode..."
	go run ./cmd/server

test: generate ## Run tests
	@echo "Running tests..."
	go test -v ./...

test-coverage: generate ## Run tests with coverage
	@echo "Running tests with coverage..."
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html

lint: ## Run linters
	@echo "Running linters..."
	golangci-lint run

format: ## Format code
	@echo "Formatting code..."
	go fmt ./...
	go mod tidy

clean: ## Clean build artifacts
	@echo "Cleaning..."
	rm -rf $(BUILD_DIR)
	rm -rf $(GEN_DIR)
	rm -f coverage.out coverage.html

# TLS Certificate targets
certs: certs-dev ## Generate development TLS certificates (alias for certs-dev)

certs-dev: ## Generate development TLS certificates
	@echo "Generating development TLS certificates..."
	@chmod +x ./scripts/generate-certs.sh
	@./scripts/generate-certs.sh

certs-prod: ## Show production certificate setup guide
	@echo "Production certificate setup guide..."
	@chmod +x ./scripts/generate-prod-certs.sh
	@./scripts/generate-prod-certs.sh

certs-clean: ## Remove generated certificates
	@echo "Removing certificates..."
	rm -rf ./certs/

docker-build: ## Build Docker image
	@echo "Building Docker image..."
	docker build -t {{.ProjectName}}:latest .

docker-run: docker-build ## Build and run Docker container
	@echo "Running Docker container..."
	docker run -p {{.HttpPort}}:{{.HttpPort}} -p {{.GrpcPort}}:{{.GrpcPort}} {{.ProjectName}}:latest

docker-compose-up: ## Start services with docker-compose
	@echo "Starting services with docker-compose..."
	docker-compose up --build

docker-compose-down: ## Stop docker-compose services
	@echo "Stopping docker-compose services..."
	docker-compose down

# gRPC client testing (with TLS)
grpc-health: ## Test gRPC health endpoint (TLS)
	@echo "Testing gRPC health endpoint with TLS..."
	grpcurl -cacert ./certs/ca.crt -servername localhost localhost:{{.GrpcPort}} health.v1.HealthService/Check

grpc-user-list: ## Test gRPC user list endpoint (TLS)
	@echo "Testing gRPC user list endpoint with TLS..."
	grpcurl -cacert ./certs/ca.crt -servername localhost localhost:{{.GrpcPort}} user.v1.UserService/ListUsers

grpc-health-insecure: ## Test gRPC health endpoint (insecure - only if TLS disabled)
	@echo "Testing gRPC health endpoint (insecure)..."
	grpcurl -plaintext localhost:{{.GrpcPort}} health.v1.HealthService/Check

# REST API testing (with TLS)
rest-health: ## Test REST health endpoint (TLS)
	@echo "Testing REST health endpoint with TLS..."
	curl -s --cacert ./certs/ca.crt https://localhost:{{.HttpPort}}/health | jq

rest-user-list: ## Test REST user list endpoint (TLS)
	@echo "Testing REST user list endpoint with TLS..."
	curl -s --cacert ./certs/ca.crt https://localhost:{{.HttpPort}}/api/v1/users | jq

rest-health-insecure: ## Test REST health endpoint (insecure - skip TLS verification)
	@echo "Testing REST health endpoint (insecure)..."
	curl -s -k https://localhost:{{.HttpPort}}/health | jq

# Development helpers
deps: ## Download dependencies
	@echo "Downloading dependencies..."
	go mod download

vendor: ## Create vendor directory
	@echo "Creating vendor directory..."
	go mod vendor

update-deps: ## Update dependencies
	@echo "Updating dependencies..."
	go get -u ./...
	go mod tidy

check: generate lint test ## Run all checks (lint + test)

# CI/CD helpers
ci: check ## Run CI pipeline locally

release: clean build ## Build release version
	@echo "Building release..."
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o $(BUILD_DIR)/$(BINARY_NAME)-linux-amd64 ./cmd/server
	CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-amd64 ./cmd/server
	CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe ./cmd/server