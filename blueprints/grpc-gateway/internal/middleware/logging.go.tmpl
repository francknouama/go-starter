package middleware

import (
	"context"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"{{.ModulePath}}/internal/logger"
)

// LoggingInterceptor returns a new unary server interceptor that logs requests
func LoggingInterceptor(log logger.Logger) grpc.UnaryServerInterceptor {
	return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
		start := time.Now()

		// Log the incoming request
		log.Info("gRPC request started",
			"method", info.FullMethod,
			"request_id", getRequestID(ctx),
		)

		// Call the handler
		resp, err := handler(ctx, req)

		// Calculate duration
		duration := time.Since(start)

		// Determine the status code
		code := codes.OK
		if err != nil {
			if s, ok := status.FromError(err); ok {
				code = s.Code()
			} else {
				code = codes.Unknown
			}
		}

		// Log the response
		if err != nil {
			log.Error("gRPC request failed",
				"method", info.FullMethod,
				"duration_ms", duration.Milliseconds(),
				"code", code.String(),
				"error", err,
				"request_id", getRequestID(ctx),
			)
		} else {
			log.Info("gRPC request completed",
				"method", info.FullMethod,
				"duration_ms", duration.Milliseconds(),
				"code", code.String(),
				"request_id", getRequestID(ctx),
			)
		}

		return resp, err
	}
}

// StreamLoggingInterceptor returns a new streaming server interceptor that logs requests
func StreamLoggingInterceptor(log logger.Logger) grpc.StreamServerInterceptor {
	return func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {
		start := time.Now()

		// Log the incoming stream
		log.Info("gRPC stream started",
			"method", info.FullMethod,
			"is_client_stream", info.IsClientStream,
			"is_server_stream", info.IsServerStream,
			"request_id", getRequestID(stream.Context()),
		)

		// Call the handler
		err := handler(srv, stream)

		// Calculate duration
		duration := time.Since(start)

		// Log the result
		if err != nil {
			log.Error("gRPC stream failed",
				"method", info.FullMethod,
				"duration_ms", duration.Milliseconds(),
				"error", err,
				"request_id", getRequestID(stream.Context()),
			)
		} else {
			log.Info("gRPC stream completed",
				"method", info.FullMethod,
				"duration_ms", duration.Milliseconds(),
				"request_id", getRequestID(stream.Context()),
			)
		}

		return err
	}
}

// getRequestID extracts the request ID from the context
func getRequestID(ctx context.Context) string {
	// TODO: Implement request ID extraction from context
	// This would typically come from metadata or a context value
	return "unknown"
}