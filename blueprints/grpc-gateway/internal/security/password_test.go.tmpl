{{- if ne .AuthType ""}}
package security

import (
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"golang.org/x/crypto/bcrypt"

	"{{.ModulePath}}/internal/logger"
)

// nullLogger is a no-op logger for testing
type nullLogger struct{}

func (l *nullLogger) Debug(msg string, keysAndValues ...interface{}) {}
func (l *nullLogger) Info(msg string, keysAndValues ...interface{})  {}
func (l *nullLogger) Warn(msg string, keysAndValues ...interface{})  {}
func (l *nullLogger) Error(msg string, keysAndValues ...interface{}) {}
func (l *nullLogger) Fatal(msg string, keysAndValues ...interface{}) {}
func (l *nullLogger) With(keysAndValues ...interface{}) logger.Logger { return l }
func (l *nullLogger) WithError(err error) logger.Logger { return l }

func newNullLogger() logger.Logger {
	return &nullLogger{}
}

func TestPasswordService(t *testing.T) {
	logger := newNullLogger() // Use null logger for tests
	service := NewPasswordService(logger)

	t.Run("HashPassword", func(t *testing.T) {
		tests := []struct {
			name        string
			password    string
			expectError bool
			errorType   error
		}{
			{
				name:        "valid password",
				password:    "SecurePassword123!",
				expectError: false,
			},
			{
				name:        "minimum length password",
				password:    "12345678",
				expectError: false,
			},
			{
				name:        "maximum length password",
				password:    strings.Repeat("a", MaxPasswordLength),
				expectError: false,
			},
			{
				name:        "empty password",
				password:    "",
				expectError: true,
				errorType:   ErrEmptyPassword,
			},
			{
				name:        "too short password",
				password:    "1234567",
				expectError: true,
				errorType:   ErrPasswordTooShort,
			},
			{
				name:        "too long password",
				password:    strings.Repeat("a", MaxPasswordLength+1),
				expectError: true,
				errorType:   ErrPasswordTooLong,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				hash, err := service.HashPassword(tt.password)

				if tt.expectError {
					assert.Error(t, err)
					assert.Equal(t, tt.errorType, err)
					assert.Empty(t, hash)
				} else {
					assert.NoError(t, err)
					assert.NotEmpty(t, hash)
					
					// Verify the hash is a valid bcrypt hash
					assert.True(t, service.IsHashValid(hash))
					
					// Verify the cost factor is correct
					cost, err := service.GetHashCost(hash)
					assert.NoError(t, err)
					assert.Equal(t, BcryptCost, cost)
					
					// Verify the hash is different from the password
					assert.NotEqual(t, tt.password, hash)
					
					// Verify the hash starts with bcrypt prefix
					assert.True(t, strings.HasPrefix(hash, "$2a$") || strings.HasPrefix(hash, "$2b$"))
				}
			})
		}
	})

	t.Run("VerifyPassword", func(t *testing.T) {
		validPassword := "TestPassword123!"
		validHash, err := service.HashPassword(validPassword)
		require.NoError(t, err)

		tests := []struct {
			name         string
			hashedPwd    string
			password     string
			expectError  bool
			expectedErr  error
		}{
			{
				name:        "valid password verification",
				hashedPwd:   validHash,
				password:    validPassword,
				expectError: false,
			},
			{
				name:        "invalid password",
				hashedPwd:   validHash,
				password:    "WrongPassword123!",
				expectError: true,
				expectedErr: ErrInvalidPassword,
			},
			{
				name:        "empty password",
				hashedPwd:   validHash,
				password:    "",
				expectError: true,
				expectedErr: ErrEmptyPassword,
			},
			{
				name:        "empty hash",
				hashedPwd:   "",
				password:    validPassword,
				expectError: true,
				expectedErr: ErrInvalidPassword,
			},
			{
				name:        "invalid hash format",
				hashedPwd:   "invalid_hash",
				password:    validPassword,
				expectError: true,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				err := service.VerifyPassword(tt.hashedPwd, tt.password)

				if tt.expectError {
					assert.Error(t, err)
					if tt.expectedErr != nil {
						assert.Equal(t, tt.expectedErr, err)
					}
				} else {
					assert.NoError(t, err)
				}
			})
		}
	})

	t.Run("ValidatePassword", func(t *testing.T) {
		tests := []struct {
			name        string
			password    string
			expectError bool
			expectedErr error
		}{
			{
				name:        "valid password",
				password:    "ValidPassword123!",
				expectError: false,
			},
			{
				name:        "minimum length",
				password:    "12345678",
				expectError: false,
			},
			{
				name:        "maximum length",
				password:    strings.Repeat("a", MaxPasswordLength),
				expectError: false,
			},
			{
				name:        "empty password",
				password:    "",
				expectError: true,
				expectedErr: ErrEmptyPassword,
			},
			{
				name:        "too short",
				password:    "1234567",
				expectError: true,
				expectedErr: ErrPasswordTooShort,
			},
			{
				name:        "too long",
				password:    strings.Repeat("a", MaxPasswordLength+1),
				expectError: true,
				expectedErr: ErrPasswordTooLong,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				err := service.ValidatePassword(tt.password)

				if tt.expectError {
					assert.Error(t, err)
					assert.Equal(t, tt.expectedErr, err)
				} else {
					assert.NoError(t, err)
				}
			})
		}
	})

	t.Run("IsHashValid", func(t *testing.T) {
		validHash, err := service.HashPassword("TestPassword123!")
		require.NoError(t, err)

		tests := []struct {
			name     string
			hash     string
			expected bool
		}{
			{
				name:     "valid bcrypt hash",
				hash:     validHash,
				expected: true,
			},
			{
				name:     "empty hash",
				hash:     "",
				expected: false,
			},
			{
				name:     "invalid hash format",
				hash:     "invalid_hash",
				expected: false,
			},
			{
				name:     "plain text",
				hash:     "plaintext_password",
				expected: false,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				result := service.IsHashValid(tt.hash)
				assert.Equal(t, tt.expected, result)
			})
		}
	})

	t.Run("GetHashCost", func(t *testing.T) {
		validHash, err := service.HashPassword("TestPassword123!")
		require.NoError(t, err)

		cost, err := service.GetHashCost(validHash)
		assert.NoError(t, err)
		assert.Equal(t, BcryptCost, cost)

		// Test invalid hash
		_, err = service.GetHashCost("invalid_hash")
		assert.Error(t, err)
	})

	t.Run("NeedsRehash", func(t *testing.T) {
		// Create hash with lower cost
		lowCostHash, err := bcrypt.GenerateFromPassword([]byte("TestPassword123!"), 10)
		require.NoError(t, err)

		// Create hash with current cost
		currentCostHash, err := service.HashPassword("TestPassword123!")
		require.NoError(t, err)

		tests := []struct {
			name     string
			hash     string
			expected bool
		}{
			{
				name:     "low cost hash needs rehash",
				hash:     string(lowCostHash),
				expected: true,
			},
			{
				name:     "current cost hash doesn't need rehash",
				hash:     currentCostHash,
				expected: false,
			},
			{
				name:     "invalid hash needs rehash",
				hash:     "invalid_hash",
				expected: true,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				result := service.NeedsRehash(tt.hash)
				assert.Equal(t, tt.expected, result)
			})
		}
	})

	t.Run("SecureEqual", func(t *testing.T) {
		tests := []struct {
			name     string
			a        string
			b        string
			expected bool
		}{
			{
				name:     "equal strings",
				a:        "hello",
				b:        "hello",
				expected: true,
			},
			{
				name:     "different strings",
				a:        "hello",
				b:        "world",
				expected: false,
			},
			{
				name:     "empty strings",
				a:        "",
				b:        "",
				expected: true,
			},
			{
				name:     "one empty string",
				a:        "hello",
				b:        "",
				expected: false,
			},
		}

		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				result := service.SecureEqual(tt.a, tt.b)
				assert.Equal(t, tt.expected, result)
			})
		}
	})
}

func TestPasswordServiceConcurrency(t *testing.T) {
	logger := newNullLogger()
	service := NewPasswordService(logger)
	password := "ConcurrentTestPassword123!"

	// Test concurrent hashing
	t.Run("concurrent hashing", func(t *testing.T) {
		const numGoroutines = 10
		results := make(chan string, numGoroutines)
		errors := make(chan error, numGoroutines)

		for i := 0; i < numGoroutines; i++ {
			go func() {
				hash, err := service.HashPassword(password)
				if err != nil {
					errors <- err
					return
				}
				results <- hash
			}()
		}

		// Collect results
		var hashes []string
		for i := 0; i < numGoroutines; i++ {
			select {
			case hash := <-results:
				hashes = append(hashes, hash)
			case err := <-errors:
				t.Fatalf("Unexpected error during concurrent hashing: %v", err)
			case <-time.After(time.Second * 5):
				t.Fatal("Timeout waiting for concurrent hashing results")
			}
		}

		// Verify all hashes are different (salted)
		assert.Len(t, hashes, numGoroutines)
		for i, hash1 := range hashes {
			for j, hash2 := range hashes {
				if i != j {
					assert.NotEqual(t, hash1, hash2, "Hashes should be different due to salt")
				}
			}
		}

		// Verify all hashes are valid
		for _, hash := range hashes {
			err := service.VerifyPassword(hash, password)
			assert.NoError(t, err)
		}
	})
}

func TestPasswordServiceTimingAttacks(t *testing.T) {
	logger := newNullLogger()
	service := NewPasswordService(logger)

	t.Run("verify password timing", func(t *testing.T) {
		validPassword := "TimingTestPassword123!"
		validHash, err := service.HashPassword(validPassword)
		require.NoError(t, err)

		// Measure time for correct password
		start := time.Now()
		err = service.VerifyPassword(validHash, validPassword)
		validDuration := time.Since(start)
		assert.NoError(t, err)

		// Measure time for incorrect password
		start = time.Now()
		err = service.VerifyPassword(validHash, "WrongPassword123!")
		invalidDuration := time.Since(start)
		assert.Error(t, err)

		// The timing should be similar (within reasonable bounds)
		// bcrypt itself provides timing attack resistance
		timeDiff := validDuration - invalidDuration
		if timeDiff < 0 {
			timeDiff = -timeDiff
		}

		// Allow up to 50ms difference (bcrypt timing naturally varies)
		assert.Less(t, timeDiff, time.Millisecond*50, 
			"Timing difference too large, potential timing attack vulnerability")
	})
}

func BenchmarkPasswordService(b *testing.B) {
	logger := newNullLogger()
	service := NewPasswordService(logger)
	password := "BenchmarkPassword123!"

	b.Run("HashPassword", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			_, err := service.HashPassword(password)
			if err != nil {
				b.Fatal(err)
			}
		}
	})

	// Pre-compute hash for verification benchmark
	hash, err := service.HashPassword(password)
	if err != nil {
		b.Fatal(err)
	}

	b.Run("VerifyPassword", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			err := service.VerifyPassword(hash, password)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}
{{- end}}