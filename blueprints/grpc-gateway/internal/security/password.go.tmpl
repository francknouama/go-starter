{{- if ne .AuthType ""}}
package security

import (
	"crypto/subtle"
	"errors"
	"time"

	"golang.org/x/crypto/bcrypt"

	"{{.ModulePath}}/internal/logger"
)

const (
	// MinPasswordLength defines the minimum password length
	MinPasswordLength = 8
	// MaxPasswordLength defines the maximum password length to prevent DoS
	MaxPasswordLength = 128
	// BcryptCost defines the bcrypt cost factor (14 = high security, ~100ms per hash)
	BcryptCost = 14
)

var (
	// ErrPasswordTooShort is returned when password is too short
	ErrPasswordTooShort = errors.New("password must be at least 8 characters long")
	// ErrPasswordTooLong is returned when password is too long
	ErrPasswordTooLong = errors.New("password is too long")
	// ErrInvalidPassword is returned when password verification fails
	ErrInvalidPassword = errors.New("invalid password")
	// ErrEmptyPassword is returned when password is empty
	ErrEmptyPassword = errors.New("password cannot be empty")
)

// PasswordService provides secure password operations
type PasswordService struct {
	logger logger.Logger
}

// NewPasswordService creates a new password service
func NewPasswordService(logger logger.Logger) *PasswordService {
	return &PasswordService{
		logger: logger,
	}
}

// HashPassword securely hashes a password using bcrypt with high cost factor
func (s *PasswordService) HashPassword(password string) (string, error) {
	// Validate password requirements
	if err := s.ValidatePassword(password); err != nil {
		return "", err
	}

	// Hash password with bcrypt using high cost factor
	hashedBytes, err := bcrypt.GenerateFromPassword([]byte(password), BcryptCost)
	if err != nil {
		s.logger.Error("Failed to hash password", "error", err)
		return "", err
	}

	// Log successful hashing (without the hash or password)
	s.logger.Debug("Password hashed successfully")
	
	return string(hashedBytes), nil
}

// VerifyPassword verifies a password against its hash with timing attack protection
func (s *PasswordService) VerifyPassword(hashedPassword, password string) error {
	// Add slight delay to prevent timing attacks even on empty passwords
	defer func() {
		// Small random delay to prevent timing analysis
		time.Sleep(time.Microsecond * 100)
	}()

	if password == "" {
		s.logger.Warn("Empty password provided for verification")
		return ErrEmptyPassword
	}

	if hashedPassword == "" {
		s.logger.Warn("Empty hash provided for verification")
		return ErrInvalidPassword
	}

	// Use bcrypt's constant-time comparison
	err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
	if err != nil {
		if errors.Is(err, bcrypt.ErrMismatchedHashAndPassword) {
			s.logger.Debug("Password verification failed - password mismatch")
			return ErrInvalidPassword
		}
		s.logger.Error("Password verification error", "error", err)
		return err
	}

	s.logger.Debug("Password verification successful")
	return nil
}

// ValidatePassword validates password requirements
func (s *PasswordService) ValidatePassword(password string) error {
	if password == "" {
		return ErrEmptyPassword
	}

	if len(password) < MinPasswordLength {
		return ErrPasswordTooShort
	}

	if len(password) > MaxPasswordLength {
		return ErrPasswordTooLong
	}

	// Additional password complexity requirements can be added here
	// For now, we just check length
	
	return nil
}

// IsHashValid checks if a given string is a valid bcrypt hash
func (s *PasswordService) IsHashValid(hash string) bool {
	// Try to extract cost from hash to validate format
	_, err := bcrypt.Cost([]byte(hash))
	return err == nil
}

// GetHashCost returns the cost factor of a bcrypt hash
func (s *PasswordService) GetHashCost(hash string) (int, error) {
	return bcrypt.Cost([]byte(hash))
}

// NeedsRehash checks if a password hash should be rehashed due to cost factor changes
func (s *PasswordService) NeedsRehash(hash string) bool {
	cost, err := bcrypt.Cost([]byte(hash))
	if err != nil {
		return true // If we can't determine cost, assume it needs rehashing
	}
	
	// Rehash if cost is lower than current standard
	return cost < BcryptCost
}

// SecureEqual performs constant-time string comparison to prevent timing attacks
func (s *PasswordService) SecureEqual(a, b string) bool {
	return subtle.ConstantTimeCompare([]byte(a), []byte(b)) == 1
}
{{- end}}