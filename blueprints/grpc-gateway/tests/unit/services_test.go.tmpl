package unit

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"{{.ModulePath}}/internal/logger"
	{{- if ne .DatabaseDriver ""}}
	"{{.ModulePath}}/internal/models"
	{{- end}}
	"{{.ModulePath}}/internal/services"
	healthv1 "{{.ModulePath}}/gen/health/v1"
	userv1 "{{.ModulePath}}/gen/user/v1"
)

// mockUserRepository is a mock implementation of the user repository
type mockUserRepository struct {
	mock.Mock
}

func (m *mockUserRepository) Create(ctx context.Context, user *models.User) error {
	args := m.Called(ctx, user)
	return args.Error(0)
}

func (m *mockUserRepository) GetByID(ctx context.Context, id string) (*models.User, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(*models.User), args.Error(1)
}

func (m *mockUserRepository) GetByEmail(ctx context.Context, email string) (*models.User, error) {
	args := m.Called(ctx, email)
	return args.Get(0).(*models.User), args.Error(1)
}

func (m *mockUserRepository) List(ctx context.Context, limit, offset int32) ([]*models.User, int64, error) {
	args := m.Called(ctx, limit, offset)
	return args.Get(0).([]*models.User), args.Get(1).(int64), args.Error(2)
}

func (m *mockUserRepository) Update(ctx context.Context, user *models.User) error {
	args := m.Called(ctx, user)
	return args.Error(0)
}

func (m *mockUserRepository) Delete(ctx context.Context, id string) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

// mockLogger is a simple mock logger for testing
type mockLogger struct{}

func (l *mockLogger) Debug(msg string, keysAndValues ...interface{}) {}
func (l *mockLogger) Info(msg string, keysAndValues ...interface{})  {}
func (l *mockLogger) Warn(msg string, keysAndValues ...interface{})  {}
func (l *mockLogger) Error(msg string, keysAndValues ...interface{}) {}
func (l *mockLogger) Fatal(msg string, keysAndValues ...interface{}) {}
func (l *mockLogger) With(keysAndValues ...interface{}) logger.Logger {
	return l
}

func TestHealthService(t *testing.T) {
	log := &mockLogger{}
	healthService := services.NewHealthService(log)

	t.Run("Check", func(t *testing.T) {
		req := &healthv1.HealthCheckRequest{}
		resp, err := healthService.Check(context.Background(), req)

		require.NoError(t, err)
		assert.Equal(t, healthv1.HealthCheckResponse_SERVING, resp.Status)
	})

	t.Run("Watch", func(t *testing.T) {
		// Since this is a streaming endpoint, we'll test the initial response
		req := &healthv1.HealthCheckRequest{}
		
		// Create a mock server stream
		// This would require more complex mocking for the full streaming test
		// For now, we'll test that the service exists and can be called
		assert.NotNil(t, healthService)
		
		// Test that the method exists
		resp, err := healthService.Check(context.Background(), req)
		require.NoError(t, err)
		assert.Equal(t, healthv1.HealthCheckResponse_SERVING, resp.Status)
	})
}

func TestUserService(t *testing.T) {
	log := &mockLogger{}
	mockRepo := new(mockUserRepository)
	
	{{if ne .DatabaseDriver ""}}
	userService := services.NewUserService(mockRepo, log)
	{{else}}
	userService := services.NewUserService(log)
	{{end}}

	t.Run("CreateUser_Success", func(t *testing.T) {
		{{if ne .DatabaseDriver ""}}
		mockRepo.On("Create", mock.Anything, mock.AnythingOfType("*models.User")).Return(nil)
		{{end}}

		req := &userv1.CreateUserRequest{
			Email: "test@example.com",
			Name:  "Test User",
		}

		resp, err := userService.CreateUser(context.Background(), req)

		{{if ne .DatabaseDriver ""}}
		require.NoError(t, err)
		assert.NotEmpty(t, resp.User.Id)
		assert.Equal(t, "test@example.com", resp.User.Email)
		assert.Equal(t, "Test User", resp.User.Name)
		mockRepo.AssertExpectations(t)
		{{else}}
		// When no database is configured, this should return unimplemented
		assert.Error(t, err)
		st, ok := status.FromError(err)
		assert.True(t, ok)
		assert.Equal(t, codes.Unimplemented, st.Code())
		{{end}}
	})

	t.Run("CreateUser_InvalidEmail", func(t *testing.T) {
		req := &userv1.CreateUserRequest{
			Email: "invalid-email",
			Name:  "Test User",
		}

		resp, err := userService.CreateUser(context.Background(), req)

		assert.Error(t, err)
		assert.Nil(t, resp)
		st, ok := status.FromError(err)
		assert.True(t, ok)
		assert.Equal(t, codes.InvalidArgument, st.Code())
	})

	t.Run("CreateUser_EmptyName", func(t *testing.T) {
		req := &userv1.CreateUserRequest{
			Email: "test@example.com",
			Name:  "",
		}

		resp, err := userService.CreateUser(context.Background(), req)

		assert.Error(t, err)
		assert.Nil(t, resp)
		st, ok := status.FromError(err)
		assert.True(t, ok)
		assert.Equal(t, codes.InvalidArgument, st.Code())
	})

	{{if ne .DatabaseDriver ""}}
	t.Run("GetUser_Success", func(t *testing.T) {
		userID := "test-user-id"
		expectedUser := &models.User{
			ID:    userID,
			Email: "test@example.com",
			Name:  "Test User",
		}

		mockRepo.On("GetByID", mock.Anything, userID).Return(expectedUser, nil)

		req := &userv1.GetUserRequest{
			Id: userID,
		}

		resp, err := userService.GetUser(context.Background(), req)

		require.NoError(t, err)
		assert.Equal(t, userID, resp.User.Id)
		assert.Equal(t, "test@example.com", resp.User.Email)
		assert.Equal(t, "Test User", resp.User.Name)
		mockRepo.AssertExpectations(t)
	})

	t.Run("GetUser_NotFound", func(t *testing.T) {
		userID := "nonexistent-user-id"
		
		mockRepo.On("GetByID", mock.Anything, userID).Return((*models.User)(nil), services.ErrUserNotFound)

		req := &userv1.GetUserRequest{
			Id: userID,
		}

		resp, err := userService.GetUser(context.Background(), req)

		assert.Error(t, err)
		assert.Nil(t, resp)
		st, ok := status.FromError(err)
		assert.True(t, ok)
		assert.Equal(t, codes.NotFound, st.Code())
		mockRepo.AssertExpectations(t)
	})

	t.Run("ListUsers_Success", func(t *testing.T) {
		expectedUsers := []*models.User{
			{ID: "1", Email: "user1@example.com", Name: "User 1"},
			{ID: "2", Email: "user2@example.com", Name: "User 2"},
		}
		expectedCount := int64(2)

		mockRepo.On("List", mock.Anything, int32(10), int32(0)).Return(expectedUsers, expectedCount, nil)

		req := &userv1.ListUsersRequest{
			Limit:  10,
			Offset: 0,
		}

		resp, err := userService.ListUsers(context.Background(), req)

		require.NoError(t, err)
		assert.Len(t, resp.Users, 2)
		assert.Equal(t, expectedCount, resp.TotalCount)
		assert.Equal(t, "user1@example.com", resp.Users[0].Email)
		assert.Equal(t, "user2@example.com", resp.Users[1].Email)
		mockRepo.AssertExpectations(t)
	})
	{{else}}
	t.Run("GetUser_Unimplemented", func(t *testing.T) {
		req := &userv1.GetUserRequest{
			Id: "test-id",
		}

		resp, err := userService.GetUser(context.Background(), req)

		assert.Error(t, err)
		assert.Nil(t, resp)
		st, ok := status.FromError(err)
		assert.True(t, ok)
		assert.Equal(t, codes.Unimplemented, st.Code())
	})
	{{end}}
}