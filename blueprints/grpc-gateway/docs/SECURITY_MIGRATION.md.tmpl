{{- if ne .AuthType ""}}
# Security Migration Guide: Password Hashing

This document outlines the migration strategy for converting existing plain text passwords to secure bcrypt hashes.

## Overview

The {{.ProjectName}} application has been updated to use secure bcrypt password hashing with a cost factor of 14. This migration guide helps you safely transition from plain text passwords to hashed passwords.

## ⚠️ CRITICAL SECURITY WARNING

**NEVER RUN THIS APPLICATION IN PRODUCTION WITH PLAIN TEXT PASSWORDS**

If you have existing data with plain text passwords, you must complete this migration before deploying to production.

## Migration Strategy

### Option 1: Force Password Reset (Recommended)

This is the safest approach that ensures all passwords are properly secured:

1. **Deploy the new application** with bcrypt hashing enabled
2. **Invalidate all existing sessions** to force re-authentication
3. **Reset all user passwords** and require users to create new ones
4. **Send password reset emails** to all users with secure reset links

#### Implementation Steps:

```sql
-- Step 1: Add a migration flag column
ALTER TABLE users ADD COLUMN password_migrated BOOLEAN DEFAULT FALSE;

-- Step 2: Mark all existing users as needing password reset
UPDATE users SET password_migrated = FALSE WHERE password IS NOT NULL;

-- Step 3: Clear existing passwords (make them NULL)
UPDATE users SET password = NULL WHERE password_migrated = FALSE;
```

```go
// In your user service, check migration status
func (s *UserService) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
    user, err := s.userRepo.GetByEmail(ctx, req.Email)
    if err != nil {
        return nil, err
    }
    
    // Check if user needs password reset
    if !user.PasswordMigrated || user.Password == "" {
        return nil, ErrPasswordResetRequired
    }
    
    // Continue with normal login flow...
}
```

### Option 2: Runtime Migration (Development Only)

**⚠️ ONLY use this for development/testing environments with trusted data**

This approach converts plain text passwords to hashes during the first login:

```go
func (s *AuthService) Login(ctx context.Context, req *LoginRequest) (*LoginResponse, error) {
    user, err := s.userRepo.GetByEmail(ctx, req.Email)
    if err != nil {
        return nil, err
    }
    
    // Check if password is plain text (not a bcrypt hash)
    if !s.passwordService.IsHashValid(user.Password) {
        // Verify plain text password
        if user.Password != req.Password {
            return nil, ErrInvalidCredentials
        }
        
        // Hash the password immediately
        hashedPassword, err := s.passwordService.HashPassword(req.Password)
        if err != nil {
            return nil, ErrPasswordHashing
        }
        
        // Update user with hashed password
        updateUser := &repository.User{
            ID:       user.ID,
            Password: hashedPassword,
        }
        
        _, err = s.userRepo.Update(ctx, updateUser)
        if err != nil {
            s.logger.Error("Failed to migrate password to hash", "user_id", user.ID, "error", err)
            return nil, ErrAuthServiceError
        }
        
        s.logger.Info("Migrated plain text password to hash", "user_id", user.ID)
        user.Password = hashedPassword
    } else {
        // Normal bcrypt verification
        err = s.passwordService.VerifyPassword(user.Password, req.Password)
        if err != nil {
            return nil, ErrInvalidCredentials
        }
    }
    
    // Continue with normal login flow...
}
```

### Option 3: Offline Migration Script

For large datasets, use an offline migration script:

```go
package main

import (
    "context"
    "fmt"
    "log"
    
    "{{.ModulePath}}/internal/config"
    "{{.ModulePath}}/internal/database"
    "{{.ModulePath}}/internal/logger"
    "{{.ModulePath}}/internal/repository"
    "{{.ModulePath}}/internal/security"
)

func main() {
    // Initialize dependencies
    cfg := config.Load()
    logger := logger.New(cfg.Logger)
    db := database.New(cfg.Database)
    userRepo := repository.NewUserRepository(db, logger)
    passwordService := security.NewPasswordService(logger)
    
    ctx := context.Background()
    
    // Get all users with plain text passwords
    users, _, _, err := userRepo.List(ctx, 1000, "")
    if err != nil {
        log.Fatal("Failed to list users:", err)
    }
    
    for _, user := range users {
        // Skip if already hashed
        if passwordService.IsHashValid(user.Password) {
            continue
        }
        
        // Hash the plain text password
        hashedPassword, err := passwordService.HashPassword(user.Password)
        if err != nil {
            log.Printf("Failed to hash password for user %s: %v", user.ID, err)
            continue
        }
        
        // Update user with hashed password
        updateUser := &repository.User{
            ID:       user.ID,
            Password: hashedPassword,
        }
        
        _, err = userRepo.Update(ctx, updateUser)
        if err != nil {
            log.Printf("Failed to update user %s: %v", user.ID, err)
            continue
        }
        
        fmt.Printf("Migrated password for user %s\n", user.ID)
    }
    
    fmt.Println("Migration completed")
}
```

## Database Schema Updates

### Required Columns

Ensure your users table has the following structure:

```sql
CREATE TABLE users (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255), -- Will store bcrypt hash (60 characters)
    password_migrated BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Add index for email lookups
CREATE INDEX idx_users_email ON users(email);

-- Add index for migration status
CREATE INDEX idx_users_password_migrated ON users(password_migrated);
```

### Column Size Requirements

- **Password column**: Must accommodate bcrypt hashes (60 characters minimum)
- **Use VARCHAR(255)** to be safe for future hash algorithms

## Security Validation

After migration, verify the security implementation:

### 1. Password Hash Validation

```bash
# Test that passwords are properly hashed
curl -X POST http://localhost:8080/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"password123"}'

# Verify database contains hashes, not plain text
SELECT id, email, LEFT(password, 10) as password_prefix FROM users LIMIT 5;
# Should show: $2a$14$... (bcrypt prefix)
```

### 2. Security Scanner

Run security scanning tools:

```bash
# Install gosec
go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

# Scan for security issues
gosec ./...

# Should show NO issues related to password storage
```

### 3. Test Authentication

Verify that authentication works correctly:

```bash
# Test login with correct password
curl -X POST http://localhost:8080/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"user@example.com","password":"correctpassword"}'

# Test login with incorrect password (should fail)
curl -X POST http://localhost:8080/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"user@example.com","password":"wrongpassword"}'
```

## Production Deployment Checklist

Before deploying to production:

- [ ] All passwords converted to bcrypt hashes
- [ ] Plain text passwords removed from database
- [ ] Password validation tests passing
- [ ] Security scanner shows no password-related vulnerabilities
- [ ] Authentication flow tested thoroughly
- [ ] Password reset functionality implemented and tested
- [ ] Monitoring and logging configured (without logging passwords)
- [ ] Database backup completed before migration
- [ ] Rollback plan documented and tested

## Rollback Strategy

If issues arise during migration:

1. **Stop the application** immediately
2. **Restore database** from pre-migration backup
3. **Implement Option 1** (force password reset) instead
4. **Investigate and fix** the issue before retry

## Security Best Practices

### Password Policy

Implement these password requirements:

- Minimum 8 characters (configurable)
- Maximum 128 characters (prevent DoS)
- Consider complexity requirements based on your security needs

### Additional Security Measures

1. **Rate limiting** on login attempts
2. **Account lockout** after failed attempts
3. **Password history** to prevent reuse
4. **Multi-factor authentication** for enhanced security
5. **Regular security audits** and penetration testing

## Support and Troubleshooting

### Common Issues

1. **"Invalid password" errors**: Verify migration completed correctly
2. **Performance issues**: Monitor bcrypt operation time (~100ms is normal)
3. **Database errors**: Check password column size (min 60 chars)

### Monitoring

Monitor these metrics post-migration:

- Login success/failure rates
- Authentication response times
- Password hash collision detection
- Security scanner results

For additional support, contact your security team or refer to the application documentation.
{{- end}}