#!/bin/bash

# Production Certificate Generation Guide for {{.ProjectName}}
# This script provides guidance for generating production certificates
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_header() {
    echo "=================================================="
    echo "  Production Certificate Generation Guide"
    echo "  Project: {{.ProjectName}}"
    echo "=================================================="
    echo ""
}

print_letsencrypt_guide() {
    log_step "1. Using Let's Encrypt (Recommended for web-facing services)"
    echo ""
    echo "For production services exposed to the internet, use Let's Encrypt:"
    echo ""
    echo "# Install certbot"
    echo "sudo apt-get update && sudo apt-get install certbot  # Ubuntu/Debian"
    echo "brew install certbot  # macOS"
    echo ""
    echo "# Generate certificates"
    echo "sudo certbot certonly --standalone -d your-domain.com -d api.your-domain.com"
    echo ""
    echo "# Certificates will be stored in:"
    echo "/etc/letsencrypt/live/your-domain.com/fullchain.pem  # Certificate"
    echo "/etc/letsencrypt/live/your-domain.com/privkey.pem    # Private key"
    echo ""
    echo "# Set environment variables:"
    echo "export TLS_CERT_FILE=/etc/letsencrypt/live/your-domain.com/fullchain.pem"
    echo "export TLS_KEY_FILE=/etc/letsencrypt/live/your-domain.com/privkey.pem"
    echo ""
    echo "# Auto-renewal (add to crontab):"
    echo "0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload {{.ProjectName}}"
    echo ""
}

print_ca_guide() {
    log_step "2. Using your organization's Certificate Authority"
    echo ""
    echo "For internal services or when using corporate CA:"
    echo ""
    echo "# Generate private key"
    echo "openssl genrsa -out server.key 4096"
    echo ""
    echo "# Create certificate signing request (CSR)"
    echo "openssl req -new -key server.key -out server.csr \\"
    echo "    -subj \"/C=US/ST=State/L=City/O=YourOrg/CN=your-service.internal\""
    echo ""
    echo "# Submit server.csr to your CA for signing"
    echo "# They will provide you with the signed certificate"
    echo ""
    echo "# Set environment variables:"
    echo "export TLS_CERT_FILE=/path/to/your/server.crt"
    echo "export TLS_KEY_FILE=/path/to/your/server.key"
    echo "export TLS_CA_FILE=/path/to/your/ca.crt"
    echo ""
}

print_selfsigned_prod_guide() {
    log_step "3. Self-signed certificates for internal services"
    echo ""
    log_warn "Only use self-signed certificates for internal services!"
    echo ""
    echo "# Generate production self-signed certificates"
    echo "mkdir -p /etc/{{.ProjectName}}/certs"
    echo "cd /etc/{{.ProjectName}}/certs"
    echo ""
    echo "# Generate CA"
    echo "openssl genrsa -out ca.key 4096"
    echo "openssl req -new -x509 -key ca.key -out ca.crt -days 3650 \\"
    echo "    -subj \"/C=US/ST=State/L=City/O=YourOrg/CN=YourOrg Root CA\""
    echo ""
    echo "# Generate server certificate"
    echo "openssl genrsa -out server.key 4096"
    echo "openssl req -new -key server.key -out server.csr \\"
    echo "    -subj \"/C=US/ST=State/L=City/O=YourOrg/CN=your-service.internal\""
    echo ""
    echo "# Create certificate with SAN"
    echo "cat > server.conf <<EOF"
    echo "[v3_req]"
    echo "keyUsage = keyEncipherment, dataEncipherment"
    echo "extendedKeyUsage = serverAuth"
    echo "subjectAltName = @alt_names"
    echo ""
    echo "[alt_names]"
    echo "DNS.1 = your-service.internal"
    echo "DNS.2 = *.your-service.internal"
    echo "IP.1 = 10.0.0.100"
    echo "EOF"
    echo ""
    echo "openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \\"
    echo "    -CAcreateserial -out server.crt -days 365 \\"
    echo "    -extensions v3_req -extfile server.conf"
    echo ""
    echo "# Set permissions"
    echo "chmod 600 *.key"
    echo "chmod 644 *.crt"
    echo "chown {{.ProjectName}}:{{.ProjectName}} *"
    echo ""
}

print_kubernetes_guide() {
    log_step "4. Kubernetes TLS setup"
    echo ""
    echo "For Kubernetes deployments:"
    echo ""
    echo "# Using cert-manager (recommended)"
    echo "kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml"
    echo ""
    echo "# Create ClusterIssuer for Let's Encrypt"
    echo "cat <<EOF | kubectl apply -f -"
    echo "apiVersion: cert-manager.io/v1"
    echo "kind: ClusterIssuer"
    echo "metadata:"
    echo "  name: letsencrypt-prod"
    echo "spec:"
    echo "  acme:"
    echo "    server: https://acme-v02.api.letsencrypt.org/directory"
    echo "    email: your-email@domain.com"
    echo "    privateKeySecretRef:"
    echo "      name: letsencrypt-prod"
    echo "    solvers:"
    echo "    - http01:"
    echo "        ingress:"
    echo "          class: nginx"
    echo "EOF"
    echo ""
    echo "# Create Certificate resource"
    echo "cat <<EOF | kubectl apply -f -"
    echo "apiVersion: cert-manager.io/v1"
    echo "kind: Certificate"
    echo "metadata:"
    echo "  name: {{.ProjectName}}-tls"
    echo "  namespace: default"
    echo "spec:"
    echo "  secretName: {{.ProjectName}}-tls-secret"
    echo "  issuerRef:"
    echo "    name: letsencrypt-prod"
    echo "    kind: ClusterIssuer"
    echo "  dnsNames:"
    echo "  - api.your-domain.com"
    echo "EOF"
    echo ""
    echo "# Mount the secret in your deployment"
    echo "# The certificate will be available at:"
    echo "# /etc/certs/tls.crt"
    echo "# /etc/certs/tls.key"
    echo ""
}

print_docker_guide() {
    log_step "5. Docker deployment with TLS"
    echo ""
    echo "For Docker deployments:"
    echo ""
    echo "# Using Docker Compose with Let's Encrypt"
    echo "version: '3.8'"
    echo "services:"
    echo "  {{.ProjectName}}:"
    echo "    image: {{.ProjectName}}:latest"
    echo "    volumes:"
    echo "      - /etc/letsencrypt/live/your-domain.com:/etc/certs:ro"
    echo "    environment:"
    echo "      - TLS_CERT_FILE=/etc/certs/fullchain.pem"
    echo "      - TLS_KEY_FILE=/etc/certs/privkey.pem"
    echo "      - TLS_SERVER_NAME=your-domain.com"
    echo "    ports:"
    echo "      - \"{{.HttpPort | default 8080}}:{{.HttpPort | default 8080}}\""
    echo "      - \"{{.GrpcPort | default 50051}}:{{.GrpcPort | default 50051}}\""
    echo ""
    echo "# Using Docker secrets"
    echo "docker secret create {{.ProjectName}}_tls_cert /path/to/server.crt"
    echo "docker secret create {{.ProjectName}}_tls_key /path/to/server.key"
    echo ""
    echo "# In your service definition:"
    echo "services:"
    echo "  {{.ProjectName}}:"
    echo "    secrets:"
    echo "      - {{.ProjectName}}_tls_cert"
    echo "      - {{.ProjectName}}_tls_key"
    echo "    environment:"
    echo "      - TLS_CERT_FILE=/run/secrets/{{.ProjectName}}_tls_cert"
    echo "      - TLS_KEY_FILE=/run/secrets/{{.ProjectName}}_tls_key"
    echo ""
}

print_security_best_practices() {
    log_step "6. Security Best Practices"
    echo ""
    log_warn "IMPORTANT SECURITY CONSIDERATIONS:"
    echo ""
    echo "✓ Always use TLS 1.3 minimum in production"
    echo "✓ Store private keys with restricted permissions (600)"
    echo "✓ Use strong key sizes (RSA 4096 or ECDSA P-384)"
    echo "✓ Implement certificate rotation/renewal"
    echo "✓ Monitor certificate expiration"
    echo "✓ Use proper SAN (Subject Alternative Names)"
    echo "✓ Disable weak cipher suites"
    echo "✓ Enable OCSP stapling"
    echo "✓ Use certificate pinning for critical services"
    echo "✓ Regularly audit TLS configuration"
    echo ""
    echo "Certificate expiration monitoring:"
    echo "openssl x509 -in /path/to/cert.crt -noout -enddate"
    echo ""
    echo "Test TLS configuration:"
    echo "openssl s_client -connect your-domain.com:{{.GrpcPort | default 50051}} -tls1_3"
    echo ""
}

print_environment_variables() {
    log_step "7. Environment Variables Reference"
    echo ""
    echo "Required environment variables for production:"
    echo ""
    echo "# TLS Configuration"
    echo "TLS_CERT_FILE=/path/to/certificate.crt"
    echo "TLS_KEY_FILE=/path/to/private.key"
    echo "TLS_CA_FILE=/path/to/ca.crt                    # Optional: for client cert verification"
    echo "TLS_MIN_VERSION=1.3                            # Minimum TLS version"
    echo "TLS_SERVER_NAME=your-service.domain.com        # Server name for TLS"
    echo ""
    echo "# Service Configuration"
    echo "ENVIRONMENT=production"
    echo "HTTP_PORT={{.HttpPort | default 8080}}"
    echo "GRPC_PORT={{.GrpcPort | default 50051}}"
    echo ""
    echo "# Optional: Disable TLS for development only"
    echo "# TLS_ENABLED=false  # WARNING: Never use in production!"
    echo ""
}

main() {
    print_header
    
    log_info "This guide helps you set up TLS certificates for production deployment."
    log_warn "NEVER use the development certificates in production!"
    echo ""
    
    print_letsencrypt_guide
    print_ca_guide
    print_selfsigned_prod_guide
    print_kubernetes_guide
    print_docker_guide
    print_security_best_practices
    print_environment_variables
    
    echo "=================================================="
    log_info "Production certificate setup guide completed!"
    echo "=================================================="
    echo ""
    log_info "For development certificates, run: ./scripts/generate-certs.sh"
    log_warn "Remember: This service requires TLS to be enabled for security."
    log_warn "To disable TLS (development only), set TLS_ENABLED=false"
    echo ""
}

main "$@"