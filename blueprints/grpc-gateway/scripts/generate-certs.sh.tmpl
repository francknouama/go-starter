#!/bin/bash

# Certificate Generation Script for {{.ProjectName}}
# This script generates self-signed certificates for development and testing
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CERTS_DIR="${SCRIPT_DIR}/../certs"
PROJECT_NAME="{{.ProjectName}}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to generate CA certificate
generate_ca() {
    log_info "Generating Certificate Authority (CA) certificate..."
    
    openssl genrsa -out "${CERTS_DIR}/ca.key" 4096
    
    openssl req -new -x509 -key "${CERTS_DIR}/ca.key" \
        -out "${CERTS_DIR}/ca.crt" \
        -days 365 \
        -subj "/C=US/ST=CA/L=San Francisco/O=${PROJECT_NAME}/OU=Development/CN=${PROJECT_NAME} CA"
        
    log_info "CA certificate generated successfully"
}

# Function to generate server certificate
generate_server_cert() {
    log_info "Generating server certificate..."
    
    # Generate server private key
    openssl genrsa -out "${CERTS_DIR}/server.key" 4096
    
    # Create certificate signing request
    openssl req -new -key "${CERTS_DIR}/server.key" \
        -out "${CERTS_DIR}/server.csr" \
        -subj "/C=US/ST=CA/L=San Francisco/O=${PROJECT_NAME}/OU=Development/CN=localhost"
    
    # Create server certificate config
    cat > "${CERTS_DIR}/server.conf" <<EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = US
ST = CA
L = San Francisco
O = ${PROJECT_NAME}
OU = Development
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = ${PROJECT_NAME}.local
DNS.3 = *.${PROJECT_NAME}.local
IP.1 = 127.0.0.1
IP.2 = ::1
EOF
    
    # Sign the server certificate with CA
    openssl x509 -req -in "${CERTS_DIR}/server.csr" \
        -CA "${CERTS_DIR}/ca.crt" \
        -CAkey "${CERTS_DIR}/ca.key" \
        -CAcreateserial \
        -out "${CERTS_DIR}/server.crt" \
        -days 365 \
        -extensions v3_req \
        -extfile "${CERTS_DIR}/server.conf"
        
    # Clean up temporary files
    rm "${CERTS_DIR}/server.csr" "${CERTS_DIR}/server.conf"
    
    log_info "Server certificate generated successfully"
}

# Function to generate client certificate
generate_client_cert() {
    log_info "Generating client certificate..."
    
    # Generate client private key
    openssl genrsa -out "${CERTS_DIR}/client.key" 4096
    
    # Create certificate signing request
    openssl req -new -key "${CERTS_DIR}/client.key" \
        -out "${CERTS_DIR}/client.csr" \
        -subj "/C=US/ST=CA/L=San Francisco/O=${PROJECT_NAME}/OU=Development/CN=${PROJECT_NAME}-client"
    
    # Sign the client certificate with CA
    openssl x509 -req -in "${CERTS_DIR}/client.csr" \
        -CA "${CERTS_DIR}/ca.crt" \
        -CAkey "${CERTS_DIR}/ca.key" \
        -CAcreateserial \
        -out "${CERTS_DIR}/client.crt" \
        -days 365 \
        -extensions client_cert \
        -extfile <(echo -e "[client_cert]\nkeyUsage=digitalSignature\nextendedKeyUsage=clientAuth")
        
    # Clean up temporary files
    rm "${CERTS_DIR}/client.csr"
    
    log_info "Client certificate generated successfully"
}

# Function to set proper permissions
set_permissions() {
    log_info "Setting proper file permissions..."
    
    # Set restrictive permissions on private keys
    chmod 600 "${CERTS_DIR}"/*.key
    
    # Set read permissions on certificates
    chmod 644 "${CERTS_DIR}"/*.crt
    
    log_info "File permissions set successfully"
}

# Function to verify certificates
verify_certificates() {
    log_info "Verifying generated certificates..."
    
    # Verify server certificate
    if openssl verify -CAfile "${CERTS_DIR}/ca.crt" "${CERTS_DIR}/server.crt" > /dev/null 2>&1; then
        log_info "Server certificate verification: PASSED"
    else
        log_error "Server certificate verification: FAILED"
        return 1
    fi
    
    # Verify client certificate
    if openssl verify -CAfile "${CERTS_DIR}/ca.crt" "${CERTS_DIR}/client.crt" > /dev/null 2>&1; then
        log_info "Client certificate verification: PASSED"
    else
        log_error "Client certificate verification: FAILED"
        return 1
    fi
    
    # Check certificate expiration
    server_expiry=$(openssl x509 -in "${CERTS_DIR}/server.crt" -noout -enddate | cut -d= -f2)
    log_info "Server certificate expires: ${server_expiry}"
    
    client_expiry=$(openssl x509 -in "${CERTS_DIR}/client.crt" -noout -enddate | cut -d= -f2)
    log_info "Client certificate expires: ${client_expiry}"
}

# Function to print certificate information
print_cert_info() {
    log_info "Certificate Information:"
    echo "=========================="
    echo "CA Certificate: ${CERTS_DIR}/ca.crt"
    echo "Server Certificate: ${CERTS_DIR}/server.crt"
    echo "Server Private Key: ${CERTS_DIR}/server.key"
    echo "Client Certificate: ${CERTS_DIR}/client.crt"
    echo "Client Private Key: ${CERTS_DIR}/client.key"
    echo ""
    echo "For development, add the CA certificate to your system's trust store:"
    echo "  macOS: sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ${CERTS_DIR}/ca.crt"
    echo "  Linux: sudo cp ${CERTS_DIR}/ca.crt /usr/local/share/ca-certificates/ && sudo update-ca-certificates"
    echo ""
    echo "Environment variables for production:"
    echo "  TLS_CERT_FILE=${CERTS_DIR}/server.crt"
    echo "  TLS_KEY_FILE=${CERTS_DIR}/server.key"
    echo "  TLS_CA_FILE=${CERTS_DIR}/ca.crt"
}

# Main function
main() {
    log_info "Starting certificate generation for ${PROJECT_NAME}..."
    
    # Check if OpenSSL is available
    if ! command -v openssl >/dev/null 2>&1; then
        log_error "OpenSSL is not installed. Please install OpenSSL and try again."
        exit 1
    fi
    
    # Create certs directory if it doesn't exist
    mkdir -p "${CERTS_DIR}"
    
    # Check if certificates already exist
    if [[ -f "${CERTS_DIR}/server.crt" && -f "${CERTS_DIR}/server.key" ]]; then
        log_warn "Certificates already exist in ${CERTS_DIR}"
        read -p "Do you want to regenerate them? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Keeping existing certificates"
            exit 0
        fi
        log_info "Regenerating certificates..."
    fi
    
    # Generate certificates
    generate_ca
    generate_server_cert
    generate_client_cert
    set_permissions
    verify_certificates
    print_cert_info
    
    log_info "Certificate generation completed successfully!"
}

# Run main function
main "$@"