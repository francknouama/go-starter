# {{.ProjectName}}

> An enterprise-grade command-line application built with Go and Cobra

[![CI](https://github.com/{{.Author}}/{{.ProjectName}}/workflows/CI/badge.svg)](https://github.com/{{.Author}}/{{.ProjectName}}/actions)
[![Go Report Card](https://goreportcard.com/badge/{{.ModulePath}})](https://goreportcard.com/report/{{.ModulePath}})
[![License](https://img.shields.io/badge/license-{{.License}}-blue.svg)](LICENSE)
[![Go Version](https://img.shields.io/badge/go-{{.GoVersion}}+-brightgreen.svg)](https://golang.org)

{{.ProjectName}} is a professional-grade CLI application that demonstrates enterprise development patterns and best practices for Go command-line tools.

## 🎯 Quick Start

```bash
# Install
go install {{.ModulePath}}@latest

# Basic usage
{{.ProjectName}} --help
{{.ProjectName}} version

# Interactive mode
{{.ProjectName}} create --interactive

# Professional output formats
{{.ProjectName}} list --output json
{{.ProjectName}} list --output yaml --no-color
```

## ✨ Features

### 🏢 Enterprise-Grade
- **Professional CLI Standards**: `--quiet`, `--no-color`, `--output` flags
- **Command Organization**: Logical groupings with help structure
- **Interactive Mode**: User-friendly prompts for complex operations
- **Progressive Disclosure**: `--advanced` flag for power users
- **Shell Completion**: Bash, Zsh, Fish, and PowerShell support

### 🏗️ Architecture & Patterns
- 🚀 Built with [Cobra](https://cobra.dev/) CLI framework
- 📝 Structured logging with {{.Logger}} logger
- ⚙️ Enterprise configuration management with [Viper](https://github.com/spf13/viper)
- 🔧 Comprehensive error handling and validation
- 📊 Multiple output formats (table, JSON, YAML)
- 🎨 Consistent error formatting and user experience

### 🧪 Quality & Reliability
- ✅ Comprehensive testing with [Testify](https://github.com/stretchr/testify)
- 🔍 Code quality with golangci-lint
- 🛡️ Security scanning with gosec and govulncheck
- 📈 Coverage reporting and CI/CD integration
- 🐳 Docker support with multi-stage builds
- 📦 Multi-platform releases (Linux, macOS, Windows)

### 🔧 Developer Experience
- 🎯 Hot configuration reloading
- 🔄 Graceful error handling and recovery
- 📚 Layered documentation (basic → advanced)
- 🎪 Interactive command wizard
- 🏃‍♂️ Fast startup and optimized performance

## Installation

### From Source

```bash
git clone {{.ModulePath}}
cd {{.ProjectName}}
make install
```

### Using Go

```bash
go install {{.ModulePath}}@latest
```

## 📖 Basic Usage

### Getting Help
```bash
# Global help
{{.ProjectName}} --help

# Command-specific help
{{.ProjectName}} create --help
{{.ProjectName}} completion --help
```

### Core Commands
```bash
# Version information
{{.ProjectName}} version
{{.ProjectName}} version --output json

# Create resources
{{.ProjectName}} create project my-app
{{.ProjectName}} create config --template advanced
{{.ProjectName}} create task "Important task" --priority high

# List resources
{{.ProjectName}} list
{{.ProjectName}} list --output table

# Interactive mode
{{.ProjectName}} create --interactive
```

### Professional Flags
```bash
# Quiet mode (errors only)
{{.ProjectName}} create project myapp --quiet

# Disable colors
{{.ProjectName}} list --no-color

# Output formats
{{.ProjectName}} version --output json
{{.ProjectName}} list --output yaml

# Verbose output
{{.ProjectName}} --verbose create project myapp

# Custom config
{{.ProjectName}} --config ./my-config.yaml list
```

## ⚙️ Configuration

{{.ProjectName}} supports enterprise-grade configuration management:

### Configuration Sources (in order of precedence)
1. **Command-line flags** (highest priority)
2. **Environment variables** (prefixed with `{{upper .ProjectName}}_`)
3. **Configuration files** (YAML format)
4. **Default values** (lowest priority)

### Configuration Locations
Configuration files are loaded from these locations (in order):
- `./configs/config.yaml`
- `./config.yaml`
- `$HOME/.{{.ProjectName}}/config.yaml`
- `$HOME/.{{.ProjectName}}.yaml`
- `/etc/{{.ProjectName}}/config.yaml`

### Configuration File

Create a config file at one of these locations:
- `./configs/config.yaml`
- `./config.yaml`
- `$HOME/.{{.ProjectName}}.yaml`

Example configuration:

```yaml
# Application environment
environment: development

# Logging configuration
logging:
  level: info              # debug, info, warn, error
  format: text             # json, text, console
  structured: false        # enable structured logging
  output: stdout           # stdout, stderr, or file path
  color: true             # enable colored output
  timestamp: true         # include timestamps
  caller: false           # include caller information

# CLI behavior
cli:
  output_format: table    # table, json, yaml
  no_color: false         # disable colored output
  quiet: false            # suppress non-error output
  interactive: false      # enable interactive mode by default
  advanced: false         # show advanced options
  timeout: 30s            # command timeout

# Feature flags
features:
  metrics: false          # enable metrics collection
  tracing: false          # enable distributed tracing
  profiling: false        # enable performance profiling
  completion: true        # enable shell completion

# Security settings
security:
  disable_tls: false      # disable TLS verification
  max_request_size: 33554432  # 32MB max request size
  rate_limit_enabled: true    # enable rate limiting

# Metrics configuration
metrics:
  enabled: false
  endpoint: ""
  interval: 30s
```

### Environment Variables

All configuration options can be set via environment variables:

```bash
# Application settings
export {{upper .ProjectName}}_ENVIRONMENT=production

# Logging
export {{upper .ProjectName}}_LOGGING_LEVEL=debug
export {{upper .ProjectName}}_LOGGING_FORMAT=json
export {{upper .ProjectName}}_LOGGING_OUTPUT=/var/log/{{.ProjectName}}.log

# CLI behavior
export {{upper .ProjectName}}_CLI_OUTPUT_FORMAT=json
export {{upper .ProjectName}}_CLI_NO_COLOR=true
export {{upper .ProjectName}}_CLI_QUIET=true
export {{upper .ProjectName}}_CLI_TIMEOUT=60s

# Features
export {{upper .ProjectName}}_FEATURES_METRICS=true
export {{upper .ProjectName}}_FEATURES_TRACING=true
```

### Configuration Hot Reloading

{{.ProjectName}} supports hot reloading of configuration files:

```bash
# Watch for config changes
{{.ProjectName}} --config ./config.yaml --watch

# Reload config manually
kill -HUP $(pgrep {{.ProjectName}})
```

## 🚀 Shell Completion

Enable shell completion for enhanced productivity:

### Bash
```bash
# Generate completion script
{{.ProjectName}} completion bash > /etc/bash_completion.d/{{.ProjectName}}

# Or for current session
source <({{.ProjectName}} completion bash)
```

### Zsh
```bash
# Generate completion script
{{.ProjectName}} completion zsh > "${fpath[1]}/_{{.ProjectName}}"

# Add to .zshrc
echo 'autoload -U compinit; compinit' >> ~/.zshrc
```

### Fish
```bash
# Generate completion script
{{.ProjectName}} completion fish > ~/.config/fish/completions/{{.ProjectName}}.fish
```

### PowerShell
```powershell
# Generate completion script
{{.ProjectName}} completion powershell > {{.ProjectName}}.ps1
# Add to PowerShell profile
```

## 📚 Advanced Usage

### Interactive Mode

For complex operations, use interactive mode:

```bash
# Interactive resource creation
{{.ProjectName}} create --interactive

# Interactive configuration
{{.ProjectName}} config --interactive
```

### Progressive Disclosure

Control complexity with the `--advanced` flag:

```bash
# Basic options only
{{.ProjectName}} create --help

# Show all advanced options
{{.ProjectName}} create --advanced --help
```

### Output Formats and Pipelines

```bash
# JSON output for scripting
{{.ProjectName}} list --output json | jq '.[] | select(.status == "active")'

# YAML output
{{.ProjectName}} version --output yaml

# Table output (default)
{{.ProjectName}} list --output table

# Quiet mode for scripts
{{.ProjectName}} create project myapp --quiet && echo "Success"
```

### Error Handling and Debugging

```bash
# Verbose output for debugging
{{.ProjectName}} --verbose create project myapp

# Structured error information
{{.ProjectName}} create project existing-project --output json 2>&1 | jq '.error'

# Dry run mode
{{.ProjectName}} create project myapp --dry-run
```

## 🛠️ Development

### Prerequisites

- Go {{.GoVersion}} or later
- Make (optional, for using Makefile commands)

### Building and Testing

```bash
# Development build
make dev-build

# Production build with optimizations
make build

# Run tests with coverage
make test
make test-coverage

# Run all quality checks
make lint
make security-scan
make vet

# Run integration tests
make test-integration

# Performance benchmarks
make benchmark
```

### Code Quality

```bash
# Format code
make fmt

# Run linter
make lint

# Security scanning
make security-scan

# Vulnerability check
make vuln-check

# Generate documentation
make docs
```

### Docker

```bash
# Build Docker image
make docker-build

# Run in Docker
make docker-run
```

## 🏗️ Architecture

### Project Structure

```
{{.ProjectName}}/
├── cmd/                    # Command implementations
│   ├── root.go            # Root command with enterprise flags
│   ├── completion.go      # Shell completion
│   ├── create.go          # Resource creation
│   ├── list.go            # Resource listing
│   ├── version.go         # Version information
│   └── ...
├── internal/               # Internal packages
│   ├── config/            # Enterprise configuration management
│   ├── errors/            # Structured error handling
│   ├── interactive/       # Interactive mode support
│   ├── logger/            # Logging abstraction
│   ├── output/            # Output formatting (table/json/yaml)
│   └── version/           # Version and build information
├── configs/               # Configuration files
│   └── config.yaml        # Default configuration
├── .github/               # GitHub workflows
│   └── workflows/
│       ├── ci.yml         # Continuous integration
│       └── release.yml    # Release automation
├── docs/                  # Documentation
├── examples/              # Usage examples
├── Dockerfile             # Multi-stage Docker build
├── Makefile              # Build automation
├── .golangci.yml         # Linter configuration
└── main.go               # Application entry point
```

### Design Patterns

- **Command Pattern**: Clean separation of command logic
- **Factory Pattern**: Logger and output format creation
- **Strategy Pattern**: Pluggable output formatters
- **Observer Pattern**: Configuration watching and reloading
- **Builder Pattern**: Interactive command building
- **Facade Pattern**: Simplified API for complex operations

## 🔧 Troubleshooting

### Common Issues

#### Configuration Problems
```bash
# Check configuration loading
{{.ProjectName}} --verbose version

# Validate configuration
{{.ProjectName}} config validate

# Show effective configuration
{{.ProjectName}} config show --output yaml
```

#### Performance Issues
```bash
# Enable profiling
{{.ProjectName}} --enable-profiling command

# Check resource usage
{{.ProjectName}} --metrics command
```

#### Debug Mode
```bash
# Maximum verbosity
{{.ProjectName}} --verbose --debug command

# Trace mode
export {{upper .ProjectName}}_LOGGING_LEVEL=debug
{{.ProjectName}} command
```

## 🤝 Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Development Workflow

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Run the test suite (`make test`)
6. Run quality checks (`make lint`)
7. Commit your changes (`git commit -m 'Add amazing feature'`)
8. Push to the branch (`git push origin feature/amazing-feature`)
9. Open a Pull Request

### Code Standards

- Follow Go best practices and idioms
- Maintain test coverage above 80%
- Use conventional commit messages
- Update documentation for new features
- Run `make lint` before submitting

## 📄 Documentation

- [API Documentation](docs/api.md)
- [Configuration Reference](docs/config.md)
- [Developer Guide](docs/development.md)
- [Deployment Guide](docs/deployment.md)
- [Examples](examples/)

## 📜 License

This project is licensed under the {{.License}} License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- [Cobra](https://cobra.dev/) for the excellent CLI framework
- [Viper](https://github.com/spf13/viper) for configuration management
- [Survey](https://github.com/AlecAivazis/survey) for interactive prompts
- The Go community for best practices and patterns

## 📊 Performance

{{.ProjectName}} is optimized for performance:

- **Fast Startup**: < 50ms cold start time
- **Memory Efficient**: < 10MB memory footprint
- **Concurrent**: Safe for concurrent operations
- **Scalable**: Handles thousands of operations per second

## 🏆 Generated with go-starter

This enterprise-grade CLI application was generated using [go-starter](https://github.com/francknouama/go-starter).

### Generation Configuration
- **Template**: CLI Application (Enterprise)
- **Framework**: {{.Framework}}
- **Logger**: {{.Logger}}
- **Architecture**: Standard with Enterprise Enhancements
- **Go Version**: {{.GoVersion}}
- **License**: {{.License}}
- **Complexity Level**: 7/10 (Enterprise)

### Enterprise Features Included
- ✅ Professional CLI standards compliance
- ✅ Command organization and grouping
- ✅ Interactive mode support
- ✅ Progressive disclosure
- ✅ Shell completion (4 shells)
- ✅ Multiple output formats
- ✅ Enterprise configuration management
- ✅ Structured error handling
- ✅ Security scanning integration
- ✅ Performance optimization

---

**Built with ❤️ using Go and enterprise development practices**