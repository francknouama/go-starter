package cmd

import (
	"os"

	"github.com/spf13/cobra"
)

// completionCmd represents the completion command
var completionCmd = &cobra.Command{
	Use:   "completion [bash|zsh|fish|powershell]",
	Short: "Generate completion scripts for your shell",
	Long: `Generate completion scripts for {{.ProjectName}}.

The completion script can be generated for the following shells:
- bash
- zsh
- fish
- powershell

To load completions:

Bash:
  $ source <({{.ProjectName}} completion bash)

  # To load completions for each session, execute once:
  # Linux:
  $ {{.ProjectName}} completion bash > /etc/bash_completion.d/{{.ProjectName}}
  # macOS:
  $ {{.ProjectName}} completion bash > /usr/local/etc/bash_completion.d/{{.ProjectName}}

Zsh:
  # If shell completion is not already enabled in your environment,
  # you will need to enable it.  You can execute the following once:
  $ echo "autoload -U compinit; compinit" >> ~/.zshrc

  # To load completions for each session, execute once:
  $ {{.ProjectName}} completion zsh > "${fpath[1]}/_{{.ProjectName}}"

  # You will need to start a new shell for this setup to take effect.

Fish:
  $ {{.ProjectName}} completion fish | source

  # To load completions for each session, execute once:
  $ {{.ProjectName}} completion fish > ~/.config/fish/completions/{{.ProjectName}}.fish

PowerShell:
  PS> {{.ProjectName}} completion powershell | Out-String | Invoke-Expression

  # To load completions for every new session, run:
  PS> {{.ProjectName}} completion powershell > {{.ProjectName}}.ps1
  # and source this file from your PowerShell profile.
`,
	DisableFlagsInUseLine: true,
	ValidArgs:             []string{"bash", "zsh", "fish", "powershell"},
	Args:                  cobra.MatchAll(cobra.ExactArgs(1), cobra.OnlyValidArgs),
	GroupID:               "config",
	RunE: func(cmd *cobra.Command, args []string) error {
		switch args[0] {
		case "bash":
			return cmd.Root().GenBashCompletion(os.Stdout)
		case "zsh":
			return cmd.Root().GenZshCompletion(os.Stdout)
		case "fish":
			return cmd.Root().GenFishCompletion(os.Stdout, true)
		case "powershell":
			return cmd.Root().GenPowerShellCompletionWithDesc(os.Stdout)
		}
		return nil
	},
}

func init() {
	rootCmd.AddCommand(completionCmd)

	// Register custom completion functions
	rootCmd.RegisterFlagCompletionFunc("output", func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
		return []string{"table", "json", "yaml"}, cobra.ShellCompDirectiveDefault
	})

	rootCmd.RegisterFlagCompletionFunc("config", func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
		return []string{"yaml", "yml", "json"}, cobra.ShellCompDirectiveFilterFileExt
	})

	// Add completion for logger types if this becomes configurable
	rootCmd.RegisterFlagCompletionFunc("logger", func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
		return []string{"slog", "zap", "logrus", "zerolog"}, cobra.ShellCompDirectiveDefault
	})
}