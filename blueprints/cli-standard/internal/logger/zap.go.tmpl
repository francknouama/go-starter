package logger

import (
	"context"
	"io"
	"os"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// ZapLogger wraps Zap logger to implement our Logger interface
type ZapLogger struct {
	logger *zap.Logger
	sugar  *zap.SugaredLogger
	level  Level
	output io.Writer
}

// NewZapLogger creates a new zap-based logger
func NewZapLogger(level Level, format Format, output io.Writer, structured bool) (*ZapLogger, error) {
	if output == nil {
		output = os.Stdout
	}

	// Configure encoder
	var encoder zapcore.Encoder
	encoderConfig := zap.NewProductionEncoderConfig()
	encoderConfig.TimeKey = "time"
	encoderConfig.LevelKey = "level"
	encoderConfig.MessageKey = "msg"
	encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder

	switch format {
	case JSONFormat:
		encoder = zapcore.NewJSONEncoder(encoderConfig)
	case TextFormat, ConsoleFormat:
		encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder
		encoder = zapcore.NewConsoleEncoder(encoderConfig)
	default:
		encoder = zapcore.NewJSONEncoder(encoderConfig)
	}

	// Configure writer
	writeSyncer := zapcore.AddSync(output)

	// Configure level
	zapLevel := convertToZapLevel(level)
	
	// Create core
	core := zapcore.NewCore(encoder, writeSyncer, zapLevel)
	
	// Create logger
	logger := zap.New(core, zap.AddCaller(), zap.AddStacktrace(zapcore.ErrorLevel))
	sugar := logger.Sugar()

	return &ZapLogger{
		logger: logger,
		sugar:  sugar,
		level:  level,
		output: output,
	}, nil
}

// Debug logs a debug message
func (z *ZapLogger) Debug(msg string, args ...interface{}) {
	z.sugar.Debugf(msg, args...)
}

// Info logs an info message
func (z *ZapLogger) Info(msg string, args ...interface{}) {
	z.sugar.Infof(msg, args...)
}

// Warn logs a warning message
func (z *ZapLogger) Warn(msg string, args ...interface{}) {
	z.sugar.Warnf(msg, args...)
}

// Error logs an error message
func (z *ZapLogger) Error(msg string, args ...interface{}) {
	z.sugar.Errorf(msg, args...)
}

// DebugWith logs a debug message with structured fields
func (z *ZapLogger) DebugWith(msg string, fields Fields) {
	z.logger.Debug(msg, fieldsToZapFields(fields)...)
}

// InfoWith logs an info message with structured fields
func (z *ZapLogger) InfoWith(msg string, fields Fields) {
	z.logger.Info(msg, fieldsToZapFields(fields)...)
}

// WarnWith logs a warning message with structured fields
func (z *ZapLogger) WarnWith(msg string, fields Fields) {
	z.logger.Warn(msg, fieldsToZapFields(fields)...)
}

// ErrorWith logs an error message with structured fields
func (z *ZapLogger) ErrorWith(msg string, fields Fields) {
	z.logger.Error(msg, fieldsToZapFields(fields)...)
}

// WithContext returns a logger with context
func (z *ZapLogger) WithContext(ctx context.Context) Logger {
	// Zap doesn't have built-in context support, but we can extract trace info if needed
	return &ZapLogger{
		logger: z.logger,
		sugar:  z.sugar,
		level:  z.level,
		output: z.output,
	}
}

// WithFields returns a logger with additional fields
func (z *ZapLogger) WithFields(fields Fields) Logger {
	newLogger := z.logger.With(fieldsToZapFields(fields)...)
	return &ZapLogger{
		logger: newLogger,
		sugar:  newLogger.Sugar(),
		level:  z.level,
		output: z.output,
	}
}

// SetLevel sets the log level
func (z *ZapLogger) SetLevel(level Level) {
	z.level = level
	// Note: Zap level changes require core reconfiguration
	// This is a simplified implementation
}

// SetOutput sets the output writer
func (z *ZapLogger) SetOutput(w io.Writer) {
	z.output = w
	// Note: Zap output changes require core reconfiguration
	// This is a simplified implementation
}

// DisableColor disables color output
func (z *ZapLogger) DisableColor() {
	// CLI applications may have color config in console encoder
	// This is a no-op for this implementation
}

// Sync flushes any buffered log entries
func (z *ZapLogger) Sync() error {
	return z.logger.Sync()
}

// Helper functions

// convertToZapLevel converts our Level type to zap.Level
func convertToZapLevel(level Level) zapcore.Level {
	switch level {
	case DebugLevel:
		return zapcore.DebugLevel
	case InfoLevel:
		return zapcore.InfoLevel
	case WarnLevel:
		return zapcore.WarnLevel
	case ErrorLevel:
		return zapcore.ErrorLevel
	default:
		return zapcore.InfoLevel
	}
}

// fieldsToZapFields converts Fields to zap fields
func fieldsToZapFields(fields Fields) []zap.Field {
	zapFields := make([]zap.Field, 0, len(fields))
	for key, value := range fields {
		zapFields = append(zapFields, zap.Any(key, value))
	}
	return zapFields
}