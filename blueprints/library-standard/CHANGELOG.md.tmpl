# Changelog

All notable changes to {{.ProjectName}} will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Initial library implementation with professional patterns
- Comprehensive retry logic with configurable backoff strategies
- Optional metrics collection interface for observability
- Rich error types with context and unwrapping support
- Semantic versioning support with compatibility checking
- Professional build system with release automation
- Comprehensive test suite with race detection
- Full documentation and examples

### Changed
- N/A (initial release)

### Deprecated
- N/A (initial release)

### Removed
- N/A (initial release)

### Fixed
- N/A (initial release)

### Security
- Implemented secure coding practices
- Added security scanning in CI/CD pipeline

## [1.0.0] - {{.CurrentDate}}

### Added
- Initial release of {{.ProjectName}}
- Core processing functionality with context support
- Optional logging via dependency injection (no forced dependencies)
- Configurable timeout and retry mechanisms
- Clean API design following Go best practices
- Comprehensive error handling and validation
- Full test coverage with examples
- Professional documentation
- Semantic versioning support
- CI/CD pipeline with automated testing and releases

### Features
- **Clean API Design**: Minimal dependencies with professional interfaces
- **Optional Logging**: Dependency injection pattern (no forced logging dependencies)
- **Retry Logic**: Configurable retry strategies with exponential backoff
- **Metrics Collection**: Optional metrics collection interface for observability
- **Error Handling**: Rich error types with context and unwrapping support
- **Performance**: Optimized for high throughput with minimal allocations
- **Configuration**: Flexible configuration with sensible defaults
- **Testing**: Comprehensive test suite with race detection and fuzzing
- **Production Ready**: Battle-tested patterns and comprehensive documentation

### Configuration Options
- `WithTimeout(duration)`: Set operation timeout (default: 30 seconds)
- `WithRetries(max, strategy)`: Configure retry behavior (default: 3 retries, exponential backoff)
- `WithLogger(logger)`: Set custom logger (default: no logging)
- `WithMetrics(collector)`: Enable metrics collection (default: no metrics)
- `WithDebug(enabled)`: Enable debug mode (default: false)
- `WithUserAgent(ua)`: Set custom user agent

### Error Types
- `ValidationError`: Input validation errors
- `TimeoutError`: Operation timeout errors
- `ProcessingError`: Business logic processing errors with unwrapping support

---

## Version History

### Version Scheme

This project follows [Semantic Versioning](https://semver.org/):

- **MAJOR** version when you make incompatible API changes
- **MINOR** version when you add functionality in a backwards compatible manner
- **PATCH** version when you make backwards compatible bug fixes

### Release Process

1. **Development**: Features and fixes are developed on feature branches
2. **Testing**: Comprehensive testing including unit, integration, and security tests
3. **Quality Gate**: All quality checks must pass (linting, testing, security scanning)
4. **Tagging**: Semantic version tags trigger automated releases
5. **Publishing**: Automated publishing to Go module proxy and pkg.go.dev

### Compatibility Promise

- **API Stability**: Public API is stable within major versions
- **Go Version**: Supports Go {{.GoVersion}} and later
- **Backwards Compatibility**: Minor and patch versions maintain backwards compatibility
- **Migration Guides**: Breaking changes include comprehensive migration documentation

---

## Contributing

### Reporting Issues

Please report issues with:
- Clear description of the problem
- Steps to reproduce
- Expected vs actual behavior
- Go version and OS
- Relevant logs or error messages

### Suggesting Enhancements

Enhancement suggestions should include:
- Clear description of the proposed feature
- Use case and motivation
- Proposed API design (if applicable)
- Implementation considerations

### Development Workflow

1. Fork the repository
2. Create a feature branch
3. Implement changes with tests
4. Run quality checks: `make check`
5. Submit pull request with clear description

---

## Links

- **Repository**: https://github.com/{{.Author}}/{{.ProjectName}}
- **Documentation**: https://pkg.go.dev/{{.ModulePath}}
- **Issues**: https://github.com/{{.Author}}/{{.ProjectName}}/issues
- **Releases**: https://github.com/{{.Author}}/{{.ProjectName}}/releases

[unreleased]: https://github.com/{{.Author}}/{{.ProjectName}}/compare/v1.0.0...HEAD
[1.0.0]: https://github.com/{{.Author}}/{{.ProjectName}}/releases/tag/v1.0.0