package main

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"time"

	{{.ProjectName | replace "-" "_"}} "{{.ModulePath}}"
)

// slogAdapter adapts slog.Logger to our Logger interface
type slogAdapter struct {
	logger *slog.Logger
}

func (s *slogAdapter) Info(msg string, fields ...any) {
	s.logger.Info(msg, fields...)
}

func (s *slogAdapter) Error(msg string, fields ...any) {
	s.logger.Error(msg, fields...)
}

func main() {
	fmt.Println("{{.ProjectName}} Advanced Example")
	fmt.Println("===============================")

	// Create a logger
	logger := &slogAdapter{
		logger: slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelInfo,
		})),
	}

	// Create a client with optional logging and custom timeout
	client := {{.ProjectName | replace "-" "_"}}.New(
		{{.ProjectName | replace "-" "_"}}.WithLogger(logger),
		{{.ProjectName | replace "-" "_"}}.WithTimeout(10*time.Second),
	)
	defer client.Close()

	fmt.Println("Created client with logging enabled and 10s timeout")

	// Test different inputs
	testInputs := []string{
		"hello world",
		"advanced example",
		"{{.ProjectName}} library",
		"Go is awesome",
	}

	fmt.Println("\nProcessing test inputs:")
	for i, input := range testInputs {
		fmt.Printf("\n%d. Processing: '%s'\n", i+1, input)
		
		start := time.Now()
		result, err := client.Process(context.Background(), input)
		duration := time.Since(start)
		
		if err != nil {
			fmt.Printf("   Error: %v\n", err)
		} else {
			fmt.Printf("   Result: %s\n", result)
			fmt.Printf("   Duration: %v\n", duration)
		}
	}

	// Test error case
	fmt.Println("\n5. Testing error case (empty input):")
	_, err := client.Process(context.Background(), "")
	if err != nil {
		fmt.Printf("   Expected error: %v\n", err)
	}

	fmt.Println("\nAdvanced example completed!")
}