// Package logger provides minimal logging functionality for the {{.ProjectName | replace "-" "_"}} library.
// This is kept simple to avoid forcing logging dependencies on library users.
package logger

import (
{{- if eq .Logger ""}}
	"fmt"
{{- end}}
	"io"
	"os"
{{- if eq .Logger "slog"}}
	"log/slog"
{{- else if eq .Logger "zap"}}
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
{{- else if eq .Logger "logrus"}}
	"github.com/sirupsen/logrus"
{{- else if eq .Logger "zerolog"}}
	"github.com/rs/zerolog"
	"time"
{{- else}}
	"fmt"
{{- end}}
)

// Logger defines a minimal logging interface for library use
type Logger interface {
	Debug(msg string)
	Info(msg string)
	Warn(msg string)
	Error(msg string)
	
	DebugWith(msg string, fields Fields)
	InfoWith(msg string, fields Fields)
	WarnWith(msg string, fields Fields)
	ErrorWith(msg string, fields Fields)
	
	Sync() error
}

// Fields represents structured logging fields
type Fields map[string]interface{}

// Factory creates logger instances
type Factory struct{}

// NewFactory creates a new logger factory
func NewFactory() *Factory {
	return &Factory{}
}

// CreateFromProjectConfig creates a logger from project configuration
func (f *Factory) CreateFromProjectConfig(loggerType, level, format string, structured bool) (Logger, error) {
	output := os.Stderr // Libraries should log to stderr by default
	
{{- if eq .Logger "slog"}}
	return f.createSlogLogger(level, format, output)
{{- else if eq .Logger "zap"}}
	return f.createZapLogger(level, format, output)
{{- else if eq .Logger "logrus"}}
	return f.createLogrusLogger(level, format, output)
{{- else if eq .Logger "zerolog"}}
	return f.createZerologLogger(level, format, output)
{{- else}}
	return f.createSlogLogger(level, format, output)
{{- end}}
}

{{- if eq .Logger "slog"}}

// slogLogger implements Logger using Go's built-in slog
type slogLogger struct {
	logger *slog.Logger
}

func (f *Factory) createSlogLogger(level, format string, output io.Writer) (Logger, error) {
	opts := &slog.HandlerOptions{
		Level: parseLevel(level),
	}
	
	var handler slog.Handler
	if format == "json" {
		handler = slog.NewJSONHandler(output, opts)
	} else {
		handler = slog.NewTextHandler(output, opts)
	}
	
	return &slogLogger{
		logger: slog.New(handler),
	}, nil
}

func (s *slogLogger) Debug(msg string) { s.logger.Debug(msg) }
func (s *slogLogger) Info(msg string)  { s.logger.Info(msg) }
func (s *slogLogger) Warn(msg string)  { s.logger.Warn(msg) }
func (s *slogLogger) Error(msg string) { s.logger.Error(msg) }

func (s *slogLogger) DebugWith(msg string, fields Fields) {
	s.logger.Debug(msg, fieldsToSlogArgs(fields)...)
}
func (s *slogLogger) InfoWith(msg string, fields Fields) {
	s.logger.Info(msg, fieldsToSlogArgs(fields)...)
}
func (s *slogLogger) WarnWith(msg string, fields Fields) {
	s.logger.Warn(msg, fieldsToSlogArgs(fields)...)
}
func (s *slogLogger) ErrorWith(msg string, fields Fields) {
	s.logger.Error(msg, fieldsToSlogArgs(fields)...)
}

func (s *slogLogger) Sync() error { return nil }

func fieldsToSlogArgs(fields Fields) []interface{} {
	args := make([]interface{}, 0, len(fields)*2)
	for k, v := range fields {
		args = append(args, k, v)
	}
	return args
}

func parseLevel(level string) slog.Level {
	switch level {
	case "debug":
		return slog.LevelDebug
	case "info":
		return slog.LevelInfo
	case "warn":
		return slog.LevelWarn
	case "error":
		return slog.LevelError
	default:
		return slog.LevelWarn
	}
}

{{- else if eq .Logger "zap"}}

// zapLogger implements Logger using Zap
type zapLogger struct {
	logger *zap.Logger
}

func (f *Factory) createZapLogger(level, format string, output io.Writer) (Logger, error) {
	config := zap.NewProductionConfig()
	config.Level = zap.NewAtomicLevelAt(parseZapLevel(level))
	
	if format != "json" {
		config.Encoding = "console"
	}
	
	logger, err := config.Build()
	if err != nil {
		return nil, err
	}
	
	return &zapLogger{logger: logger}, nil
}

func (z *zapLogger) Debug(msg string) { z.logger.Debug(msg) }
func (z *zapLogger) Info(msg string)  { z.logger.Info(msg) }
func (z *zapLogger) Warn(msg string)  { z.logger.Warn(msg) }
func (z *zapLogger) Error(msg string) { z.logger.Error(msg) }

func (z *zapLogger) DebugWith(msg string, fields Fields) {
	z.logger.Debug(msg, fieldsToZapFields(fields)...)
}
func (z *zapLogger) InfoWith(msg string, fields Fields) {
	z.logger.Info(msg, fieldsToZapFields(fields)...)
}
func (z *zapLogger) WarnWith(msg string, fields Fields) {
	z.logger.Warn(msg, fieldsToZapFields(fields)...)
}
func (z *zapLogger) ErrorWith(msg string, fields Fields) {
	z.logger.Error(msg, fieldsToZapFields(fields)...)
}

func (z *zapLogger) Sync() error { return z.logger.Sync() }

func fieldsToZapFields(fields Fields) []zap.Field {
	zapFields := make([]zap.Field, 0, len(fields))
	for k, v := range fields {
		zapFields = append(zapFields, zap.Any(k, v))
	}
	return zapFields
}

func parseZapLevel(level string) zapcore.Level {
	switch level {
	case "debug":
		return zapcore.DebugLevel
	case "info":
		return zapcore.InfoLevel
	case "warn":
		return zapcore.WarnLevel
	case "error":
		return zapcore.ErrorLevel
	default:
		return zapcore.WarnLevel
	}
}

{{- else if eq .Logger "logrus"}}

// logrusLogger implements Logger using logrus
type logrusLogger struct {
	logger *logrus.Logger
}

func (f *Factory) createLogrusLogger(level, format string, output io.Writer) (Logger, error) {
	logger := logrus.New()
	logger.SetOutput(output)
	
	if format == "json" {
		logger.SetFormatter(&logrus.JSONFormatter{})
	} else {
		logger.SetFormatter(&logrus.TextFormatter{})
	}
	
	logger.SetLevel(parseLogrusLevel(level))
	
	return &logrusLogger{logger: logger}, nil
}

func (l *logrusLogger) Debug(msg string) { l.logger.Debug(msg) }
func (l *logrusLogger) Info(msg string)  { l.logger.Info(msg) }
func (l *logrusLogger) Warn(msg string)  { l.logger.Warn(msg) }
func (l *logrusLogger) Error(msg string) { l.logger.Error(msg) }

func (l *logrusLogger) DebugWith(msg string, fields Fields) {
	l.logger.WithFields(logrus.Fields(fields)).Debug(msg)
}
func (l *logrusLogger) InfoWith(msg string, fields Fields) {
	l.logger.WithFields(logrus.Fields(fields)).Info(msg)
}
func (l *logrusLogger) WarnWith(msg string, fields Fields) {
	l.logger.WithFields(logrus.Fields(fields)).Warn(msg)
}
func (l *logrusLogger) ErrorWith(msg string, fields Fields) {
	l.logger.WithFields(logrus.Fields(fields)).Error(msg)
}

func (l *logrusLogger) Sync() error { return nil }

func parseLogrusLevel(level string) logrus.Level {
	switch level {
	case "debug":
		return logrus.DebugLevel
	case "info":
		return logrus.InfoLevel
	case "warn":
		return logrus.WarnLevel
	case "error":
		return logrus.ErrorLevel
	default:
		return logrus.WarnLevel
	}
}

{{- else if eq .Logger "zerolog"}}

// zerologLogger implements Logger using zerolog
type zerologLogger struct {
	logger zerolog.Logger
}

func (f *Factory) createZerologLogger(level, format string, output io.Writer) (Logger, error) {
	zerolog.TimeFieldFormat = time.RFC3339
	logger := zerolog.New(output).With().Timestamp().Logger()
	logger = logger.Level(parseZerologLevel(level))
	
	return &zerologLogger{logger: logger}, nil
}

func (z *zerologLogger) Debug(msg string) { z.logger.Debug().Msg(msg) }
func (z *zerologLogger) Info(msg string)  { z.logger.Info().Msg(msg) }
func (z *zerologLogger) Warn(msg string)  { z.logger.Warn().Msg(msg) }
func (z *zerologLogger) Error(msg string) { z.logger.Error().Msg(msg) }

func (z *zerologLogger) DebugWith(msg string, fields Fields) {
	event := z.logger.Debug()
	for k, v := range fields {
		event = event.Interface(k, v)
	}
	event.Msg(msg)
}
func (z *zerologLogger) InfoWith(msg string, fields Fields) {
	event := z.logger.Info()
	for k, v := range fields {
		event = event.Interface(k, v)
	}
	event.Msg(msg)
}
func (z *zerologLogger) WarnWith(msg string, fields Fields) {
	event := z.logger.Warn()
	for k, v := range fields {
		event = event.Interface(k, v)
	}
	event.Msg(msg)
}
func (z *zerologLogger) ErrorWith(msg string, fields Fields) {
	event := z.logger.Error()
	for k, v := range fields {
		event = event.Interface(k, v)
	}
	event.Msg(msg)
}

func (z *zerologLogger) Sync() error { return nil }

func parseZerologLevel(level string) zerolog.Level {
	switch level {
	case "debug":
		return zerolog.DebugLevel
	case "info":
		return zerolog.InfoLevel
	case "warn":
		return zerolog.WarnLevel
	case "error":
		return zerolog.ErrorLevel
	default:
		return zerolog.WarnLevel
	}
}

{{- else}}

// Simple logger implementation for other logger types
// In a real implementation, you would implement the specific logger

type simpleLogger struct {
	level int
}

func (f *Factory) createSlogLogger(level, format string, output io.Writer) (Logger, error) {
	return &simpleLogger{level: parseLevelInt(level)}, nil
}

func (s *simpleLogger) Debug(msg string) { if s.level <= 0 { fmt.Println("DEBUG:", msg) } }
func (s *simpleLogger) Info(msg string)  { if s.level <= 1 { fmt.Println("INFO:", msg) } }
func (s *simpleLogger) Warn(msg string)  { if s.level <= 2 { fmt.Println("WARN:", msg) } }
func (s *simpleLogger) Error(msg string) { if s.level <= 3 { fmt.Println("ERROR:", msg) } }

func (s *simpleLogger) DebugWith(msg string, fields Fields) { s.Debug(fmt.Sprintf("%s %+v", msg, fields)) }
func (s *simpleLogger) InfoWith(msg string, fields Fields)  { s.Info(fmt.Sprintf("%s %+v", msg, fields)) }
func (s *simpleLogger) WarnWith(msg string, fields Fields)  { s.Warn(fmt.Sprintf("%s %+v", msg, fields)) }
func (s *simpleLogger) ErrorWith(msg string, fields Fields) { s.Error(fmt.Sprintf("%s %+v", msg, fields)) }

func (s *simpleLogger) Sync() error { return nil }

func parseLevelInt(level string) int {
	switch level {
	case "debug": return 0
	case "info": return 1
	case "warn": return 2
	case "error": return 3
	default: return 2
	}
}

{{- end}}