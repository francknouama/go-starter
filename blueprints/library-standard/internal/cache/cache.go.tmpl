package cache

import (
	"sync"
	"time"
)

// Cache defines the interface for caching implementations
type Cache interface {
	// Get retrieves a value from the cache
	Get(key string) (interface{}, bool)
	
	// Set stores a value in the cache
	Set(key string, value interface{})
	
	// Delete removes a value from the cache
	Delete(key string)
	
	// Clear removes all values from the cache
	Clear()
	
	// Size returns the number of items in the cache
	Size() int
	
	// Close closes the cache and releases resources
	Close() error
}

// MemoryCache is an in-memory cache implementation with TTL support
type MemoryCache struct {
	items map[string]*cacheItem
	ttl   time.Duration
	mu    sync.RWMutex
	stop  chan struct{}
}

type cacheItem struct {
	value      interface{}
	expiration time.Time
}

// NewMemoryCache creates a new in-memory cache with the specified TTL
func NewMemoryCache(ttl time.Duration) *MemoryCache {
	cache := &MemoryCache{
		items: make(map[string]*cacheItem),
		ttl:   ttl,
		stop:  make(chan struct{}),
	}
	
	// Start cleanup goroutine
	go cache.cleanup()
	
	return cache
}

// Get retrieves a value from the cache
func (c *MemoryCache) Get(key string) (interface{}, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()
	
	item, exists := c.items[key]
	if !exists {
		return nil, false
	}
	
	// Check if item has expired
	if time.Now().After(item.expiration) {
		// Item has expired, clean it up in the background
		go func() {
			c.mu.Lock()
			delete(c.items, key)
			c.mu.Unlock()
		}()
		return nil, false
	}
	
	return item.value, true
}

// Set stores a value in the cache
func (c *MemoryCache) Set(key string, value interface{}) {
	expiration := time.Now().Add(c.ttl)
	
	c.mu.Lock()
	defer c.mu.Unlock()
	
	c.items[key] = &cacheItem{
		value:      value,
		expiration: expiration,
	}
}

// Delete removes a value from the cache
func (c *MemoryCache) Delete(key string) {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	delete(c.items, key)
}

// Clear removes all values from the cache
func (c *MemoryCache) Clear() {
	c.mu.Lock()
	defer c.mu.Unlock()
	
	c.items = make(map[string]*cacheItem)
}

// Size returns the number of items in the cache
func (c *MemoryCache) Size() int {
	c.mu.RLock()
	defer c.mu.RUnlock()
	
	return len(c.items)
}

// Close closes the cache and releases resources
func (c *MemoryCache) Close() error {
	close(c.stop)
	c.Clear()
	return nil
}

// cleanup periodically removes expired items from the cache
func (c *MemoryCache) cleanup() {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()
	
	for {
		select {
		case <-ticker.C:
			c.removeExpired()
		case <-c.stop:
			return
		}
	}
}

// removeExpired removes all expired items from the cache
func (c *MemoryCache) removeExpired() {
	now := time.Now()
	
	c.mu.Lock()
	defer c.mu.Unlock()
	
	for key, item := range c.items {
		if now.After(item.expiration) {
			delete(c.items, key)
		}
	}
}