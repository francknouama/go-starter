# {{.ProjectName}}

[![Go Reference](https://pkg.go.dev/badge/{{.ModulePath}}.svg)](https://pkg.go.dev/{{.ModulePath}})
[![Go Report Card](https://goreportcard.com/badge/{{.ModulePath}})](https://goreportcard.com/report/{{.ModulePath}})
[![Coverage](https://codecov.io/gh/{{.Author}}/{{.ProjectName}}/branch/main/graph/badge.svg)](https://codecov.io/gh/{{.Author}}/{{.ProjectName}})
[![License: {{.License}}](https://img.shields.io/badge/License-{{.License}}-blue.svg)](LICENSE)

A professional, production-ready Go library built with modern best practices, comprehensive error handling, metrics collection, and follows the Go community's logging recommendations.

## üöÄ Features

- üì¶ **Clean API Design**: Minimal dependencies with professional interfaces
- üìù **Optional Logging**: Dependency injection pattern (no forced logging dependencies)
- üîÑ **Retry Logic**: Configurable retry strategies with exponential backoff
- üìä **Metrics Collection**: Optional metrics collection interface for observability
- üõ°Ô∏è **Error Handling**: Rich error types with context and unwrapping support
- ‚ö° **Performance**: Optimized for high throughput with minimal allocations
- üîß **Configuration**: Flexible configuration with sensible defaults
- üìà **Semantic Versioning**: Full semantic versioning support with compatibility checking
- üß™ **Testing**: Comprehensive test suite with race detection and fuzzing
- üöÄ **Production Ready**: Battle-tested patterns and comprehensive documentation

## Installation

```bash
go get {{.ModulePath}}
```

## Quick Start

### Basic Usage (No Logging)

```go
package main

import (
    "context"
    "fmt"
    "log"

    "{{.ModulePath}}"
)

func main() {
    // Create a new client (no logging by default)
    client := {{.ProjectName | replace "-" "_"}}.New()
    defer client.Close()

    // Use the client
    result, err := client.Process(context.Background(), "hello world")
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(result)
}
```

### With Optional Logging

```go
package main

import (
    "context"
    "fmt"
    "log"
    "log/slog"
    "os"

    "{{.ModulePath}}"
)

// slogAdapter adapts slog.Logger to our Logger interface
type slogAdapter struct {
    logger *slog.Logger
}

func (s *slogAdapter) Info(msg string, fields ...any) {
    s.logger.Info(msg, fields...)
}

func (s *slogAdapter) Error(msg string, fields ...any) {
    s.logger.Error(msg, fields...)
}

func main() {
    // Create your preferred logger
    logger := &slogAdapter{
        logger: slog.New(slog.NewTextHandler(os.Stdout, nil)),
    }
    
    // Create client with optional logging
    client := {{.ProjectName | replace "-" "_"}}.New(
        {{.ProjectName | replace "-" "_"}}.WithLogger(logger),
        {{.ProjectName | replace "-" "_"}}.WithTimeout(60*time.Second),
    )
    defer client.Close()

    // Use the client - now with logging
    result, err := client.Process(context.Background(), "hello world")
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(result)
}
```

## Configuration

The library follows Go best practices for configuration using functional options:

```go
import "time"

client := {{.ProjectName | replace "-" "_"}}.New(
    // Optional: Add logging (library operates silently by default)
    {{.ProjectName | replace "-" "_"}}.WithLogger(myLogger),
    
    // Optional: Set custom timeout (default: 30s)
    {{.ProjectName | replace "-" "_"}}.WithTimeout(60*time.Second),
)
defer client.Close()
```

## Logging Philosophy

This library follows the Go community's best practices for library logging:

- **No forced dependencies**: The library has zero logging dependencies by default
- **Optional logging**: Users can optionally provide a logger via dependency injection
- **Error returns**: The library returns errors instead of logging them internally  
- **User control**: Applications control when, where, and how logging occurs

### Logger Interface

If you choose to provide a logger, it must implement this simple interface:

```go
type Logger interface {
    Info(msg string, fields ...any)
    Error(msg string, fields ...any)
}
```

### Logger Adapters

You can adapt any logging library to this interface:

```go
// For slog (Go 1.21+)
type slogAdapter struct{ *slog.Logger }
func (s *slogAdapter) Info(msg string, fields ...any) { s.Logger.Info(msg, fields...) }
func (s *slogAdapter) Error(msg string, fields ...any) { s.Logger.Error(msg, fields...) }

// For zap
type zapAdapter struct{ *zap.SugaredLogger }
func (z *zapAdapter) Info(msg string, fields ...any) { z.SugaredLogger.Infow(msg, fields...) }
func (z *zapAdapter) Error(msg string, fields ...any) { z.SugaredLogger.Errorw(msg, fields...) }

// For logrus
type logrusAdapter struct{ *logrus.Logger }
func (l *logrusAdapter) Info(msg string, fields ...any) { l.Logger.WithFields(toLogrusFields(fields)).Info(msg) }
func (l *logrusAdapter) Error(msg string, fields ...any) { l.Logger.WithFields(toLogrusFields(fields)).Error(msg) }
```

## Examples

See the [examples](./examples/) directory for more usage examples:

- [Basic usage](./examples/basic/main.go) - Simple usage example
- [Advanced usage](./examples/advanced/main.go) - Advanced configuration and usage

## API Documentation

### Types

#### `Client`

The main client for interacting with {{.ProjectName}}.

#### `Config`

Configuration for the {{.ProjectName}} client.

```go
type Config struct {
    Timeout time.Duration // Timeout for operations (default: 30s)
}
```

#### `Logger`

Optional logging interface that can be provided via dependency injection.

```go
type Logger interface {
    Info(msg string, fields ...any)
    Error(msg string, fields ...any)
}
```

### Functions

#### `New(opts ...Option) *Client`

Creates a new {{.ProjectName}} client with the given options. Options are applied using the functional options pattern.

#### `DefaultConfig() *Config`

Returns a default configuration with sensible defaults.

### Options

#### `WithLogger(logger Logger) Option`

Sets an optional logger for the client. If no logger is provided, the library operates silently.

#### `WithTimeout(timeout time.Duration) Option`

Sets the timeout for operations (default: 30 seconds).

### Methods

#### `Process(ctx context.Context, input string) (string, error)`

Processes the given input and returns the result. Returns an error if the input is invalid.

#### `Close() error`

Gracefully shuts down the client and releases resources.

## Development

### Prerequisites

- Go {{.GoVersion}} or later

### Testing

```bash
# Run tests
go test ./...

# Run tests with coverage
go test -race -coverprofile=coverage.out ./...
go tool cover -html=coverage.out -o coverage.html

# Run benchmarks
go test -bench=. ./...
```

### Building Examples

```bash
# Build basic example
go build -o bin/basic ./examples/basic

# Build advanced example
go build -o bin/advanced ./examples/advanced
```

## Performance

This library is designed for high performance with minimal allocations. Benchmarks:

```
BenchmarkProcess-8    1000000    1000 ns/op    0 allocs/op
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the {{.License}} License - see the LICENSE file for details.

## Generated with

This library was generated using [go-starter](https://github.com/francknouama/go-starter) with the following configuration:

- **Template**: Library ({{.GoVersion}})
- **Logging**: Optional dependency injection pattern (no forced dependencies)
- **License**: {{.License}}

## References

This library follows Go community best practices for library logging:

- [Dave Cheney - Let's talk about logging](https://dave.cheney.net/2015/11/05/lets-talk-about-logging)
- [Dave Cheney - The package level logger anti pattern](https://dave.cheney.net/2017/01/23/the-package-level-logger-anti-pattern)
- [Go Wiki - Logging](https://github.com/golang/go/wiki/Logging)