# {{.ProjectName}}

A Go library built with modern best practices.

## Features

- üì¶ Clean API design
- üìù Comprehensive logging with {{.Logger}}
- üß™ Full test coverage
- üìö Usage examples
- üöÄ Production ready

## Installation

```bash
go get {{.ModulePath}}
```

## Quick Start

```go
package main

import (
    "context"
    "fmt"
    "log"

    "{{.ModulePath}}"
)

func main() {
    // Create a new client with default configuration
    client, err := {{.ProjectName}}.New(nil)
    if err != nil {
        log.Fatal(err)
    }
    defer client.Close()

    // Use the client
    result, err := client.Process(context.Background(), "hello world")
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println(result)
}
```

## Configuration

You can customize the library behavior with a configuration:

```go
config := &{{.ProjectName}}.Config{
    Debug: true,
    Logger: struct {
        Level  string `json:"level"`
        Format string `json:"format"`
    }{
        Level:  "debug",
        Format: "json",
    },
}

client, err := {{.ProjectName}}.New(config)
if err != nil {
    log.Fatal(err)
}
defer client.Close()
```

## Examples

See the [examples](./examples/) directory for more usage examples:

- [Basic usage](./examples/basic/main.go) - Simple usage example
- [Advanced usage](./examples/advanced/main.go) - Advanced configuration and usage

## API Documentation

### Types

#### `Client`

The main client for interacting with {{.ProjectName}}.

#### `Config`

Configuration for the {{.ProjectName}} client.

```go
type Config struct {
    Logger struct {
        Level  string `json:"level"`  // debug, info, warn, error
        Format string `json:"format"` // json, text
    } `json:"logger"`
    Debug bool `json:"debug"` // Enable debug mode
}
```

### Functions

#### `New(config *Config) (*Client, error)`

Creates a new {{.ProjectName}} client with the given configuration. If config is nil, default configuration is used.

#### `DefaultConfig() *Config`

Returns a default configuration.

### Methods

#### `Process(ctx context.Context, input string) (string, error)`

Processes the given input and returns the result.

#### `Close() error`

Gracefully shuts down the client and releases resources.

## Development

### Prerequisites

- Go {{.GoVersion}} or later

### Testing

```bash
# Run tests
go test ./...

# Run tests with coverage
go test -race -coverprofile=coverage.out ./...
go tool cover -html=coverage.out -o coverage.html

# Run benchmarks
go test -bench=. ./...
```

### Building Examples

```bash
# Build basic example
go build -o bin/basic ./examples/basic

# Build advanced example
go build -o bin/advanced ./examples/advanced
```

## Performance

This library is designed for high performance with minimal allocations. Benchmarks:

```
BenchmarkProcess-8    1000000    1000 ns/op    0 allocs/op
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the {{.License}} License - see the LICENSE file for details.

## Generated with

This library was generated using [go-starter](https://github.com/francknouama/go-starter) with the following configuration:

- **Template**: Library ({{.GoVersion}})
- **Logger**: {{.Logger}}
- **License**: {{.License}}