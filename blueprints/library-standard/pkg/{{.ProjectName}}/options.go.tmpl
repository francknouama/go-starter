package {{.ProjectName | replace "-" "_"}}

import (
	"time"
	
	"{{.ModulePath}}/internal/logger"
)

// Option configures the {{.ProjectName}} client
type Option func(*Client) error

// WithLogger sets a custom logger for the client
func WithLogger(log logger.Logger) Option {
	return func(c *Client) error {
		c.logger = log
		return nil
	}
}

// WithTimeout sets the default timeout for operations
func WithTimeout(timeout time.Duration) Option {
	return func(c *Client) error {
		c.config.Timeout = timeout
		return nil
	}
}

// WithDebug enables or disables debug mode
func WithDebug(debug bool) Option {
	return func(c *Client) error {
		c.config.Debug = debug
		return nil
	}
}

// WithRetryPolicy sets the retry policy for operations
func WithRetryPolicy(maxRetries int, backoff time.Duration) Option {
	return func(c *Client) error {
		c.config.Retry.MaxRetries = maxRetries
		c.config.Retry.Backoff = backoff
		return nil
	}
}

// WithCaching enables caching with the specified TTL
func WithCaching(enabled bool, ttl time.Duration) Option {
	return func(c *Client) error {
		c.config.Cache.Enabled = enabled
		c.config.Cache.TTL = ttl
		return nil
	}
}

// WithRateLimit sets rate limiting parameters
func WithRateLimit(requestsPerSecond int, burst int) Option {
	return func(c *Client) error {
		c.config.RateLimit.RequestsPerSecond = requestsPerSecond
		c.config.RateLimit.Burst = burst
		return nil
	}
}

// WithMetrics enables metrics collection
func WithMetrics(enabled bool) Option {
	return func(c *Client) error {
		c.config.Metrics.Enabled = enabled
		return nil
	}
}

// WithCallback sets a callback function for processing events
func WithCallback(callback func(event Event)) Option {
	return func(c *Client) error {
		c.config.Callback = callback
		return nil
	}
}