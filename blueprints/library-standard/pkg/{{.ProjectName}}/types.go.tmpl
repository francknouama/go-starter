package {{.ProjectName | replace "-" "_"}}

import (
	"context"
	"time"
)

// Processor defines the interface for processing operations
type Processor interface {
	// Process handles input and returns processed output
	Process(ctx context.Context, input *Input) (*Output, error)
	
	// ProcessBatch handles multiple inputs efficiently
	ProcessBatch(ctx context.Context, inputs []*Input) ([]*Output, error)
	
	// Validate checks if the input is valid for processing
	Validate(input *Input) error
	
	// Health returns the health status of the processor
	Health(ctx context.Context) (*HealthStatus, error)
}

// Input represents input data for processing
type Input struct {
	// ID is a unique identifier for this input
	ID string `json:"id"`
	
	// Data contains the actual input data
	Data string `json:"data"`
	
	// Metadata contains additional information
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	
	// Priority indicates processing priority (1-10, where 10 is highest)
	Priority int `json:"priority,omitempty"`
	
	// Timestamp when the input was created
	Timestamp time.Time `json:"timestamp"`
}

// Output represents processed output data
type Output struct {
	// ID matches the input ID
	ID string `json:"id"`
	
	// Result contains the processed result
	Result string `json:"result"`
	
	// Status indicates the processing status
	Status ProcessingStatus `json:"status"`
	
	// Metadata contains result metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	
	// ProcessingTime indicates how long processing took
	ProcessingTime time.Duration `json:"processing_time"`
	
	// Timestamp when processing completed
	Timestamp time.Time `json:"timestamp"`
}

// ProcessingStatus represents the status of a processing operation
type ProcessingStatus string

const (
	StatusSuccess ProcessingStatus = "success"
	StatusError   ProcessingStatus = "error"
	StatusPending ProcessingStatus = "pending"
	StatusSkipped ProcessingStatus = "skipped"
)

// HealthStatus represents the health status of the processor
type HealthStatus struct {
	// Status indicates overall health
	Status string `json:"status"`
	
	// Version of the library
	Version string `json:"version"`
	
	// Uptime since initialization
	Uptime time.Duration `json:"uptime"`
	
	// Metrics contains performance metrics
	Metrics *Metrics `json:"metrics,omitempty"`
	
	// Details contains additional health information
	Details map[string]interface{} `json:"details,omitempty"`
}

// Metrics contains performance and operational metrics
type Metrics struct {
	// TotalProcessed is the total number of items processed
	TotalProcessed int64 `json:"total_processed"`
	
	// TotalErrors is the total number of errors encountered
	TotalErrors int64 `json:"total_errors"`
	
	// AverageProcessingTime is the average time per operation
	AverageProcessingTime time.Duration `json:"average_processing_time"`
	
	// RequestsPerSecond is the current throughput
	RequestsPerSecond float64 `json:"requests_per_second"`
	
	// CacheHitRate is the cache hit rate (if caching is enabled)
	CacheHitRate float64 `json:"cache_hit_rate,omitempty"`
}

// Event represents an event that occurs during processing
type Event struct {
	// Type of event
	Type EventType `json:"type"`
	
	// Timestamp when the event occurred
	Timestamp time.Time `json:"timestamp"`
	
	// Data contains event-specific data
	Data map[string]interface{} `json:"data,omitempty"`
	
	// Error contains error information (if applicable)
	Error error `json:"error,omitempty"`
}

// EventType represents different types of events
type EventType string

const (
	EventProcessingStarted   EventType = "processing_started"
	EventProcessingCompleted EventType = "processing_completed"
	EventProcessingFailed    EventType = "processing_failed"
	EventValidationFailed    EventType = "validation_failed"
	EventRateLimitExceeded   EventType = "rate_limit_exceeded"
	EventCacheHit           EventType = "cache_hit"
	EventCacheMiss          EventType = "cache_miss"
)

// Config holds configuration for the {{.ProjectName}} client
type Config struct {
	// Debug enables debug logging
	Debug bool `json:"debug"`
	
	// Timeout is the default timeout for operations
	Timeout time.Duration `json:"timeout"`
	
	// Logger configuration
	Logger LoggerConfig `json:"logger"`
	
	// Retry configuration
	Retry RetryConfig `json:"retry"`
	
	// Cache configuration
	Cache CacheConfig `json:"cache"`
	
	// RateLimit configuration
	RateLimit RateLimitConfig `json:"rate_limit"`
	
	// Metrics configuration
	Metrics MetricsConfig `json:"metrics"`
	
	// Callback function for events
	Callback func(event Event) `json:"-"`
}

// LoggerConfig holds logger configuration
type LoggerConfig struct {
	Level  string `json:"level"`
	Format string `json:"format"`
}

// RetryConfig holds retry configuration
type RetryConfig struct {
	MaxRetries int           `json:"max_retries"`
	Backoff    time.Duration `json:"backoff"`
}

// CacheConfig holds cache configuration
type CacheConfig struct {
	Enabled bool          `json:"enabled"`
	TTL     time.Duration `json:"ttl"`
}

// RateLimitConfig holds rate limiting configuration
type RateLimitConfig struct {
	RequestsPerSecond int `json:"requests_per_second"`
	Burst             int `json:"burst"`
}

// MetricsConfig holds metrics configuration
type MetricsConfig struct {
	Enabled bool `json:"enabled"`
}

// Error types for the library
var (
	// ErrInvalidInput indicates that the provided input is invalid
	ErrInvalidInput = NewError("invalid input", "INPUT_INVALID")
	
	// ErrProcessingFailed indicates that processing failed
	ErrProcessingFailed = NewError("processing failed", "PROCESSING_FAILED")
	
	// ErrTimeout indicates that an operation timed out
	ErrTimeout = NewError("operation timed out", "TIMEOUT")
	
	// ErrRateLimitExceeded indicates that rate limit was exceeded
	ErrRateLimitExceeded = NewError("rate limit exceeded", "RATE_LIMIT_EXCEEDED")
	
	// ErrClosed indicates that the client is closed
	ErrClosed = NewError("client is closed", "CLIENT_CLOSED")
)

// Error represents a library-specific error
type Error struct {
	Message string `json:"message"`
	Code    string `json:"code"`
	Details map[string]interface{} `json:"details,omitempty"`
}

// NewError creates a new Error
func NewError(message, code string) *Error {
	return &Error{
		Message: message,
		Code:    code,
		Details: make(map[string]interface{}),
	}
}

// Error implements the error interface
func (e *Error) Error() string {
	return e.Message
}

// WithDetails adds details to the error
func (e *Error) WithDetails(details map[string]interface{}) *Error {
	newErr := *e
	newErr.Details = details
	return &newErr
}