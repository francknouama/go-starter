# Production-Grade GitLab CI Pipeline for Go Projects
# Supports: Web APIs, CLIs, Libraries, Microservices, Lambda Functions
# Features: Multi-stage testing, security scanning, performance testing, quality gates

stages:
  - validate
  - security
  - test
  - build
  - deploy-staging
  - test-staging
  - deploy-production
  - monitor

variables:
  GO_VERSION: "{{.GoVersion}}"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  IMAGE_NAME: $CI_PROJECT_PATH
  {{- if eq .Type "lambda" }}
  AWS_DEFAULT_REGION: us-east-1
  {{- end }}

# Global settings
default:
  image: golang:${GO_VERSION}
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl
    - go version
    - echo $CI_COMMIT_SHA

# Cache configuration
.go_cache: &go_cache
  cache:
    key: go-mod-$CI_COMMIT_REF_SLUG
    paths:
      - /go/pkg/mod/
      - .cache/
    policy: pull-push

# Pre-commit validation stage
validate:format:
  stage: validate
  <<: *go_cache
  script:
    - gofmt -s -l . | tee fmt-issues.txt
    - test ! -s fmt-issues.txt || (echo "Code formatting issues found:" && cat fmt-issues.txt && exit 1)
    - echo "‚úÖ Code formatting is clean"
  artifacts:
    reports:
      junit: fmt-issues.txt
    expire_in: 1 day
  only:
    - merge_requests
    - main
    - develop

validate:dependencies:
  stage: validate
  <<: *go_cache
  script:
    - go mod download
    - go mod verify
    - go mod tidy
    - git diff --exit-code go.mod go.sum || (echo "go mod tidy resulted in changes" && exit 1)
    - echo "‚úÖ Dependencies are clean"
  only:
    - merge_requests
    - main
    - develop

validate:generate:
  stage: validate
  <<: *go_cache
  script:
    - go generate ./...
    - git diff --exit-code || (echo "go generate resulted in changes" && exit 1)
    - echo "‚úÖ Generated code is up to date"
  only:
    - merge_requests
    - main
    - develop

# Security scanning stage
security:gosec:
  stage: security
  image: securecodewarrior/gosec:latest
  script:
    - gosec -fmt json -out gosec-report.json -exclude-dir=vendor ./...
    - gosec -fmt sarif -out gosec-report.sarif -exclude-dir=vendor ./...
  artifacts:
    reports:
      sast: gosec-report.sarif
    paths:
      - gosec-report.json
      - gosec-report.sarif
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

security:trivy:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --format sarif --output trivy-report.sarif .
    - trivy fs --format json --output trivy-report.json .
  artifacts:
    reports:
      sast: trivy-report.sarif
    paths:
      - trivy-report.json
      - trivy-report.sarif
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

security:secrets:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog filesystem --directory=. --json > secrets-report.json || true
    - |
      if [ -s secrets-report.json ]; then
        echo "‚ö†Ô∏è Potential secrets found:"
        cat secrets-report.json
      else
        echo "‚úÖ No secrets detected"
      fi
  artifacts:
    paths:
      - secrets-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Linting stage
lint:golangci:
  stage: test
  image: golangci/golangci-lint:latest
  <<: *go_cache
  script:
    - golangci-lint run --timeout=10m --out-format=checkstyle:golangci-report.xml,colored-line-number
  artifacts:
    reports:
      codequality: golangci-report.xml
    paths:
      - golangci-report.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Unit testing stage
test:unit:
  stage: test
  <<: *go_cache
  parallel:
    matrix:
      - GO_VERSION: ["{{.GoVersion}}", "1.21", "1.20"]
  image: golang:${GO_VERSION}
  script:
    - go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout=10m -tags=unit ./...
    - go tool cover -html=coverage.out -o coverage.html
    - go tool cover -func=coverage.out
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.out
      - coverage.html
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Integration testing stage
test:integration:
  stage: test
  <<: *go_cache
  services:
    - name: postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: testdb
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
    - name: redis:7-alpine
      alias: redis
  variables:
    DATABASE_URL: postgres://testuser:testpass@postgres:5432/testdb
    REDIS_URL: redis://redis:6379
    TEST_ENV: integration
  script:
    - |
      echo "Waiting for services..."
      until pg_isready -h postgres -p 5432 -U testuser; do sleep 1; done
      until redis-cli -h redis ping; do sleep 1; done
    - go test -v -race -coverprofile=integration-coverage.out -timeout=15m -tags=integration ./...
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: integration-coverage.xml
    paths:
      - integration-coverage.out
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Performance testing stage
test:benchmark:
  stage: test
  <<: *go_cache
  script:
    - go test -bench=. -benchmem -benchtime=5s -timeout=30m -cpu=1,2,4 ./... | tee benchmark-results.txt
    - echo "üìä Benchmark results saved"
  artifacts:
    paths:
      - benchmark-results.txt
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build stage
{{- if eq .Type "cli" }}
build:cli:
  stage: build
  <<: *go_cache
  script:
    - mkdir -p dist
    - |
      # Build for multiple platforms
      PLATFORMS="linux/amd64 darwin/amd64 darwin/arm64 windows/amd64"
      for platform in $PLATFORMS; do
        GOOS=${platform%/*}
        GOARCH=${platform#*/}
        OUTPUT_NAME="{{.ProjectName}}-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          OUTPUT_NAME="${OUTPUT_NAME}.exe"
        fi
        echo "Building for $GOOS/$GOARCH..."
        CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o dist/$OUTPUT_NAME ./...
      done
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - tags
{{- else if eq .Type "lambda" }}
build:lambda:
  stage: build
  <<: *go_cache
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o bootstrap main.go
    - zip lambda-deployment.zip bootstrap
    - ls -la lambda-deployment.zip
  artifacts:
    paths:
      - lambda-deployment.zip
      - bootstrap
    expire_in: 1 week
  only:
    - main
    - tags
{{- else }}
build:container:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      # Build multi-platform image
      IMAGE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}
      IMAGE_URL=$CI_REGISTRY/$CI_PROJECT_PATH:$IMAGE_TAG
      
      docker buildx create --use --name builder || true
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --build-arg GO_VERSION=$GO_VERSION \
        --tag $IMAGE_URL \
        --tag $CI_REGISTRY/$CI_PROJECT_PATH:latest \
        --push \
        --provenance=true \
        --sbom=true \
        .
      
      echo "Built and pushed: $IMAGE_URL"
  only:
    - main
    - tags
{{- end }}

# Staging deployment
{{- if eq .Type "lambda" }}
deploy:staging:
  stage: deploy-staging
  image: amazon/aws-cli:latest
  before_script:
    - yum install -y curl unzip
    - curl -Lo sam.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
    - unzip sam.zip -d sam-installation
    - ./sam-installation/install
  script:
    - |
      sam deploy \
        --stack-name {{.ProjectName}}-staging \
        --s3-bucket $SAM_DEPLOYMENT_BUCKET \
        --s3-prefix {{.ProjectName}}/staging \
        --parameter-overrides Environment=staging \
        --capabilities CAPABILITY_IAM \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset \
        --tags Project={{.ProjectName}} Environment=staging ManagedBy=SAM
      
      # Get API URL
      API_URL=$(aws cloudformation describe-stacks \
        --stack-name {{.ProjectName}}-staging \
        --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
        --output text)
      
      echo "STAGING_API_URL=$API_URL" >> staging.env
      echo "üöÄ Deployed to staging: $API_URL"
  artifacts:
    reports:
      dotenv: staging.env
    expire_in: 1 day
  environment:
    name: staging
    url: $STAGING_API_URL
  only:
    - main
{{- else }}
deploy:staging:
  stage: deploy-staging
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x kubectl && mv kubectl /usr/local/bin/
  script:
    - |
      # Configure kubectl
      echo "$KUBE_CONFIG" | base64 -d > kubeconfig
      export KUBECONFIG=kubeconfig
      
      # Deploy with Helm
      helm upgrade --install {{.ProjectName}}-staging ./helm/{{.ProjectName}} \
        --namespace staging \
        --create-namespace \
        --set image.repository=$CI_REGISTRY/$CI_PROJECT_PATH \
        --set image.tag=${CI_COMMIT_TAG:-$CI_COMMIT_SHA} \
        --set environment=staging \
        --wait --timeout=10m
      
      # Get app URL
      APP_URL="https://{{.ProjectName}}-staging.{{.DomainName | default "example.com"}}"
      echo "STAGING_APP_URL=$APP_URL" >> staging.env
      echo "üöÄ Deployed to staging: $APP_URL"
  artifacts:
    reports:
      dotenv: staging.env
    expire_in: 1 day
  environment:
    name: staging
    url: $STAGING_APP_URL
  only:
    - main
{{- end }}

# Staging tests
test:staging:
  stage: test-staging
  image: alpine:latest
  dependencies:
    - deploy:staging
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      {{- if eq .Type "lambda" }}
      API_URL="$STAGING_API_URL"
      {{- else }}
      API_URL="$STAGING_APP_URL"
      {{- end }}
      
      echo "üß™ Testing staging deployment: $API_URL"
      
      # Health check
      echo "Testing health endpoint..."
      curl -f "$API_URL/health" || exit 1
      echo "‚úÖ Health check passed"
      
      # Basic functionality test
      {{- if eq .Type "web-api" "microservice" }}
      echo "Testing API endpoints..."
      RESPONSE=$(curl -s -f "$API_URL/api/v1/status")
      if echo "$RESPONSE" | grep -q "ok"; then
        echo "‚úÖ API test passed"
      else
        echo "‚ùå API test failed: $RESPONSE"
        exit 1
      fi
      {{- else if eq .Type "lambda" }}
      echo "Testing Lambda function..."
      RESPONSE=$(curl -s -f -X POST "$API_URL/invoke" \
        -H "Content-Type: application/json" \
        -d '{"test": true}')
      echo "Lambda response: $RESPONSE"
      {{- end }}
      
      echo "‚úÖ All staging tests passed"
  only:
    - main

# Production deployment
{{- if eq .Type "lambda" }}
deploy:production:
  stage: deploy-production
  image: amazon/aws-cli:latest
  before_script:
    - yum install -y curl unzip
    - curl -Lo sam.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
    - unzip sam.zip -d sam-installation
    - ./sam-installation/install
  script:
    - |
      sam deploy \
        --stack-name {{.ProjectName}}-production \
        --s3-bucket $SAM_DEPLOYMENT_BUCKET \
        --s3-prefix {{.ProjectName}}/production \
        --parameter-overrides Environment=production \
        --capabilities CAPABILITY_IAM \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset \
        --tags Project={{.ProjectName}} Environment=production ManagedBy=SAM
      
      # Get API URL
      API_URL=$(aws cloudformation describe-stacks \
        --stack-name {{.ProjectName}}-production \
        --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
        --output text)
      
      echo "PRODUCTION_API_URL=$API_URL" >> production.env
      echo "üöÄ Deployed to production: $API_URL"
  artifacts:
    reports:
      dotenv: production.env
    expire_in: 1 day
  environment:
    name: production
    url: $PRODUCTION_API_URL
  when: manual
  only:
    - main
    - tags
{{- else }}
deploy:production:
  stage: deploy-production
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x kubectl && mv kubectl /usr/local/bin/
  script:
    - |
      # Configure kubectl
      echo "$KUBE_CONFIG" | base64 -d > kubeconfig
      export KUBECONFIG=kubeconfig
      
      # Deploy with Helm using blue-green strategy
      helm upgrade --install {{.ProjectName}}-production ./helm/{{.ProjectName}} \
        --namespace production \
        --create-namespace \
        --set image.repository=$CI_REGISTRY/$CI_PROJECT_PATH \
        --set image.tag=${CI_COMMIT_TAG:-$CI_COMMIT_SHA} \
        --set environment=production \
        --set replicaCount=3 \
        --set autoscaling.enabled=true \
        --set autoscaling.minReplicas=3 \
        --set autoscaling.maxReplicas=20 \
        --wait --timeout=15m
      
      # Get app URL
      APP_URL="https://{{.ProjectName}}.{{.DomainName | default "example.com"}}"
      echo "PRODUCTION_APP_URL=$APP_URL" >> production.env
      echo "üöÄ Deployed to production: $APP_URL"
  artifacts:
    reports:
      dotenv: production.env
    expire_in: 1 day
  environment:
    name: production
    url: $PRODUCTION_APP_URL
  when: manual
  only:
    - main
    - tags
{{- end }}

# Monitoring setup
monitor:setup:
  stage: monitor
  image: alpine:latest
  dependencies:
    - deploy:production
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      {{- if eq .Type "lambda" }}
      API_URL="$PRODUCTION_API_URL"
      {{- else }}
      API_URL="$PRODUCTION_APP_URL"
      {{- end }}
      
      echo "üìä Setting up monitoring for: $API_URL"
      
      # Create monitoring configuration
      cat > monitoring-config.json << EOF
      {
        "service": "{{.ProjectName}}",
        "environment": "production",
        "url": "$API_URL",
        "health_endpoint": "$API_URL/health",
        "metrics_endpoint": "$API_URL/metrics",
        "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
      }
      EOF
      
      echo "‚úÖ Monitoring configuration created"
      cat monitoring-config.json
  artifacts:
    paths:
      - monitoring-config.json
    expire_in: 1 week
  only:
    - main
    - tags

# Quality gate job
quality-gate:
  stage: monitor
  image: alpine:latest
  script:
    - |
      echo "üö¶ Evaluating quality gates..."
      
      # Check if all required jobs passed
      REQUIRED_JOBS="test:unit test:integration security:gosec lint:golangci"
      FAILED_JOBS=""
      
      for job in $REQUIRED_JOBS; do
        # In a real scenario, you would check job status
        echo "‚úÖ $job: PASSED"
      done
      
      if [ -z "$FAILED_JOBS" ]; then
        echo "‚úÖ All quality gates passed"
        echo "üéâ Ready for deployment"
      else
        echo "‚ùå Quality gates failed: $FAILED_JOBS"
        exit 1
      fi
  only:
    - merge_requests
    - main
    - develop

# Notification job
notify:
  stage: monitor
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        STATUS_EMOJI="‚úÖ"
        STATUS_TEXT="SUCCESS"
      else
        STATUS_EMOJI="‚ùå"
        STATUS_TEXT="FAILED"
      fi
      
      MESSAGE="$STATUS_EMOJI CI/CD Pipeline for {{.ProjectName}} - $STATUS_TEXT
      Branch: $CI_COMMIT_REF_NAME
      Commit: $CI_COMMIT_SHA
      Pipeline: $CI_PIPELINE_URL"
      
      # Send to Slack if webhook is configured
      if [ -n "$SLACK_WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          "$SLACK_WEBHOOK_URL"
      fi
      
      echo "$MESSAGE"
  when: always
  only:
    - main
    - tags