apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "{{.ProjectName}}.fullname" . }}
  labels:
    {{- include "{{.ProjectName}}.labels" . | nindent 4 }}
  annotations:
    deployment.kubernetes.io/revision: "{{ .Values.image.tag }}"
    {{- with .Values.podAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "{{.ProjectName}}.selectorLabels" . | nindent 6 }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "{{.ProjectName}}.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "{{.ProjectName}}.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.migrations.enabled }}
      initContainers:
        - name: migrations
          image: "{{ .Values.migrations.image.repository }}:{{ .Values.migrations.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - migrate
            - -path
            - /migrations
            - -database
            - $(DATABASE_URL)
            - up
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "{{.ProjectName}}.fullname" . }}-secrets
                  key: database_url
          volumeMounts:
            - name: migrations
              mountPath: /migrations
              readOnly: true
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.features.metrics }}
            - name: metrics
              containerPort: 9090
              protocol: TCP
            {{- end }}
            {{- if .Values.debug.pprof }}
            - name: pprof
              containerPort: 6060
              protocol: TCP
            {{- end }}
          env:
            {{- toYaml .Values.env | nindent 12 }}
            {{- if .Values.debug.enabled }}
            - name: DEBUG
              value: "true"
            {{- end }}
            {{- if .Values.debug.verbose }}
            - name: VERBOSE
              value: "true"
            {{- end }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe }}
          startupProbe:
            {{- toYaml .Values.startupProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /data
            {{- end }}
            {{- if .Values.migrations.enabled }}
            - name: migrations
              mountPath: /app/migrations
              readOnly: true
            {{- end }}
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    # Graceful shutdown
                    echo "Received SIGTERM, starting graceful shutdown..."
                    # Give the application time to finish processing requests
                    sleep 10
        {{- if .Values.features.tracing }}
        # Jaeger sidecar for distributed tracing
        - name: jaeger-agent
          image: jaegertracing/jaeger-agent:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: jaeger-thrift
              containerPort: 14268
              protocol: TCP
            - name: jaeger-binary
              containerPort: 14267
              protocol: TCP
          env:
            - name: REPORTER_GRPC_HOST_PORT
              value: "jaeger-collector:14250"
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
        {{- end }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "{{.ProjectName}}.fullname" . }}-data
        {{- end }}
        {{- if .Values.migrations.enabled }}
        - name: migrations
          configMap:
            name: {{ include "{{.ProjectName}}.fullname" . }}-migrations
        {{- end }}
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # Termination grace period
      terminationGracePeriodSeconds: 30
      # DNS policy
      dnsPolicy: ClusterFirst
      # Restart policy
      restartPolicy: Always
      # Priority class for pod scheduling
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
---
{{- if .Values.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "{{.ProjectName}}.fullname" . }}
  labels:
    {{- include "{{.ProjectName}}.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "{{.ProjectName}}.fullname" . }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
    {{- with .Values.autoscaling.customMetrics }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 4
        periodSeconds: 30
      selectPolicy: Max
{{- end }}
---
{{- if .Values.verticalPodAutoscaler.enabled }}
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: {{ include "{{.ProjectName}}.fullname" . }}
  labels:
    {{- include "{{.ProjectName}}.labels" . | nindent 4 }}
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "{{.ProjectName}}.fullname" . }}
  updatePolicy:
    updateMode: {{ .Values.verticalPodAutoscaler.updateMode }}
  resourcePolicy:
    containerPolicies:
    - containerName: {{ .Chart.Name }}
      minAllowed:
        cpu: 100m
        memory: 128Mi
      maxAllowed:
        cpu: 1000m
        memory: 1Gi
      controlledResources: ["cpu", "memory"]
{{- end }}
---
{{- if .Values.podDisruptionBudget.enabled }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "{{.ProjectName}}.fullname" . }}
  labels:
    {{- include "{{.ProjectName}}.labels" . | nindent 4 }}
spec:
  {{- if .Values.podDisruptionBudget.minAvailable }}
  minAvailable: {{ .Values.podDisruptionBudget.minAvailable }}
  {{- end }}
  {{- if .Values.podDisruptionBudget.maxUnavailable }}
  maxUnavailable: {{ .Values.podDisruptionBudget.maxUnavailable }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "{{.ProjectName}}.selectorLabels" . | nindent 6 }}
{{- end }}