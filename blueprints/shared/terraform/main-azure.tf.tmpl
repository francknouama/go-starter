# Production Infrastructure for {{.ProjectName}} on Microsoft Azure
# Supports: Web APIs, Microservices with AKS, Container Apps, Azure Functions
# Features: High availability, auto-scaling, monitoring, security

terraform {
  required_version = ">= 1.6"
  
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.80"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.45"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.20"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.10"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.5"
    }
  }

  backend "azurerm" {
    # Configuration provided via backend-config during terraform init
    # resource_group_name  = "{{.ProjectName}}-terraform-rg"
    # storage_account_name = "{{.ProjectName | replace "-" ""}}tfstate"
    # container_name       = "tfstate"
    # key                  = "terraform.tfstate"
  }
}

# Configure the Azure Provider
provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy    = true
      recover_soft_deleted_key_vaults = true
    }
    
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
  }
}

# Data sources
data "azurerm_client_config" "current" {}

# Local variables
locals {
  name_prefix = "${var.project_name}-${var.environment}"
  
  common_tags = {
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "Terraform"
    Owner       = var.owner
    CostCenter  = var.cost_center
  }

  # Available zones in the region
  availability_zones = ["1", "2", "3"]
}

# Random suffix for unique resource names
resource "random_string" "suffix" {
  length  = 8
  special = false
  upper   = false
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = "${local.name_prefix}-rg"
  location = var.azure_location

  tags = local.common_tags
}

{{- if eq .Type "web-api" "microservice" }}
# Virtual Network
resource "azurerm_virtual_network" "main" {
  name                = "${local.name_prefix}-vnet"
  address_space       = [var.vnet_cidr]
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name

  tags = local.common_tags
}

# Subnet for AKS
resource "azurerm_subnet" "aks" {
  name                 = "${local.name_prefix}-aks-subnet"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = [var.aks_subnet_cidr]
}

# Subnet for other services
resource "azurerm_subnet" "services" {
  name                 = "${local.name_prefix}-services-subnet"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = [var.services_subnet_cidr]

  # Service endpoints
  service_endpoints = [
    "Microsoft.Sql",
    "Microsoft.Storage",
    "Microsoft.KeyVault",
  ]
}

# Network Security Group for AKS
resource "azurerm_network_security_group" "aks" {
  name                = "${local.name_prefix}-aks-nsg"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name

  # Allow HTTP/HTTPS
  security_rule {
    name                       = "AllowHTTP"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowHTTPS"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  tags = local.common_tags
}

# Associate NSG with AKS subnet
resource "azurerm_subnet_network_security_group_association" "aks" {
  subnet_id                 = azurerm_subnet.aks.id
  network_security_group_id = azurerm_network_security_group.aks.id
}

# Log Analytics Workspace for monitoring
resource "azurerm_log_analytics_workspace" "main" {
  name                = "${local.name_prefix}-logs"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  sku                 = "PerGB2018"
  retention_in_days   = var.environment == "production" ? 30 : 7

  tags = local.common_tags
}

# Container Registry
resource "azurerm_container_registry" "main" {
  name                = "${replace(local.name_prefix, "-", "")}acr${random_string.suffix.result}"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  sku                 = var.acr_sku
  admin_enabled       = false

  # Identity for AKS integration
  identity {
    type = "SystemAssigned"
  }

  # Network access
  dynamic "network_rule_set" {
    for_each = var.acr_public_network_access_enabled ? [] : [1]
    content {
      default_action = "Deny"
      
      virtual_network {
        action    = "Allow"
        subnet_id = azurerm_subnet.aks.id
      }
    }
  }

  tags = local.common_tags
}

# AKS Cluster
resource "azurerm_kubernetes_cluster" "main" {
  name                = "${local.name_prefix}-aks"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  dns_prefix          = "${local.name_prefix}-aks"
  
  kubernetes_version        = var.kubernetes_version
  automatic_channel_upgrade = var.environment == "production" ? "stable" : "patch"
  
  # System node pool
  default_node_pool {
    name                = "system"
    node_count          = var.aks_system_node_count
    vm_size             = var.aks_system_vm_size
    vnet_subnet_id      = azurerm_subnet.aks.id
    zones               = local.availability_zones
    
    # Auto-scaling
    enable_auto_scaling = true
    min_count          = var.aks_system_min_count
    max_count          = var.aks_system_max_count
    
    # OS settings
    os_disk_size_gb      = var.aks_os_disk_size
    os_disk_type         = "Managed"
    only_critical_addons_enabled = true
    
    # Node labels
    node_labels = {
      role = "system"
    }
    
    # Node taints for system workloads
    node_taints = ["CriticalAddonsOnly=true:NoSchedule"]

    upgrade_settings {
      max_surge = "10%"
    }
  }

  # User node pool for applications
  dynamic "default_node_pool" {
    for_each = var.enable_user_node_pool ? [] : [1]
    content {}
  }

  # Identity
  identity {
    type = "SystemAssigned"
  }

  # Network profile
  network_profile {
    network_plugin      = "azure"
    network_policy      = "azure"
    dns_service_ip      = var.aks_dns_service_ip
    service_cidr        = var.aks_service_cidr
    docker_bridge_cidr  = var.aks_docker_bridge_cidr
    load_balancer_sku   = "standard"
  }

  # RBAC
  azure_active_directory_role_based_access_control {
    managed                = true
    admin_group_object_ids = var.aks_admin_group_object_ids
    azure_rbac_enabled     = true
  }

  # Add-ons
  addon_profile {
    oms_agent {
      enabled                    = true
      log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id
    }

    azure_policy {
      enabled = var.enable_azure_policy
    }

    http_application_routing {
      enabled = false # Use ingress controller instead
    }

    kube_dashboard {
      enabled = false # Deprecated
    }
  }

  # Auto-scaler profile
  auto_scaler_profile {
    balance_similar_node_groups      = false
    expander                        = "random"
    max_graceful_termination_sec    = "600"
    max_node_provisioning_time      = "15m"
    max_unready_nodes              = 3
    max_unready_percentage         = 45
    new_pod_scale_up_delay         = "10s"
    scale_down_delay_after_add     = "10m"
    scale_down_delay_after_delete  = "10s"
    scale_down_delay_after_failure = "3m"
    scan_interval                  = "10s"
    scale_down_threshold           = "0.5"
    scale_down_unneeded_time       = "10m"
    scale_down_utilization_threshold = "0.5"
    skip_nodes_with_local_storage    = false
    skip_nodes_with_system_pods      = true
  }

  # Maintenance window
  maintenance_window {
    allowed {
      day   = "Sunday"
      hours = [3, 4]
    }
  }

  tags = local.common_tags

  depends_on = [
    azurerm_subnet_network_security_group_association.aks
  ]
}

# User Node Pool for applications
resource "azurerm_kubernetes_cluster_node_pool" "user" {
  count = var.enable_user_node_pool ? 1 : 0
  
  name                  = "user"
  kubernetes_cluster_id = azurerm_kubernetes_cluster.main.id
  vm_size              = var.aks_user_vm_size
  vnet_subnet_id       = azurerm_subnet.aks.id
  zones                = local.availability_zones
  
  # Auto-scaling
  enable_auto_scaling = true
  node_count         = var.aks_user_node_count
  min_count          = var.aks_user_min_count
  max_count          = var.aks_user_max_count
  
  # OS settings
  os_disk_size_gb = var.aks_os_disk_size
  os_disk_type    = "Managed"
  os_type         = "Linux"
  
  # Node labels
  node_labels = {
    role = "user"
  }

  upgrade_settings {
    max_surge = "33%"
  }

  tags = local.common_tags
}

# Role assignment for AKS to pull from ACR
resource "azurerm_role_assignment" "aks_acr" {
  principal_id                     = azurerm_kubernetes_cluster.main.kubelet_identity[0].object_id
  role_definition_name             = "AcrPull"
  scope                           = azurerm_container_registry.main.id
  skip_service_principal_aad_check = true
}

# Azure SQL Database (if enabled)
resource "azurerm_mssql_server" "main" {
  count = var.enable_database ? 1 : 0
  
  name                         = "${local.name_prefix}-sql-${random_string.suffix.result}"
  resource_group_name          = azurerm_resource_group.main.name
  location                     = azurerm_resource_group.main.location
  version                      = "12.0"
  administrator_login          = var.database_admin_username
  administrator_login_password = var.database_admin_password
  
  # Azure AD authentication
  azuread_administrator {
    login_username = var.database_azuread_admin_login
    object_id      = var.database_azuread_admin_object_id
  }

  # Network restrictions
  public_network_access_enabled = var.database_public_access_enabled

  # Identity for Key Vault access
  identity {
    type = "SystemAssigned"
  }

  tags = local.common_tags
}

resource "azurerm_mssql_database" "main" {
  count = var.enable_database ? 1 : 0
  
  name           = var.database_name
  server_id      = azurerm_mssql_server.main[0].id
  collation      = "SQL_Latin1_General_CP1_CI_AS"
  license_type   = "LicenseIncluded"
  sku_name       = var.database_sku_name
  zone_redundant = var.environment == "production"
  
  # Backup settings
  short_term_retention_policy {
    retention_days = var.environment == "production" ? 35 : 7
  }
  
  long_term_retention_policy {
    weekly_retention  = var.environment == "production" ? "P12W" : "PT0S"
    monthly_retention = var.environment == "production" ? "P12M" : "PT0S"
    yearly_retention  = var.environment == "production" ? "P5Y" : "PT0S"
    week_of_year     = var.environment == "production" ? 1 : null
  }

  tags = local.common_tags
}

# Database firewall rules
resource "azurerm_mssql_firewall_rule" "aks" {
  count = var.enable_database ? 1 : 0
  
  name             = "AllowAKS"
  server_id        = azurerm_mssql_server.main[0].id
  start_ip_address = "0.0.0.0"
  end_ip_address   = "0.0.0.0"
}

# Redis Cache (if enabled)
resource "azurerm_redis_cache" "main" {
  count = var.enable_redis ? 1 : 0
  
  name                = "${local.name_prefix}-redis-${random_string.suffix.result}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  capacity            = var.redis_capacity
  family              = var.redis_family
  sku_name            = var.redis_sku_name
  enable_non_ssl_port = false
  minimum_tls_version = "1.2"
  
  # Network restrictions
  subnet_id = var.redis_subnet_id != "" ? var.redis_subnet_id : null
  
  # High availability for production
  dynamic "patch_schedule" {
    for_each = var.environment == "production" ? [1] : []
    content {
      day_of_week    = "Sunday"
      start_hour_utc = 3
    }
  }

  redis_configuration {
    # Backup settings for Premium tier
    dynamic "rdb_backup_enabled" {
      for_each = var.redis_sku_name == "Premium" ? [true] : []
      content {
        value = true
      }
    }
    
    # Backup frequency for Premium tier
    dynamic "rdb_backup_frequency" {
      for_each = var.redis_sku_name == "Premium" ? [60] : []
      content {
        value = 60
      }
    }
    
    # Storage account for backups
    dynamic "rdb_storage_connection_string" {
      for_each = var.redis_sku_name == "Premium" ? [azurerm_storage_account.redis_backup[0].primary_connection_string] : []
      content {
        value = azurerm_storage_account.redis_backup[0].primary_connection_string
      }
    }
  }

  tags = local.common_tags
}

# Storage account for Redis backups (Premium tier only)
resource "azurerm_storage_account" "redis_backup" {
  count = var.enable_redis && var.redis_sku_name == "Premium" ? 1 : 0
  
  name                     = "${replace(local.name_prefix, "-", "")}redisbackup${random_string.suffix.result}"
  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  account_tier             = "Standard"
  account_replication_type = "LRS"

  tags = local.common_tags
}

# Application Gateway (if enabled)
resource "azurerm_subnet" "appgw" {
  count = var.enable_app_gateway ? 1 : 0
  
  name                 = "${local.name_prefix}-appgw-subnet"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = [var.appgw_subnet_cidr]
}

resource "azurerm_public_ip" "appgw" {
  count = var.enable_app_gateway ? 1 : 0
  
  name                = "${local.name_prefix}-appgw-ip"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  allocation_method   = "Static"
  sku                 = "Standard"
  zones               = local.availability_zones

  tags = local.common_tags
}

resource "azurerm_application_gateway" "main" {
  count = var.enable_app_gateway ? 1 : 0
  
  name                = "${local.name_prefix}-appgw"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location

  sku {
    name     = "Standard_v2"
    tier     = "Standard_v2"
    capacity = 2
  }

  gateway_ip_configuration {
    name      = "my-gateway-ip-configuration"
    subnet_id = azurerm_subnet.appgw[0].id
  }

  frontend_port {
    name = "frontend-port-80"
    port = 80
  }

  frontend_port {
    name = "frontend-port-443"
    port = 443
  }

  frontend_ip_configuration {
    name                 = "frontend-ip-config"
    public_ip_address_id = azurerm_public_ip.appgw[0].id
  }

  backend_address_pool {
    name = "backend-pool"
  }

  backend_http_settings {
    name                  = "backend-http-settings"
    cookie_based_affinity = "Disabled"
    path                  = "/"
    port                  = 80
    protocol              = "Http"
    request_timeout       = 60
  }

  http_listener {
    name                           = "http-listener"
    frontend_ip_configuration_name = "frontend-ip-config"
    frontend_port_name             = "frontend-port-80"
    protocol                       = "Http"
  }

  request_routing_rule {
    name                       = "routing-rule"
    rule_type                  = "Basic"
    http_listener_name         = "http-listener"
    backend_address_pool_name  = "backend-pool"
    backend_http_settings_name = "backend-http-settings"
    priority                   = 100
  }

  tags = local.common_tags
}

{{- else if eq .Type "lambda" "azure-function" }}
# Storage Account for Azure Function
resource "azurerm_storage_account" "function" {
  name                     = "${replace(local.name_prefix, "-", "")}func${random_string.suffix.result}"
  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  account_tier             = "Standard"
  account_replication_type = "LRS"

  tags = local.common_tags
}

# App Service Plan for Azure Functions
resource "azurerm_service_plan" "function" {
  name                = "${local.name_prefix}-func-plan"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  os_type             = "Linux"
  sku_name            = var.function_sku_name

  tags = local.common_tags
}

# Azure Function App
resource "azurerm_linux_function_app" "main" {
  name                = "${local.name_prefix}-func"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location

  storage_account_name       = azurerm_storage_account.function.name
  storage_account_access_key = azurerm_storage_account.function.primary_access_key
  service_plan_id           = azurerm_service_plan.function.id

  site_config {
    always_on = var.function_sku_name != "Y1"

    application_stack {
      go_version = "1.21"
    }

    # CORS
    cors {
      allowed_origins     = var.function_cors_origins
      support_credentials = false
    }

    # Application Insights
    application_insights_key               = azurerm_application_insights.main.instrumentation_key
    application_insights_connection_string = azurerm_application_insights.main.connection_string
  }

  app_settings = var.function_app_settings

  # Identity for Key Vault access
  identity {
    type = "SystemAssigned"
  }

  tags = local.common_tags
}

# Application Insights for monitoring
resource "azurerm_application_insights" "main" {
  name                = "${local.name_prefix}-appinsights"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  workspace_id        = azurerm_log_analytics_workspace.main.id
  application_type    = "web"

  tags = local.common_tags
}

# Cosmos DB (if enabled)
resource "azurerm_cosmosdb_account" "main" {
  count = var.enable_cosmosdb ? 1 : 0
  
  name                = "${local.name_prefix}-cosmos-${random_string.suffix.result}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  offer_type          = "Standard"
  kind                = "GlobalDocumentDB"

  enable_automatic_failover = var.environment == "production"
  enable_multiple_write_locations = var.environment == "production"

  consistency_policy {
    consistency_level       = var.cosmosdb_consistency_level
    max_interval_in_seconds = 5
    max_staleness_prefix    = 100
  }

  geo_location {
    location          = azurerm_resource_group.main.location
    failover_priority = 0
  }

  # Additional regions for production
  dynamic "geo_location" {
    for_each = var.environment == "production" ? var.cosmosdb_additional_regions : []
    content {
      location          = geo_location.value.location
      failover_priority = geo_location.value.failover_priority
    }
  }

  tags = local.common_tags
}

resource "azurerm_cosmosdb_sql_database" "main" {
  count = var.enable_cosmosdb ? 1 : 0
  
  name                = var.cosmosdb_database_name
  resource_group_name = azurerm_resource_group.main.name
  account_name        = azurerm_cosmosdb_account.main[0].name
}

resource "azurerm_cosmosdb_sql_container" "main" {
  count = var.enable_cosmosdb ? 1 : 0
  
  name                  = var.cosmosdb_container_name
  resource_group_name   = azurerm_resource_group.main.name
  account_name          = azurerm_cosmosdb_account.main[0].name
  database_name         = azurerm_cosmosdb_sql_database.main[0].name
  partition_key_path    = var.cosmosdb_partition_key_path
  partition_key_version = 1
  throughput            = var.cosmosdb_throughput

  indexing_policy {
    indexing_mode = "consistent"

    included_path {
      path = "/*"
    }

    excluded_path {
      path = "/\"_etag\"/?"
    }
  }
}
{{- end }}

# Key Vault for secrets
resource "azurerm_key_vault" "main" {
  name                        = "${local.name_prefix}-kv-${random_string.suffix.result}"
  location                    = azurerm_resource_group.main.location
  resource_group_name         = azurerm_resource_group.main.name
  enabled_for_disk_encryption = true
  tenant_id                   = data.azurerm_client_config.current.tenant_id
  soft_delete_retention_days  = 7
  purge_protection_enabled    = var.environment == "production"

  sku_name = "standard"

  # Network access
  network_acls {
    bypass                     = "AzureServices"
    default_action             = var.key_vault_public_access_enabled ? "Allow" : "Deny"
    
    # Allow access from AKS subnet
    {{- if eq .Type "web-api" "microservice" }}
    virtual_network_subnet_ids = [azurerm_subnet.aks.id]
    {{- end }}
  }

  tags = local.common_tags
}

# Key Vault access policy for current user/service principal
resource "azurerm_key_vault_access_policy" "current" {
  key_vault_id = azurerm_key_vault.main.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = data.azurerm_client_config.current.object_id

  key_permissions = [
    "Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore"
  ]

  secret_permissions = [
    "Get", "List", "Set", "Delete", "Recover", "Backup", "Restore"
  ]

  certificate_permissions = [
    "Get", "List", "Update", "Create", "Import", "Delete", "Recover", "Backup", "Restore",
    "ManageContacts", "ManageIssuers", "GetIssuers", "ListIssuers", "SetIssuers", "DeleteIssuers"
  ]
}

{{- if eq .Type "web-api" "microservice" }}
# Key Vault access policy for AKS
resource "azurerm_key_vault_access_policy" "aks" {
  key_vault_id = azurerm_key_vault.main.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = azurerm_kubernetes_cluster.main.identity[0].principal_id

  secret_permissions = [
    "Get", "List"
  ]
}
{{- else if eq .Type "lambda" "azure-function" }}
# Key Vault access policy for Azure Function
resource "azurerm_key_vault_access_policy" "function" {
  key_vault_id = azurerm_key_vault.main.id
  tenant_id    = data.azurerm_client_config.current.tenant_id
  object_id    = azurerm_linux_function_app.main.identity[0].principal_id

  secret_permissions = [
    "Get", "List"
  ]
}
{{- end }}

# Store application secrets in Key Vault
resource "azurerm_key_vault_secret" "secrets" {
  for_each = var.application_secrets

  name         = each.key
  value        = each.value
  key_vault_id = azurerm_key_vault.main.id

  depends_on = [azurerm_key_vault_access_policy.current]

  tags = local.common_tags
}

# Monitor action group for alerts
resource "azurerm_monitor_action_group" "main" {
  name                = "${local.name_prefix}-alerts"
  resource_group_name = azurerm_resource_group.main.name
  short_name          = substr(replace(local.name_prefix, "-", ""), 0, 12)

  dynamic "email_receiver" {
    for_each = var.alert_email != "" ? [1] : []
    content {
      name          = "email-alert"
      email_address = var.alert_email
    }
  }

  tags = local.common_tags
}

# Example metric alert
resource "azurerm_monitor_metric_alert" "cpu_high" {
  name                = "${local.name_prefix}-cpu-high"
  resource_group_name = azurerm_resource_group.main.name
  
  {{- if eq .Type "web-api" "microservice" }}
  scopes = [azurerm_kubernetes_cluster.main.id]
  {{- else if eq .Type "lambda" "azure-function" }}
  scopes = [azurerm_linux_function_app.main.id]
  {{- end }}

  description = "Alert when CPU usage is high"

  criteria {
    metric_namespace = "Microsoft.ContainerService/managedClusters"
    metric_name      = "cpu_usage_active_cores"
    aggregation      = "Average"
    operator         = "GreaterThan"
    threshold        = 80
  }

  action {
    action_group_id = azurerm_monitor_action_group.main.id
  }

  tags = local.common_tags
}

# Backup vault (for production)
resource "azurerm_data_protection_backup_vault" "main" {
  count = var.environment == "production" ? 1 : 0
  
  name                = "${local.name_prefix}-backup-vault"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  datastore_type      = "VaultStore"
  redundancy          = "LocallyRedundant"

  identity {
    type = "SystemAssigned"
  }

  tags = local.common_tags
}