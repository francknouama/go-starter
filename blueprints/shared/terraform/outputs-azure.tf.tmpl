# Outputs for {{.ProjectName}} Infrastructure on Microsoft Azure

# Resource Group Output
output "resource_group_name" {
  description = "Name of the resource group"
  value       = azurerm_resource_group.main.name
}

output "resource_group_location" {
  description = "Location of the resource group"
  value       = azurerm_resource_group.main.location
}

{{- if eq .Type "web-api" "microservice" }}
# Virtual Network Outputs
output "vnet_id" {
  description = "ID of the virtual network"
  value       = azurerm_virtual_network.main.id
}

output "vnet_name" {
  description = "Name of the virtual network"
  value       = azurerm_virtual_network.main.name
}

output "vnet_address_space" {
  description = "Address space of the virtual network"
  value       = azurerm_virtual_network.main.address_space
}

output "aks_subnet_id" {
  description = "ID of the AKS subnet"
  value       = azurerm_subnet.aks.id
}

output "services_subnet_id" {
  description = "ID of the services subnet"
  value       = azurerm_subnet.services.id
}

# AKS Cluster Outputs
output "cluster_name" {
  description = "Name of the AKS cluster"
  value       = azurerm_kubernetes_cluster.main.name
}

output "cluster_fqdn" {
  description = "FQDN of the AKS cluster"
  value       = azurerm_kubernetes_cluster.main.fqdn
}

output "cluster_endpoint" {
  description = "Endpoint for AKS control plane"
  value       = azurerm_kubernetes_cluster.main.kube_config[0].host
  sensitive   = true
}

output "cluster_ca_certificate" {
  description = "Base64 encoded certificate data required to communicate with the cluster"
  value       = azurerm_kubernetes_cluster.main.kube_config[0].cluster_ca_certificate
  sensitive   = true
}

output "cluster_client_certificate" {
  description = "Base64 encoded client certificate data"
  value       = azurerm_kubernetes_cluster.main.kube_config[0].client_certificate
  sensitive   = true
}

output "cluster_client_key" {
  description = "Base64 encoded client key data"
  value       = azurerm_kubernetes_cluster.main.kube_config[0].client_key
  sensitive   = true
}

output "cluster_node_resource_group" {
  description = "Auto-generated resource group containing AKS cluster nodes"
  value       = azurerm_kubernetes_cluster.main.node_resource_group
}

output "cluster_identity_principal_id" {
  description = "Principal ID of the AKS cluster identity"
  value       = azurerm_kubernetes_cluster.main.identity[0].principal_id
}

# Node Pool Outputs
output "system_node_pool_id" {
  description = "ID of the system node pool"
  value       = azurerm_kubernetes_cluster.main.default_node_pool[0].name
}

output "user_node_pool_id" {
  description = "ID of the user node pool"
  value       = var.enable_user_node_pool ? azurerm_kubernetes_cluster_node_pool.user[0].id : null
}

# Container Registry Outputs
output "acr_id" {
  description = "ID of the Azure Container Registry"
  value       = azurerm_container_registry.main.id
}

output "acr_name" {
  description = "Name of the Azure Container Registry"
  value       = azurerm_container_registry.main.name
}

output "acr_login_server" {
  description = "Login server for the Azure Container Registry"
  value       = azurerm_container_registry.main.login_server
}

output "acr_admin_username" {
  description = "Admin username for the Azure Container Registry"
  value       = azurerm_container_registry.main.admin_enabled ? azurerm_container_registry.main.admin_username : null
  sensitive   = true
}

# Database Outputs (Azure SQL)
output "database_server_name" {
  description = "Name of the Azure SQL server"
  value       = var.enable_database ? azurerm_mssql_server.main[0].name : null
}

output "database_server_fqdn" {
  description = "FQDN of the Azure SQL server"
  value       = var.enable_database ? azurerm_mssql_server.main[0].fully_qualified_domain_name : null
  sensitive   = true
}

output "database_name" {
  description = "Name of the Azure SQL database"
  value       = var.enable_database ? azurerm_mssql_database.main[0].name : null
}

output "database_connection_string" {
  description = "Connection string for the Azure SQL database"
  value       = var.enable_database ? "Server=${azurerm_mssql_server.main[0].fully_qualified_domain_name};Database=${azurerm_mssql_database.main[0].name};User ID=${var.database_admin_username};" : null
  sensitive   = true
}

# Redis Cache Outputs
output "redis_hostname" {
  description = "Hostname of the Redis cache"
  value       = var.enable_redis ? azurerm_redis_cache.main[0].hostname : null
  sensitive   = true
}

output "redis_port" {
  description = "Port of the Redis cache"
  value       = var.enable_redis ? azurerm_redis_cache.main[0].port : null
}

output "redis_ssl_port" {
  description = "SSL port of the Redis cache"
  value       = var.enable_redis ? azurerm_redis_cache.main[0].ssl_port : null
}

output "redis_primary_access_key" {
  description = "Primary access key for the Redis cache"
  value       = var.enable_redis ? azurerm_redis_cache.main[0].primary_access_key : null
  sensitive   = true
}

# Application Gateway Outputs (if enabled)
output "app_gateway_public_ip" {
  description = "Public IP address of the Application Gateway"
  value       = var.enable_app_gateway ? azurerm_public_ip.appgw[0].ip_address : null
}

output "app_gateway_fqdn" {
  description = "FQDN of the Application Gateway"
  value       = var.enable_app_gateway ? azurerm_public_ip.appgw[0].fqdn : null
}

# Application URL
output "application_url" {
  description = "URL of the deployed application"
  value       = var.enable_app_gateway ? "http://${azurerm_public_ip.appgw[0].ip_address}" : "Configure ingress controller for access"
}

{{- else if eq .Type "lambda" "azure-function" }}
# Azure Function Outputs
output "function_app_name" {
  description = "Name of the Azure Function App"
  value       = azurerm_linux_function_app.main.name
}

output "function_app_default_hostname" {
  description = "Default hostname of the Azure Function App"
  value       = azurerm_linux_function_app.main.default_hostname
}

output "function_app_id" {
  description = "ID of the Azure Function App"
  value       = azurerm_linux_function_app.main.id
}

output "function_app_identity_principal_id" {
  description = "Principal ID of the Function App identity"
  value       = azurerm_linux_function_app.main.identity[0].principal_id
}

# Storage Account Outputs
output "storage_account_name" {
  description = "Name of the storage account"
  value       = azurerm_storage_account.function.name
}

output "storage_account_primary_endpoint" {
  description = "Primary endpoint of the storage account"
  value       = azurerm_storage_account.function.primary_blob_endpoint
}

# App Service Plan Outputs
output "app_service_plan_id" {
  description = "ID of the App Service Plan"
  value       = azurerm_service_plan.function.id
}

output "app_service_plan_name" {
  description = "Name of the App Service Plan"
  value       = azurerm_service_plan.function.name
}

# Application Insights Outputs
output "application_insights_instrumentation_key" {
  description = "Instrumentation key for Application Insights"
  value       = azurerm_application_insights.main.instrumentation_key
  sensitive   = true
}

output "application_insights_connection_string" {
  description = "Connection string for Application Insights"
  value       = azurerm_application_insights.main.connection_string
  sensitive   = true
}

# Cosmos DB Outputs (if enabled)
output "cosmosdb_account_name" {
  description = "Name of the Cosmos DB account"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_account.main[0].name : null
}

output "cosmosdb_endpoint" {
  description = "Endpoint of the Cosmos DB account"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_account.main[0].endpoint : null
  sensitive   = true
}

output "cosmosdb_primary_key" {
  description = "Primary key of the Cosmos DB account"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_account.main[0].primary_key : null
  sensitive   = true
}

output "cosmosdb_connection_strings" {
  description = "Connection strings for the Cosmos DB account"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_account.main[0].connection_strings : null
  sensitive   = true
}

output "cosmosdb_database_name" {
  description = "Name of the Cosmos DB database"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_sql_database.main[0].name : null
}

output "cosmosdb_container_name" {
  description = "Name of the Cosmos DB container"
  value       = var.enable_cosmosdb ? azurerm_cosmosdb_sql_container.main[0].name : null
}

# Function URL
output "function_url" {
  description = "URL of the Azure Function"
  value       = "https://${azurerm_linux_function_app.main.default_hostname}/api"
}
{{- end }}

# Log Analytics Workspace Outputs
output "log_analytics_workspace_id" {
  description = "ID of the Log Analytics workspace"
  value       = azurerm_log_analytics_workspace.main.id
}

output "log_analytics_workspace_name" {
  description = "Name of the Log Analytics workspace"
  value       = azurerm_log_analytics_workspace.main.name
}

output "log_analytics_primary_shared_key" {
  description = "Primary shared key of the Log Analytics workspace"
  value       = azurerm_log_analytics_workspace.main.primary_shared_key
  sensitive   = true
}

# Key Vault Outputs
output "key_vault_id" {
  description = "ID of the Key Vault"
  value       = azurerm_key_vault.main.id
}

output "key_vault_name" {
  description = "Name of the Key Vault"
  value       = azurerm_key_vault.main.name
}

output "key_vault_uri" {
  description = "URI of the Key Vault"
  value       = azurerm_key_vault.main.vault_uri
}

output "key_vault_secrets" {
  description = "List of secrets stored in Key Vault"
  value       = [for secret in azurerm_key_vault_secret.secrets : secret.name]
}

# Monitoring Outputs
output "action_group_id" {
  description = "ID of the monitor action group"
  value       = azurerm_monitor_action_group.main.id
}

output "metric_alert_id" {
  description = "ID of the CPU high metric alert"
  value       = azurerm_monitor_metric_alert.cpu_high.id
}

# Backup Outputs (if enabled)
output "backup_vault_id" {
  description = "ID of the backup vault"
  value       = var.environment == "production" ? azurerm_data_protection_backup_vault.main[0].id : null
}

output "backup_vault_name" {
  description = "Name of the backup vault"
  value       = var.environment == "production" ? azurerm_data_protection_backup_vault.main[0].name : null
}

# Environment Information
output "environment" {
  description = "Environment name"
  value       = var.environment
}

output "project_name" {
  description = "Project name"
  value       = var.project_name
}

output "location" {
  description = "Azure location"
  value       = var.azure_location
}

# Azure Subscription Information
output "subscription_id" {
  description = "Azure subscription ID"
  value       = data.azurerm_client_config.current.subscription_id
  sensitive   = true
}

output "tenant_id" {
  description = "Azure tenant ID"
  value       = data.azurerm_client_config.current.tenant_id
  sensitive   = true
}

# Resource Tags
output "common_tags" {
  description = "Common tags applied to all resources"
  value       = local.common_tags
}

# Deployment Information
output "deployment_timestamp" {
  description = "Timestamp of the deployment"
  value       = timestamp()
}

# Resource Summary
output "resource_summary" {
  description = "Summary of created resources"
  value = {
    resource_group_created    = true
    {{- if eq .Type "web-api" "microservice" }}
    virtual_network_created   = true
    aks_cluster_created       = true
    container_registry_created = true
    database_created          = var.enable_database
    redis_created            = var.enable_redis
    application_gateway_created = var.enable_app_gateway
    {{- else if eq .Type "lambda" "azure-function" }}
    function_app_created     = true
    storage_account_created  = true
    app_service_plan_created = true
    cosmosdb_created         = var.enable_cosmosdb
    {{- end }}
    key_vault_created        = true
    log_analytics_created    = true
    monitoring_enabled       = var.alert_email != ""
    backup_enabled          = var.environment == "production"
  }
}

# Connection Information for Applications
output "connection_info" {
  description = "Connection information for applications"
  value = {
    {{- if eq .Type "web-api" "microservice" }}
    kubernetes = {
      cluster_name = azurerm_kubernetes_cluster.main.name
      resource_group = azurerm_kubernetes_cluster.main.resource_group_name
      fqdn         = azurerm_kubernetes_cluster.main.fqdn
    }
    container_registry = {
      login_server = azurerm_container_registry.main.login_server
      name         = azurerm_container_registry.main.name
    }
    database = var.enable_database ? {
      server_fqdn = azurerm_mssql_server.main[0].fully_qualified_domain_name
      database_name = azurerm_mssql_database.main[0].name
      admin_username = var.database_admin_username
    } : null
    redis = var.enable_redis ? {
      hostname = azurerm_redis_cache.main[0].hostname
      port     = azurerm_redis_cache.main[0].port
      ssl_port = azurerm_redis_cache.main[0].ssl_port
    } : null
    {{- else if eq .Type "lambda" "azure-function" }}
    function_app = {
      name     = azurerm_linux_function_app.main.name
      hostname = azurerm_linux_function_app.main.default_hostname
    }
    storage = {
      account_name = azurerm_storage_account.function.name
      endpoint     = azurerm_storage_account.function.primary_blob_endpoint
    }
    cosmosdb = var.enable_cosmosdb ? {
      account_name   = azurerm_cosmosdb_account.main[0].name
      endpoint       = azurerm_cosmosdb_account.main[0].endpoint
      database_name  = azurerm_cosmosdb_sql_database.main[0].name
      container_name = azurerm_cosmosdb_sql_container.main[0].name
    } : null
    {{- end }}
    key_vault = {
      name = azurerm_key_vault.main.name
      uri  = azurerm_key_vault.main.vault_uri
    }
    log_analytics = {
      workspace_id = azurerm_log_analytics_workspace.main.workspace_id
      name         = azurerm_log_analytics_workspace.main.name
    }
  }
  sensitive = true
}

# Health Check Information
output "health_check_info" {
  description = "Health check endpoints and monitoring"
  value = {
    {{- if eq .Type "web-api" "microservice" }}
    application_health_url = var.enable_app_gateway ? "http://${azurerm_public_ip.appgw[0].ip_address}/health" : "Configure ingress controller"
    {{- else if eq .Type "lambda" "azure-function" }}
    function_health_url = "https://${azurerm_linux_function_app.main.default_hostname}/api/health"
    {{- end }}
    azure_portal_url     = "https://portal.azure.com/#@${data.azurerm_client_config.current.tenant_id}/resource${azurerm_resource_group.main.id}"
    log_analytics_url    = "https://portal.azure.com/#@${data.azurerm_client_config.current.tenant_id}/resource${azurerm_log_analytics_workspace.main.id}"
    application_insights_url = "https://portal.azure.com/#@${data.azurerm_client_config.current.tenant_id}/resource${azurerm_application_insights.main.id}"
  }
}

# Security Information
output "security_info" {
  description = "Security configuration and access information"
  value = {
    {{- if eq .Type "web-api" "microservice" }}
    aks_identity_principal_id = azurerm_kubernetes_cluster.main.identity[0].principal_id
    acr_identity_principal_id = azurerm_container_registry.main.identity[0].principal_id
    {{- else if eq .Type "lambda" "azure-function" }}
    function_identity_principal_id = azurerm_linux_function_app.main.identity[0].principal_id
    {{- end }}
    key_vault_access_policies = length(azurerm_key_vault.main.access_policy)
    rbac_enabled             = true
    private_networking       = !var.key_vault_public_access_enabled
  }
}

# Cost Optimization Information
output "cost_optimization_info" {
  description = "Cost optimization features and recommendations"
  value = {
    {{- if eq .Type "web-api" "microservice" }}
    spot_node_pools = var.environment != "production"
    autoscaling     = true
    {{- else if eq .Type "lambda" "azure-function" }}
    consumption_plan = var.function_sku_name == "Y1"
    {{- end }}
    environment     = var.environment
    cost_center     = var.cost_center
    backup_enabled  = var.environment == "production"
    monitoring_tier = "Standard"
  }
}