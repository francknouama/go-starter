# Microsoft Azure Variables for {{.ProjectName}}

# Common Variables
variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "{{.ProjectName}}"
}

variable "environment" {
  description = "Environment (dev, staging, production)"
  type        = string
  default     = "dev"
  
  validation {
    condition     = contains(["dev", "staging", "production"], var.environment)
    error_message = "Environment must be one of: dev, staging, production."
  }
}

variable "azure_location" {
  description = "Azure region for resources"
  type        = string
  default     = "East US"
}

variable "owner" {
  description = "Owner of the resources"
  type        = string
  default     = ""
}

variable "cost_center" {
  description = "Cost center for billing"
  type        = string
  default     = ""
}

{{- if eq .Type "web-api" "microservice" }}
# Network Configuration
variable "vnet_cidr" {
  description = "CIDR range for Virtual Network"
  type        = string
  default     = "10.0.0.0/16"
}

variable "aks_subnet_cidr" {
  description = "CIDR range for AKS subnet"
  type        = string
  default     = "10.0.1.0/24"
}

variable "services_subnet_cidr" {
  description = "CIDR range for services subnet"
  type        = string
  default     = "10.0.2.0/24"
}

variable "appgw_subnet_cidr" {
  description = "CIDR range for Application Gateway subnet"
  type        = string
  default     = "10.0.3.0/24"
}

# AKS Configuration
variable "kubernetes_version" {
  description = "Kubernetes version for AKS cluster"
  type        = string
  default     = "1.28"
}

variable "aks_dns_service_ip" {
  description = "DNS service IP for AKS"
  type        = string
  default     = "10.0.100.10"
}

variable "aks_service_cidr" {
  description = "Service CIDR for AKS"
  type        = string
  default     = "10.0.100.0/24"
}

variable "aks_docker_bridge_cidr" {
  description = "Docker bridge CIDR for AKS"
  type        = string
  default     = "172.17.0.1/16"
}

# System Node Pool
variable "aks_system_node_count" {
  description = "Number of nodes in the system node pool"
  type        = number
  default     = 2
}

variable "aks_system_min_count" {
  description = "Minimum number of nodes in the system node pool"
  type        = number
  default     = 1
}

variable "aks_system_max_count" {
  description = "Maximum number of nodes in the system node pool"
  type        = number
  default     = 5
}

variable "aks_system_vm_size" {
  description = "VM size for system node pool"
  type        = string
  default     = "Standard_D2s_v3"
}

# User Node Pool
variable "enable_user_node_pool" {
  description = "Whether to create a separate user node pool"
  type        = bool
  default     = true
}

variable "aks_user_node_count" {
  description = "Number of nodes in the user node pool"
  type        = number
  default     = 2
}

variable "aks_user_min_count" {
  description = "Minimum number of nodes in the user node pool"
  type        = number
  default     = 1
}

variable "aks_user_max_count" {
  description = "Maximum number of nodes in the user node pool"
  type        = number
  default     = 10
}

variable "aks_user_vm_size" {
  description = "VM size for user node pool"
  type        = string
  default     = "Standard_D4s_v3"
}

variable "aks_os_disk_size" {
  description = "OS disk size for AKS nodes in GB"
  type        = number
  default     = 50
}

# AKS RBAC
variable "aks_admin_group_object_ids" {
  description = "Azure AD group object IDs for AKS admin access"
  type        = list(string)
  default     = []
}

variable "enable_azure_policy" {
  description = "Whether to enable Azure Policy add-on"
  type        = bool
  default     = true
}

# Container Registry
variable "acr_sku" {
  description = "SKU for Azure Container Registry"
  type        = string
  default     = "Standard"
  
  validation {
    condition     = contains(["Basic", "Standard", "Premium"], var.acr_sku)
    error_message = "ACR SKU must be Basic, Standard, or Premium."
  }
}

variable "acr_public_network_access_enabled" {
  description = "Whether public network access is enabled for ACR"
  type        = bool
  default     = true
}

# Database Configuration (Azure SQL)
variable "enable_database" {
  description = "Whether to create an Azure SQL database"
  type        = bool
  default     = false
}

variable "database_name" {
  description = "Database name"
  type        = string
  default     = "{{.ProjectName | snakecase}}"
}

variable "database_admin_username" {
  description = "Database administrator username"
  type        = string
  default     = "sqladmin"
}

variable "database_admin_password" {
  description = "Database administrator password"
  type        = string
  sensitive   = true
}

variable "database_sku_name" {
  description = "Database SKU name"
  type        = string
  default     = "S0"
}

variable "database_public_access_enabled" {
  description = "Whether public network access is enabled for the database"
  type        = bool
  default     = false
}

variable "database_azuread_admin_login" {
  description = "Azure AD admin login for the database"
  type        = string
  default     = ""
}

variable "database_azuread_admin_object_id" {
  description = "Azure AD admin object ID for the database"
  type        = string
  default     = ""
}

# Redis Configuration (Azure Cache for Redis)
variable "enable_redis" {
  description = "Whether to create an Azure Cache for Redis"
  type        = bool
  default     = false
}

variable "redis_capacity" {
  description = "Redis cache capacity"
  type        = number
  default     = 0
}

variable "redis_family" {
  description = "Redis cache family"
  type        = string
  default     = "C"
}

variable "redis_sku_name" {
  description = "Redis cache SKU name"
  type        = string
  default     = "Basic"
  
  validation {
    condition     = contains(["Basic", "Standard", "Premium"], var.redis_sku_name)
    error_message = "Redis SKU must be Basic, Standard, or Premium."
  }
}

variable "redis_subnet_id" {
  description = "Subnet ID for Redis (Premium tier only)"
  type        = string
  default     = ""
}

# Application Gateway
variable "enable_app_gateway" {
  description = "Whether to create an Application Gateway"
  type        = bool
  default     = false
}

{{- else if eq .Type "lambda" "azure-function" }}
# Azure Function Configuration
variable "function_sku_name" {
  description = "SKU name for the Azure Function App Service Plan"
  type        = string
  default     = "Y1"  # Consumption plan
  
  validation {
    condition = contains([
      "Y1",           # Consumption
      "EP1", "EP2", "EP3",  # Elastic Premium
      "P1", "P2", "P3"      # Premium
    ], var.function_sku_name)
    error_message = "Function SKU must be a valid App Service Plan SKU."
  }
}

variable "function_app_settings" {
  description = "App settings for the Azure Function"
  type        = map(string)
  default     = {}
}

variable "function_cors_origins" {
  description = "CORS allowed origins for the Azure Function"
  type        = list(string)
  default     = ["*"]
}

# Cosmos DB Configuration
variable "enable_cosmosdb" {
  description = "Whether to create a Cosmos DB account"
  type        = bool
  default     = false
}

variable "cosmosdb_database_name" {
  description = "Cosmos DB database name"
  type        = string
  default     = "{{.ProjectName | snakecase}}"
}

variable "cosmosdb_container_name" {
  description = "Cosmos DB container name"
  type        = string
  default     = "items"
}

variable "cosmosdb_partition_key_path" {
  description = "Cosmos DB partition key path"
  type        = string
  default     = "/id"
}

variable "cosmosdb_throughput" {
  description = "Cosmos DB container throughput"
  type        = number
  default     = 400
}

variable "cosmosdb_consistency_level" {
  description = "Cosmos DB consistency level"
  type        = string
  default     = "Session"
  
  validation {
    condition = contains([
      "Strong", "BoundedStaleness", "Session", "ConsistentPrefix", "Eventual"
    ], var.cosmosdb_consistency_level)
    error_message = "Cosmos DB consistency level must be valid."
  }
}

variable "cosmosdb_additional_regions" {
  description = "Additional regions for Cosmos DB (production only)"
  type = list(object({
    location          = string
    failover_priority = number
  }))
  default = []
}
{{- end }}

# Key Vault Configuration
variable "key_vault_public_access_enabled" {
  description = "Whether public network access is enabled for Key Vault"
  type        = bool
  default     = true
}

# Monitoring and Alerting
variable "alert_email" {
  description = "Email address for alerts"
  type        = string
  default     = ""
}

# Secrets
variable "application_secrets" {
  description = "Application secrets to store in Key Vault"
  type        = map(string)
  default     = {}
  sensitive   = true
}