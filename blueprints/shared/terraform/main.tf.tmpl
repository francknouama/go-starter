# Production Infrastructure for {{.ProjectName}}
# Supports: Web APIs, Microservices with Kubernetes/EKS
# Features: High availability, auto-scaling, monitoring, security

terraform {
  required_version = ">= 1.6"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.20"
    }
    helm = {
      source  = "hashicorp/helm"
      version = "~> 2.10"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.5"
    }
  }

  backend "s3" {
    # Configuration provided via backend-config during terraform init
    # bucket = "{{.ProjectName}}-terraform-state"
    # key    = "terraform.tfstate"
    # region = "us-east-1"
    encrypt = true
  }
}

# Local variables
locals {
  name_prefix = "${var.project_name}-${var.environment}"
  
  common_tags = {
    Project     = var.project_name
    Environment = var.environment
    ManagedBy   = "Terraform"
    Owner       = var.owner
    CostCenter  = var.cost_center
  }

  # Availability zones
  azs = slice(data.aws_availability_zones.available.names, 0, min(3, length(data.aws_availability_zones.available.names)))
}

# Data sources
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_availability_zones" "available" {
  state = "available"
}

# Random suffix for unique resource names
resource "random_string" "suffix" {
  length  = 8
  special = false
  upper   = false
}

{{- if eq .Type "web-api" "microservice" }}
# VPC and Networking
module "vpc" {
  source = "./modules/vpc"
  
  name_prefix = local.name_prefix
  environment = var.environment
  
  vpc_cidr = var.vpc_cidr
  azs      = local.azs
  
  private_subnets = var.private_subnets
  public_subnets  = var.public_subnets
  
  enable_nat_gateway = var.enable_nat_gateway
  enable_vpn_gateway = var.enable_vpn_gateway
  
  tags = local.common_tags
}

# EKS Cluster
module "eks" {
  source = "./modules/eks"
  
  cluster_name = "${local.name_prefix}-cluster"
  
  vpc_id          = module.vpc.vpc_id
  subnet_ids      = module.vpc.private_subnets
  
  cluster_version = var.kubernetes_version
  
  node_groups = var.eks_node_groups
  
  # OIDC Provider for service accounts
  enable_irsa = true
  
  tags = local.common_tags
}

# RDS Database (if required)
module "database" {
  source = "./modules/rds"
  count  = var.enable_database ? 1 : 0
  
  identifier = "${local.name_prefix}-db"
  
  engine         = var.database_engine
  engine_version = var.database_version
  instance_class = var.database_instance_class
  
  allocated_storage     = var.database_allocated_storage
  max_allocated_storage = var.database_max_allocated_storage
  
  db_name  = var.database_name
  username = var.database_username
  
  vpc_security_group_ids = [module.security_groups.database_sg_id]
  db_subnet_group_name   = module.vpc.database_subnet_group_name
  
  backup_retention_period = var.environment == "production" ? 30 : 7
  backup_window          = "03:00-04:00"
  maintenance_window     = "Sun:04:00-Sun:05:00"
  
  deletion_protection = var.environment == "production"
  
  tags = local.common_tags
}

# ElastiCache Redis (if required)
module "redis" {
  source = "./modules/elasticache"
  count  = var.enable_redis ? 1 : 0
  
  cluster_id = "${local.name_prefix}-redis"
  
  node_type               = var.redis_node_type
  num_cache_nodes         = var.redis_num_cache_nodes
  parameter_group_name    = var.redis_parameter_group_name
  port                    = 6379
  
  subnet_group_name   = module.vpc.elasticache_subnet_group_name
  security_group_ids  = [module.security_groups.redis_sg_id]
  
  tags = local.common_tags
}

# Security Groups
module "security_groups" {
  source = "./modules/security-groups"
  
  name_prefix = local.name_prefix
  vpc_id      = module.vpc.vpc_id
  
  tags = local.common_tags
}

# Application Load Balancer
module "alb" {
  source = "./modules/alb"
  
  name = "${local.name_prefix}-alb"
  
  vpc_id  = module.vpc.vpc_id
  subnets = module.vpc.public_subnets
  
  security_groups = [module.security_groups.alb_sg_id]
  
  # SSL Certificate
  certificate_arn = var.ssl_certificate_arn
  
  tags = local.common_tags
}

# Monitoring and Observability
module "monitoring" {
  source = "./modules/monitoring"
  
  cluster_name = module.eks.cluster_name
  environment  = var.environment
  
  # CloudWatch Log Groups
  enable_container_insights = true
  log_retention_in_days     = var.environment == "production" ? 30 : 7
  
  # Prometheus and Grafana
  enable_prometheus = var.enable_prometheus
  enable_grafana    = var.enable_grafana
  
  # Alerting
  sns_topic_arn = var.alerts_sns_topic_arn
  
  tags = local.common_tags
}

# Service Mesh (Istio)
module "service_mesh" {
  source = "./modules/service-mesh"
  count  = var.enable_service_mesh ? 1 : 0
  
  cluster_name          = module.eks.cluster_name
  cluster_endpoint      = module.eks.cluster_endpoint
  cluster_ca_certificate = module.eks.cluster_certificate_authority_data
  
  enable_istio_ingress = true
  enable_kiali        = true
  enable_jaeger       = true
  
  tags = local.common_tags
}

{{- else if eq .Type "lambda" }}
# Lambda Function Infrastructure
module "lambda" {
  source = "./modules/lambda"
  
  function_name = "${local.name_prefix}-function"
  
  # Lambda configuration
  runtime       = "provided.al2"
  architecture  = ["x86_64"]
  timeout       = var.lambda_timeout
  memory_size   = var.lambda_memory_size
  
  # Environment variables
  environment_variables = var.lambda_environment_variables
  
  # VPC configuration (if required)
  vpc_config = var.lambda_enable_vpc ? {
    subnet_ids         = module.vpc[0].private_subnets
    security_group_ids = [module.security_groups[0].lambda_sg_id]
  } : null
  
  # Dead Letter Queue
  enable_dlq = var.enable_lambda_dlq
  
  # Reserved concurrency
  reserved_concurrent_executions = var.lambda_reserved_concurrency
  
  tags = local.common_tags
}

# API Gateway
module "api_gateway" {
  source = "./modules/api-gateway"
  
  api_name = "${local.name_prefix}-api"
  
  # Lambda integration
  lambda_function_arn  = module.lambda.function_arn
  lambda_function_name = module.lambda.function_name
  
  # Custom domain (if provided)
  domain_name     = var.api_domain_name
  certificate_arn = var.ssl_certificate_arn
  
  # Request validation
  enable_request_validation = true
  
  # Throttling
  throttle_burst_limit = var.api_throttle_burst_limit
  throttle_rate_limit  = var.api_throttle_rate_limit
  
  # CORS
  enable_cors = var.enable_cors
  cors_origins = var.cors_origins
  
  tags = local.common_tags
}

# CloudWatch Monitoring for Lambda
module "lambda_monitoring" {
  source = "./modules/lambda-monitoring"
  
  function_name = module.lambda.function_name
  environment   = var.environment
  
  # CloudWatch Alarms
  error_threshold    = var.lambda_error_threshold
  duration_threshold = var.lambda_duration_threshold
  
  # SNS Topic for alerts
  sns_topic_arn = var.alerts_sns_topic_arn
  
  tags = local.common_tags
}

# DynamoDB Table (if required)
module "dynamodb" {
  source = "./modules/dynamodb"
  count  = var.enable_dynamodb ? 1 : 0
  
  table_name = "${local.name_prefix}-table"
  
  # Table configuration
  billing_mode = var.dynamodb_billing_mode
  hash_key     = var.dynamodb_hash_key
  range_key    = var.dynamodb_range_key
  
  # Attributes
  attributes = var.dynamodb_attributes
  
  # Global Secondary Indexes
  global_secondary_indexes = var.dynamodb_global_secondary_indexes
  
  # Backup
  point_in_time_recovery_enabled = var.environment == "production"
  
  # Server-side encryption
  server_side_encryption_enabled = true
  
  tags = local.common_tags
}

# VPC (if Lambda requires VPC access)
module "vpc" {
  source = "./modules/vpc"
  count  = var.lambda_enable_vpc ? 1 : 0
  
  name_prefix = local.name_prefix
  environment = var.environment
  
  vpc_cidr = var.vpc_cidr
  azs      = local.azs
  
  private_subnets = var.private_subnets
  public_subnets  = var.public_subnets
  
  # Lambda doesn't need NAT Gateway for basic functionality
  enable_nat_gateway = false
  
  tags = local.common_tags
}

# Security Groups (if VPC is enabled)
module "security_groups" {
  source = "./modules/security-groups"
  count  = var.lambda_enable_vpc ? 1 : 0
  
  name_prefix = local.name_prefix
  vpc_id      = module.vpc[0].vpc_id
  
  tags = local.common_tags
}
{{- end }}

# Secrets Manager
module "secrets" {
  source = "./modules/secrets-manager"
  
  secret_name = "${local.name_prefix}-secrets"
  
  # Application secrets
  secrets = var.application_secrets
  
  # Automatic rotation (if supported)
  enable_rotation = var.enable_secrets_rotation
  rotation_lambda_arn = var.secrets_rotation_lambda_arn
  
  tags = local.common_tags
}

# WAF (Web Application Firewall)
module "waf" {
  source = "./modules/waf"
  count  = var.enable_waf ? 1 : 0
  
  name = "${local.name_prefix}-waf"
  
  {{- if eq .Type "web-api" "microservice" }}
  # Associate with ALB
  resource_arn = module.alb.arn
  {{- else if eq .Type "lambda" }}
  # Associate with API Gateway
  resource_arn = module.api_gateway.stage_arn
  {{- end }}
  
  # Rate limiting
  rate_limit = var.waf_rate_limit
  
  # IP whitelisting/blacklisting
  allowed_ips = var.waf_allowed_ips
  blocked_ips = var.waf_blocked_ips
  
  # SQL injection and XSS protection
  enable_sql_injection_protection = true
  enable_xss_protection          = true
  
  tags = local.common_tags
}

# CloudTrail for audit logging
module "cloudtrail" {
  source = "./modules/cloudtrail"
  count  = var.enable_cloudtrail ? 1 : 0
  
  trail_name = "${local.name_prefix}-trail"
  
  # S3 bucket for logs
  s3_bucket_name = "${local.name_prefix}-cloudtrail-${random_string.suffix.result}"
  
  # CloudWatch integration
  enable_log_file_validation = true
  enable_logging            = true
  
  # Event types
  include_global_service_events = true
  is_multi_region_trail        = true
  
  tags = local.common_tags
}

# Backup strategy
module "backup" {
  source = "./modules/backup"
  count  = var.environment == "production" ? 1 : 0
  
  backup_plan_name = "${local.name_prefix}-backup"
  
  # Backup rules
  backup_rules = [
    {
      rule_name         = "daily_backup"
      schedule          = "cron(0 5 ? * * *)"  # Daily at 5 AM UTC
      start_window      = 60                    # 1 hour
      completion_window = 120                   # 2 hours
      
      lifecycle = {
        cold_storage_after = 30   # Move to cold storage after 30 days
        delete_after      = 365   # Delete after 1 year
      }
    }
  ]
  
  # Resources to backup
  {{- if eq .Type "web-api" "microservice" }}
  backup_resources = concat(
    var.enable_database ? [module.database[0].db_instance_arn] : [],
    var.enable_redis ? [module.redis[0].cluster_arn] : []
  )
  {{- else if eq .Type "lambda" }}
  backup_resources = concat(
    var.enable_dynamodb ? [module.dynamodb[0].table_arn] : []
  )
  {{- end }}
  
  tags = local.common_tags
}