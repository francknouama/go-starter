# Production-like Docker Compose for {{.ProjectName}}
# Use for local testing of production configurations
version: '3.8'

services:
  # Main application
  {{.ProjectName}}:
    image: ghcr.io/{{.ModulePath}}:${VERSION:-latest}
    container_name: {{.ProjectName}}-app
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    environment:
      - PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=production
      {{- if .Features.Database.Driver }}
      - DATABASE_URL=postgres://{{.ProjectName}}:{{.ProjectName}}123@postgres:5432/{{.ProjectName}}?sslmode=disable
      {{- end }}
      - REDIS_URL=redis://redis:6379
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      {{- if .Features.Database.Driver }}
      - postgres
      {{- end }}
      - redis
      - jaeger
    networks:
      - {{.ProjectName}}-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M
    user: "1000:1000"

  {{- if .Features.Database.Driver }}
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: {{.ProjectName}}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB={{.ProjectName}}
      - POSTGRES_USER={{.ProjectName}}
      - POSTGRES_PASSWORD={{.ProjectName}}123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{.ProjectName}} -d {{.ProjectName}}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
  {{- end }}

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: {{.ProjectName}}-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: {{.ProjectName}}-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - {{.ProjectName}}
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: {{.ProjectName}}-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: {{.ProjectName}}-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    user: "472:0"

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: {{.ProjectName}}-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent compact thrift
      - "6832:6832/udp"  # Jaeger agent binary thrift
    volumes:
      - jaeger-data:/tmp
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: {{.ProjectName}}-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # ELK Stack - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: {{.ProjectName}}-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - app-logs:/app/logs:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      - elasticsearch
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ELK Stack - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: {{.ProjectName}}-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Security Scanning with Trivy
  trivy:
    image: aquasec/trivy:latest
    container_name: {{.ProjectName}}-trivy
    command: ["server", "--listen", "0.0.0.0:4954"]
    ports:
      - "4954:4954"
    volumes:
      - trivy-cache:/root/.cache
    networks:
      - {{.ProjectName}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Load Testing with k6
  k6:
    image: grafana/k6:latest
    container_name: {{.ProjectName}}-k6
    volumes:
      - ./testing/load-tests:/scripts:ro
      - k6-results:/results
    networks:
      - {{.ProjectName}}-network
    profiles:
      - testing
    command: ["run", "/scripts/load-test.js"]
    environment:
      - TARGET_URL=http://{{.ProjectName}}:8080
    depends_on:
      - {{.ProjectName}}

networks:
  {{.ProjectName}}-network:
    name: {{.ProjectName}}-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  {{- if .Features.Database.Driver }}
  postgres-data:
    name: {{.ProjectName}}-postgres-data
  {{- end }}
  redis-data:
    name: {{.ProjectName}}-redis-data
  prometheus-data:
    name: {{.ProjectName}}-prometheus-data
  grafana-data:
    name: {{.ProjectName}}-grafana-data
  elasticsearch-data:
    name: {{.ProjectName}}-elasticsearch-data
  jaeger-data:
    name: {{.ProjectName}}-jaeger-data
  trivy-cache:
    name: {{.ProjectName}}-trivy-cache
  app-logs:
    name: {{.ProjectName}}-app-logs
  nginx-logs:
    name: {{.ProjectName}}-nginx-logs
  k6-results:
    name: {{.ProjectName}}-k6-results