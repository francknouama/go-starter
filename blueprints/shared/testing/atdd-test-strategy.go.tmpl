// ATDD Test Strategy for {{.ProjectName}}
// Comprehensive acceptance test-driven development implementation
// +build acceptance

package acceptance

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/cucumber/godog"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	{{- if .Features.Database.Driver }}
	"database/sql"
	_ "github.com/lib/pq"
	{{- end }}
)

// TestContext holds the test execution context
type TestContext struct {
	// Application under test
	baseURL    string
	httpClient *http.Client
	
	// Test data and state
	lastResponse     *http.Response
	lastResponseBody []byte
	testData         map[string]interface{}
	
	{{- if .Features.Database.Driver }}
	// Database connection for data setup/cleanup
	db *sql.DB
	{{- end }}
	
	// Test configuration
	config *TestConfig
}

// TestConfig holds configuration for acceptance tests
type TestConfig struct {
	{{- if eq .Type "web-api" "microservice" }}
	APIBaseURL     string `json:"api_base_url"`
	{{- else if eq .Type "lambda" }}
	LambdaURL      string `json:"lambda_url"`
	{{- else if eq .Type "cli" }}
	CLIBinaryPath  string `json:"cli_binary_path"`
	{{- end }}
	TestTimeout    time.Duration `json:"test_timeout"`
	RetryAttempts  int          `json:"retry_attempts"`
	{{- if .Features.Database.Driver }}
	DatabaseURL    string       `json:"database_url"`
	{{- end }}
	Environment    string       `json:"environment"`
}

// Global test context
var testCtx *TestContext

// TestMain sets up the test environment
func TestMain(m *testing.M) {
	// Load test configuration
	config, err := loadTestConfig()
	if err != nil {
		fmt.Printf("Failed to load test config: %v\n", err)
		os.Exit(1)
	}
	
	// Initialize test context
	testCtx = &TestContext{
		{{- if eq .Type "web-api" "microservice" }}
		baseURL: config.APIBaseURL,
		{{- else if eq .Type "lambda" }}
		baseURL: config.LambdaURL,
		{{- end }}
		httpClient: &http.Client{
			Timeout: config.TestTimeout,
		},
		testData: make(map[string]interface{}),
		config:   config,
	}
	
	{{- if .Features.Database.Driver }}
	// Setup database connection
	if err := testCtx.setupDatabase(); err != nil {
		fmt.Printf("Failed to setup database: %v\n", err)
		os.Exit(1)
	}
	defer testCtx.cleanupDatabase()
	{{- end }}
	
	// Run tests
	code := m.Run()
	
	// Cleanup
	testCtx.cleanup()
	
	os.Exit(code)
}

{{- if eq .Type "web-api" "microservice" }}
// Web API Acceptance Tests
func TestAPIAcceptance(t *testing.T) {
	suite := godog.TestSuite{
		ScenarioInitializer: InitializeAPIScenario,
		Options: &godog.Options{
			Format:   "pretty",
			Paths:    []string{"features/api"},
			TestingT: t,
		},
	}
	
	if suite.Run() != 0 {
		t.Fatal("Non-zero status returned, failed to run API acceptance tests")
	}
}

// InitializeAPIScenario registers step definitions for API scenarios
func InitializeAPIScenario(ctx *godog.ScenarioContext) {
	// Given steps
	ctx.Given(`^the API is running$`, testCtx.theAPIIsRunning)
	ctx.Given(`^I have a valid authentication token$`, testCtx.iHaveValidAuthToken)
	ctx.Given(`^there is a user with email "([^"]*)"$`, testCtx.thereIsUserWithEmail)
	
	// When steps
	ctx.When(`^I send a GET request to "([^"]*)"$`, testCtx.iSendGETRequest)
	ctx.When(`^I send a POST request to "([^"]*)" with:$`, testCtx.iSendPOSTRequestWith)
	ctx.When(`^I send a PUT request to "([^"]*)" with:$`, testCtx.iSendPUTRequestWith)
	ctx.When(`^I send a DELETE request to "([^"]*)"$`, testCtx.iSendDELETERequest)
	
	// Then steps
	ctx.Then(`^the response status should be (\d+)$`, testCtx.responseStatusShouldBe)
	ctx.Then(`^the response should contain:$`, testCtx.responseShouldContain)
	ctx.Then(`^the response should have header "([^"]*)" with value "([^"]*)"$`, testCtx.responseShouldHaveHeader)
	ctx.Then(`^the response time should be less than (\d+) milliseconds$`, testCtx.responseTimeShouldBeLessThan)
	
	// Database verification steps
	{{- if .Features.Database.Driver }}
	ctx.Then(`^the database should contain a user with email "([^"]*)"$`, testCtx.databaseShouldContainUser)
	ctx.Then(`^the database should not contain a user with email "([^"]*)"$`, testCtx.databaseShouldNotContainUser)
	{{- end }}
	
	// Cleanup hooks
	ctx.BeforeScenario(testCtx.beforeScenario)
	ctx.AfterScenario(testCtx.afterScenario)
}

{{- else if eq .Type "cli" }}
// CLI Acceptance Tests
func TestCLIAcceptance(t *testing.T) {
	suite := godog.TestSuite{
		ScenarioInitializer: InitializeCLIScenario,
		Options: &godog.Options{
			Format:   "pretty",
			Paths:    []string{"features/cli"},
			TestingT: t,
		},
	}
	
	if suite.Run() != 0 {
		t.Fatal("Non-zero status returned, failed to run CLI acceptance tests")
	}
}

// InitializeCLIScenario registers step definitions for CLI scenarios
func InitializeCLIScenario(ctx *godog.ScenarioContext) {
	// Given steps
	ctx.Given(`^the CLI is available$`, testCtx.theCLIIsAvailable)
	ctx.Given(`^I have a configuration file with:$`, testCtx.iHaveConfigurationFile)
	
	// When steps
	ctx.When(`^I run the command "([^"]*)"$`, testCtx.iRunCommand)
	ctx.When(`^I run the command "([^"]*)" with args:$`, testCtx.iRunCommandWithArgs)
	
	// Then steps
	ctx.Then(`^the exit code should be (\d+)$`, testCtx.exitCodeShouldBe)
	ctx.Then(`^the output should contain "([^"]*)"$`, testCtx.outputShouldContain)
	ctx.Then(`^the output should not contain "([^"]*)"$`, testCtx.outputShouldNotContain)
	ctx.Then(`^the output should match regex "([^"]*)"$`, testCtx.outputShouldMatchRegex)
	
	// Cleanup hooks
	ctx.BeforeScenario(testCtx.beforeScenario)
	ctx.AfterScenario(testCtx.afterScenario)
}

{{- else if eq .Type "lambda" }}
// Lambda Acceptance Tests
func TestLambdaAcceptance(t *testing.T) {
	suite := godog.TestSuite{
		ScenarioInitializer: InitializeLambdaScenario,
		Options: &godog.Options{
			Format:   "pretty",
			Paths:    []string{"features/lambda"},
			TestingT: t,
		},
	}
	
	if suite.Run() != 0 {
		t.Fatal("Non-zero status returned, failed to run Lambda acceptance tests")
	}
}

// InitializeLambdaScenario registers step definitions for Lambda scenarios
func InitializeLambdaScenario(ctx *godog.ScenarioContext) {
	// Given steps
	ctx.Given(`^the Lambda function is deployed$`, testCtx.theLambdaIsDeployed)
	ctx.Given(`^I have an event payload:$`, testCtx.iHaveEventPayload)
	
	// When steps
	ctx.When(`^I invoke the Lambda function$`, testCtx.iInvokeLambdaFunction)
	ctx.When(`^I invoke the Lambda function with payload:$`, testCtx.iInvokeLambdaWithPayload)
	
	// Then steps
	ctx.Then(`^the Lambda response should be successful$`, testCtx.lambdaResponseShouldBeSuccessful)
	ctx.Then(`^the Lambda response should contain:$`, testCtx.lambdaResponseShouldContain)
	ctx.Then(`^the Lambda execution time should be less than (\d+) milliseconds$`, testCtx.lambdaExecutionTimeShouldBeLessThan)
	
	// Cleanup hooks
	ctx.BeforeScenario(testCtx.beforeScenario)
	ctx.AfterScenario(testCtx.afterScenario)
}
{{- end }}

// Test Configuration Management
func loadTestConfig() (*TestConfig, error) {
	config := &TestConfig{
		{{- if eq .Type "web-api" "microservice" }}
		APIBaseURL:    getEnvOrDefault("API_BASE_URL", "http://localhost:8080"),
		{{- else if eq .Type "lambda" }}
		LambdaURL:     getEnvOrDefault("LAMBDA_URL", ""),
		{{- else if eq .Type "cli" }}
		CLIBinaryPath: getEnvOrDefault("CLI_BINARY_PATH", "./{{.ProjectName}}"),
		{{- end }}
		TestTimeout:   30 * time.Second,
		RetryAttempts: 3,
		{{- if .Features.Database.Driver }}
		DatabaseURL:   getEnvOrDefault("TEST_DATABASE_URL", "postgres://test:test@localhost:5432/{{.ProjectName}}_test?sslmode=disable"),
		{{- end }}
		Environment:   getEnvOrDefault("TEST_ENV", "test"),
	}
	
	return config, nil
}

// Helper function to get environment variable with default
func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

{{- if .Features.Database.Driver }}
// Database setup and cleanup
func (tc *TestContext) setupDatabase() error {
	var err error
	tc.db, err = sql.Open("postgres", tc.config.DatabaseURL)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}
	
	// Test connection
	if err := tc.db.Ping(); err != nil {
		return fmt.Errorf("failed to ping database: %w", err)
	}
	
	return nil
}

func (tc *TestContext) cleanupDatabase() {
	if tc.db != nil {
		tc.db.Close()
	}
}
{{- end }}

// Common test steps implementation
func (tc *TestContext) cleanup() {
	// Cleanup any test resources
	tc.testData = make(map[string]interface{})
}

func (tc *TestContext) beforeScenario(sc *godog.Scenario) {
	// Reset test state before each scenario
	tc.lastResponse = nil
	tc.lastResponseBody = nil
	tc.testData = make(map[string]interface{})
}

func (tc *TestContext) afterScenario(sc *godog.Scenario, err error) {
	// Cleanup after each scenario
	if err != nil {
		fmt.Printf("Scenario failed: %s - %v\n", sc.Name, err)
	}
}

{{- if eq .Type "web-api" "microservice" }}
// API-specific step implementations
func (tc *TestContext) theAPIIsRunning() error {
	resp, err := tc.httpClient.Get(tc.baseURL + "/health")
	if err != nil {
		return fmt.Errorf("API health check failed: %w", err)
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("API health check returned status %d", resp.StatusCode)
	}
	
	return nil
}

func (tc *TestContext) iHaveValidAuthToken() error {
	// Implementation depends on your authentication mechanism
	// This is a placeholder - implement according to your auth strategy
	tc.testData["auth_token"] = "valid-test-token"
	return nil
}

func (tc *TestContext) thereIsUserWithEmail(email string) error {
	{{- if .Features.Database.Driver }}
	// Create test user in database
	_, err := tc.db.Exec("INSERT INTO users (email, created_at) VALUES ($1, NOW()) ON CONFLICT (email) DO NOTHING", email)
	return err
	{{- else }}
	// Store in test data for mock purposes
	tc.testData["test_user_email"] = email
	return nil
	{{- end }}
}

func (tc *TestContext) iSendGETRequest(path string) error {
	return tc.makeRequest("GET", path, nil)
}

func (tc *TestContext) iSendPOSTRequestWith(path string, body *godog.DocString) error {
	return tc.makeRequest("POST", path, []byte(body.Content))
}

func (tc *TestContext) iSendPUTRequestWith(path string, body *godog.DocString) error {
	return tc.makeRequest("PUT", path, []byte(body.Content))
}

func (tc *TestContext) iSendDELETERequest(path string) error {
	return tc.makeRequest("DELETE", path, nil)
}

func (tc *TestContext) makeRequest(method, path string, body []byte) error {
	url := tc.baseURL + path
	
	var reqBody io.Reader
	if body != nil {
		reqBody = bytes.NewReader(body)
	}
	
	req, err := http.NewRequest(method, url, reqBody)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}
	
	// Add authentication header if available
	if token, ok := tc.testData["auth_token"].(string); ok {
		req.Header.Set("Authorization", "Bearer "+token)
	}
	
	// Set content type for POST/PUT requests
	if method == "POST" || method == "PUT" {
		req.Header.Set("Content-Type", "application/json")
	}
	
	// Make request
	start := time.Now()
	tc.lastResponse, err = tc.httpClient.Do(req)
	tc.testData["response_time"] = time.Since(start)
	
	if err != nil {
		return fmt.Errorf("request failed: %w", err)
	}
	
	// Read response body
	tc.lastResponseBody, err = io.ReadAll(tc.lastResponse.Body)
	tc.lastResponse.Body.Close()
	
	return err
}

func (tc *TestContext) responseStatusShouldBe(expectedStatus int) error {
	if tc.lastResponse == nil {
		return fmt.Errorf("no response available")
	}
	
	if tc.lastResponse.StatusCode != expectedStatus {
		return fmt.Errorf("expected status %d, got %d. Response: %s", 
			expectedStatus, tc.lastResponse.StatusCode, string(tc.lastResponseBody))
	}
	
	return nil
}

func (tc *TestContext) responseShouldContain(expectedBody *godog.DocString) error {
	if tc.lastResponseBody == nil {
		return fmt.Errorf("no response body available")
	}
	
	var expected, actual interface{}
	
	if err := json.Unmarshal([]byte(expectedBody.Content), &expected); err != nil {
		return fmt.Errorf("failed to parse expected JSON: %w", err)
	}
	
	if err := json.Unmarshal(tc.lastResponseBody, &actual); err != nil {
		return fmt.Errorf("failed to parse actual JSON: %w", err)
	}
	
	// Compare JSON structures (implement deep comparison as needed)
	return tc.compareJSON(expected, actual)
}

func (tc *TestContext) responseShouldHaveHeader(headerName, expectedValue string) error {
	if tc.lastResponse == nil {
		return fmt.Errorf("no response available")
	}
	
	actualValue := tc.lastResponse.Header.Get(headerName)
	if actualValue != expectedValue {
		return fmt.Errorf("expected header %s to be %s, got %s", 
			headerName, expectedValue, actualValue)
	}
	
	return nil
}

func (tc *TestContext) responseTimeShouldBeLessThan(maxMilliseconds int) error {
	responseTime, ok := tc.testData["response_time"].(time.Duration)
	if !ok {
		return fmt.Errorf("no response time available")
	}
	
	maxDuration := time.Duration(maxMilliseconds) * time.Millisecond
	if responseTime > maxDuration {
		return fmt.Errorf("response time %v exceeds maximum %v", responseTime, maxDuration)
	}
	
	return nil
}

{{- if .Features.Database.Driver }}
func (tc *TestContext) databaseShouldContainUser(email string) error {
	var count int
	err := tc.db.QueryRow("SELECT COUNT(*) FROM users WHERE email = $1", email).Scan(&count)
	if err != nil {
		return fmt.Errorf("database query failed: %w", err)
	}
	
	if count == 0 {
		return fmt.Errorf("user with email %s not found in database", email)
	}
	
	return nil
}

func (tc *TestContext) databaseShouldNotContainUser(email string) error {
	var count int
	err := tc.db.QueryRow("SELECT COUNT(*) FROM users WHERE email = $1", email).Scan(&count)
	if err != nil {
		return fmt.Errorf("database query failed: %w", err)
	}
	
	if count > 0 {
		return fmt.Errorf("user with email %s unexpectedly found in database", email)
	}
	
	return nil
}
{{- end }}
{{- end }}

// Utility functions
func (tc *TestContext) compareJSON(expected, actual interface{}) error {
	expectedJSON, _ := json.MarshalIndent(expected, "", "  ")
	actualJSON, _ := json.MarshalIndent(actual, "", "  ")
	
	if string(expectedJSON) != string(actualJSON) {
		return fmt.Errorf("JSON mismatch.\nExpected:\n%s\nActual:\n%s", 
			string(expectedJSON), string(actualJSON))
	}
	
	return nil
}

// Performance and Load Testing
func TestPerformanceRequirements(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping performance tests in short mode")
	}
	
	tests := []struct {
		name           string
		endpoint       string
		maxLatency     time.Duration
		minThroughput  int // requests per second
		testDuration   time.Duration
	}{
		{
			name:          "Health check performance",
			endpoint:      "/health",
			maxLatency:    100 * time.Millisecond,
			minThroughput: 1000,
			testDuration:  30 * time.Second,
		},
		{{- if eq .Type "web-api" "microservice" }}
		{
			name:          "API endpoint performance",
			endpoint:      "/api/v1/status",
			maxLatency:    500 * time.Millisecond,
			minThroughput: 500,
			testDuration:  60 * time.Second,
		},
		{{- end }}
	}
	
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := testCtx.runLoadTest(tt.endpoint, tt.testDuration, 10)
			
			assert.True(t, result.averageLatency <= tt.maxLatency, 
				"Average latency %v exceeds maximum %v", result.averageLatency, tt.maxLatency)
			
			assert.True(t, result.throughput >= float64(tt.minThroughput), 
				"Throughput %.2f req/s below minimum %d req/s", result.throughput, tt.minThroughput)
			
			assert.True(t, result.errorRate < 0.01, 
				"Error rate %.2f%% exceeds maximum 1%%", result.errorRate*100)
		})
	}
}

// LoadTestResult holds the results of a load test
type LoadTestResult struct {
	totalRequests   int
	successfulReqs  int
	failedReqs      int
	averageLatency  time.Duration
	p95Latency      time.Duration
	p99Latency      time.Duration
	throughput      float64
	errorRate       float64
}

func (tc *TestContext) runLoadTest(endpoint string, duration time.Duration, concurrency int) *LoadTestResult {
	// Implementation of load testing logic
	// This would typically use a load testing library or custom implementation
	// Placeholder implementation
	return &LoadTestResult{
		totalRequests:  1000,
		successfulReqs: 995,
		failedReqs:     5,
		averageLatency: 50 * time.Millisecond,
		p95Latency:     100 * time.Millisecond,
		p99Latency:     200 * time.Millisecond,
		throughput:     200.0,
		errorRate:      0.005,
	}
}

// Quality Gates Enforcement
func TestQualityGates(t *testing.T) {
	t.Run("Code Coverage Gate", func(t *testing.T) {
		// Ensure minimum code coverage
		coverage := getCodeCoverage()
		require.True(t, coverage >= 80.0, 
			"Code coverage %.2f%% below minimum 80%%", coverage)
	})
	
	t.Run("Security Scan Gate", func(t *testing.T) {
		// Ensure no high/critical security vulnerabilities
		vulns := runSecurityScan()
		require.Empty(t, vulns.Critical, 
			"Critical security vulnerabilities found: %v", vulns.Critical)
		require.True(t, len(vulns.High) <= 5, 
			"Too many high-severity vulnerabilities: %d > 5", len(vulns.High))
	})
	
	t.Run("Performance Gate", func(t *testing.T) {
		// Ensure application meets performance requirements
		{{- if eq .Type "web-api" "microservice" }}
		latency := measureAPILatency()
		require.True(t, latency <= 500*time.Millisecond, 
			"API latency %v exceeds 500ms threshold", latency)
		{{- end }}
	})
}

// Helper functions for quality gates
func getCodeCoverage() float64 {
	// Implementation to read coverage data
	// This would typically parse coverage reports
	return 85.5 // Placeholder
}

type SecurityVulnerabilities struct {
	Critical []string
	High     []string
	Medium   []string
	Low      []string
}

func runSecurityScan() *SecurityVulnerabilities {
	// Implementation to run security scanning
	// This would typically integrate with tools like Trivy, OWASP ZAP, etc.
	return &SecurityVulnerabilities{
		Critical: []string{},
		High:     []string{},
		Medium:   []string{"CVE-2023-1234"},
		Low:      []string{"CVE-2023-5678"},
	}
}

{{- if eq .Type "web-api" "microservice" }}
func measureAPILatency() time.Duration {
	// Implementation to measure API latency
	start := time.Now()
	resp, err := testCtx.httpClient.Get(testCtx.baseURL + "/health")
	if err != nil {
		return time.Hour // Return high value to fail the test
	}
	defer resp.Body.Close()
	return time.Since(start)
}
{{- end }}