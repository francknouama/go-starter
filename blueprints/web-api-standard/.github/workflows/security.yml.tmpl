name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan every Tuesday at 10 AM UTC
    - cron: '0 10 * * 2'

env:
  GO_VERSION: '{{.GoVersion}}'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{`{{ runner.os }}`}}-go-${{`{{ env.GO_VERSION }}`}}-${{`{{ hashFiles('**/go.sum') }}`}}

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif -severity medium ./...
      continue-on-error: true

    - name: Upload SARIF file to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif
        category: gosec

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run nancy dependency scanner
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth
      continue-on-error: true

    - name: Check for known vulnerabilities in dependencies
      run: |
        echo "üîç Checking Go module vulnerabilities..."
        
        # Create a simple vulnerability report
        echo "## Security Scan Summary" > security-report.md
        echo "" >> security-report.md
        echo "### Go Version: $(go version)" >> security-report.md
        echo "### Scan Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
        echo "" >> security-report.md
        
        # Check if gosec found any issues
        if [ -f "gosec.sarif" ] && [ -s "gosec.sarif" ]; then
          echo "### Gosec Static Analysis: ‚ö†Ô∏è Issues Found" >> security-report.md
        else
          echo "### Gosec Static Analysis: ‚úÖ No Issues" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "### Dependencies Scanned: $(go list -deps ./... | wc -l)" >> security-report.md
        echo "" >> security-report.md
        echo "For detailed results, check the Security tab in GitHub." >> security-report.md
        
        cat security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: |
          security-report.md
          gosec.sarif
        retention-days: 30

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}

    - name: Download dependencies
      run: go mod download

    - name: Check dependency licenses
      run: |
        echo "üìÑ Checking dependency licenses..."
        
        # Simple license checker - you can enhance this with tools like
        # go-licenses, fossa, etc.
        echo "## Dependency License Report" > license-report.md
        echo "" >> license-report.md
        echo "### Direct Dependencies:" >> license-report.md
        go list -m all | head -20 >> license-report.md
        echo "" >> license-report.md
        echo "### Note: Manual license review recommended for production use" >> license-report.md
        
        cat license-report.md

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.md
        retention-days: 90

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{`{{ env.GO_VERSION }}`}}

    - name: Download dependencies
      run: go mod download

    - name: Run staticcheck
      run: |
        go install honnef.co/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Run go vet
      run: go vet ./...

    - name: Check for ineffective assignments
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Check for unused code
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck -checks unused ./...
      continue-on-error: true

    - name: Generate code quality report
      run: |
        echo "## Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        echo "### Analysis Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> quality-report.md
        echo "### Go Version: $(go version)" >> quality-report.md
        echo "" >> quality-report.md
        
        # Count lines of code
        TOTAL_LINES=$(find . -name "*.go" -not -path "./vendor/*" | xargs wc -l | tail -1 | awk '{print $1}')
        echo "### Lines of Code: $TOTAL_LINES" >> quality-report.md
        echo "" >> quality-report.md
        
        # Count test files
        TEST_FILES=$(find . -name "*_test.go" -not -path "./vendor/*" | wc -l)
        echo "### Test Files: $TEST_FILES" >> quality-report.md
        echo "" >> quality-report.md
        
        echo "### Static Analysis: ‚úÖ Completed" >> quality-report.md
        echo "### Vet Check: ‚úÖ Completed" >> quality-report.md
        echo "### Ineffective Assignment Check: ‚úÖ Completed" >> quality-report.md
        
        cat quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: quality-report.md
        retention-days: 30

  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-scan, license-check, code-quality]
    if: always()

    steps:
    - name: Notify security scan completion
      run: |
        echo "üõ°Ô∏è Security scan completed for ${{`{{ github.ref_name }}`}}"
        echo "üìä Results:"
        echo "  - Security Scan: ${{`{{ needs.security-scan.result }}`}}"
        echo "  - License Check: ${{`{{ needs.license-check.result }}`}}"
        echo "  - Code Quality: ${{`{{ needs.code-quality.result }}`}}"
        
        if [ "${{`{{ needs.security-scan.result }}`}}" = "failure" ]; then
          echo "‚ö†Ô∏è Security issues detected. Please review the Security tab."
        else
          echo "‚úÖ No critical security issues detected."
        fi