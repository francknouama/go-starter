package middleware

import (
	{{- if or (eq .Framework "gin") (eq .Framework "chi") (eq .Framework "stdlib") (eq .Framework "fiber")}}
	"runtime/debug"
	{{- end}}
	{{- if or (eq .Framework "gin") (eq .Framework "chi") (eq .Framework "stdlib")}}
	"net/http"
	{{- end}}
	{{- if eq .Framework "gin"}}
	"github.com/gin-gonic/gin"
	{{- else if eq .Framework "echo"}}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	{{- else if eq .Framework "fiber"}}
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/recover"
	{{- else if eq .Framework "chi"}}
	{{- else if eq .Framework "stdlib"}}
	{{- end}}

	"{{.ModulePath}}/internal/logger"
)

{{- if eq .Framework "gin"}}
// Recovery returns a recovery middleware for Gin
func Recovery(log logger.Logger) gin.HandlerFunc {
	return gin.CustomRecovery(func(c *gin.Context, recovered interface{}) {
		log.Error("Panic recovered",
			"error", recovered,
			"stack", string(debug.Stack()),
			"method", c.Request.Method,
			"path", c.Request.URL.Path,
		)
		
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "Internal server error",
		})
	})
}
{{- else if eq .Framework "echo"}}
// Recovery returns a recovery middleware for Echo
func Recovery(log logger.Logger) echo.MiddlewareFunc {
	return middleware.RecoverWithConfig(middleware.RecoverConfig{
		LogErrorFunc: func(c echo.Context, err error, stack []byte) error {
			log.Error("Panic recovered",
				"error", err,
				"stack", string(stack),
				"method", c.Request().Method,
				"path", c.Request().URL.Path,
			)
			return nil
		},
	})
}
{{- else if eq .Framework "fiber"}}
// Recovery returns a recovery middleware for Fiber
func Recovery(log logger.Logger) fiber.Handler {
	return recover.New(recover.Config{
		EnableStackTrace: true,
		StackTraceHandler: func(c *fiber.Ctx, e interface{}) {
			log.Error("Panic recovered",
				"error", e,
				"stack", string(debug.Stack()),
				"method", c.Method(),
				"path", c.Path(),
			)
		},
	})
}
{{- else if eq .Framework "chi"}}
// Recovery returns a recovery middleware for Chi
func Recovery(log logger.Logger) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			defer func() {
				if rvr := recover(); rvr != nil {
					log.Error("Panic recovered",
						"error", rvr,
						"stack", string(debug.Stack()),
						"method", r.Method,
						"path", r.URL.Path,
					)
					
					http.Error(w, "Internal server error", http.StatusInternalServerError)
				}
			}()
			
			next.ServeHTTP(w, r)
		}
		
		return http.HandlerFunc(fn)
	}
}
{{- else if eq .Framework "stdlib"}}
// Recovery returns a recovery middleware for standard library
func Recovery(log logger.Logger) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			defer func() {
				if rvr := recover(); rvr != nil {
					log.Error("Panic recovered",
						"error", rvr,
						"stack", string(debug.Stack()),
						"method", r.Method,
						"path", r.URL.Path,
					)
					
					http.Error(w, "Internal server error", http.StatusInternalServerError)
				}
			}()
			
			next.ServeHTTP(w, r)
		})
	}
}
{{- end}}