package handlers

import (
{{- if eq .Framework "gin"}}
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
{{- else if eq .Framework "echo"}}
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
{{- else if eq .Framework "fiber"}}
	"time"

	"github.com/gofiber/fiber/v2"
{{- else if eq .Framework "chi"}}
	"encoding/json"
	"net/http"
	"time"
{{- else if eq .Framework "stdlib"}}
	"encoding/json"
	"net/http"
	"time"
{{- end}}
{{- if ne .DatabaseDriver ""}}

	"{{.ModulePath}}/internal/services"
{{- end}}
{{- if and (ne .AuthType "") (ne .AuthType "none")}}
	"{{.ModulePath}}/internal/services"
{{- if eq .Framework "gin"}}
	"{{.ModulePath}}/internal/errors"
{{- end}}
{{- end}}
)

// HealthResponse represents the health check response
type HealthResponse struct {
	Status    string            `json:"status"`
	Timestamp time.Time         `json:"timestamp"`
	Version   string            `json:"version,omitempty"`
	Checks    map[string]string `json:"checks,omitempty"`
}

{{- if eq .Framework "gin"}}

// HealthCheck handles GET /health
func HealthCheck(c *gin.Context) {
	response := HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
	}
	c.JSON(http.StatusOK, response)
}

// ReadinessCheck handles GET /ready
func ReadinessCheck(c *gin.Context) {
	checks := make(map[string]string)
	allHealthy := true

{{- if ne .DatabaseDriver ""}}
	checks["database"] = "healthy"
{{- end}}

	status := "ready"
	httpStatus := http.StatusOK

	if !allHealthy {
		status = "not ready"
		httpStatus = http.StatusServiceUnavailable
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Checks:    checks,
	}

	c.JSON(httpStatus, response)
}

{{- else if eq .Framework "echo"}}

// HealthCheck handles GET /health
func HealthCheck(c echo.Context) error {
	response := HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
	}
	return c.JSON(http.StatusOK, response)
}

// ReadinessCheck handles GET /ready
func ReadinessCheck(c echo.Context) error {
	checks := make(map[string]string)
	allHealthy := true

{{- if ne .DatabaseDriver ""}}
	checks["database"] = "healthy"
{{- end}}

	status := "ready"
	httpStatus := http.StatusOK

	if !allHealthy {
		status = "not ready"
		httpStatus = http.StatusServiceUnavailable
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Checks:    checks,
	}

	return c.JSON(httpStatus, response)
}

{{- else if eq .Framework "fiber"}}

// HealthCheck handles GET /health
func HealthCheck(c *fiber.Ctx) error {
	response := HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
	}
	return c.JSON(response)
}

// ReadinessCheck handles GET /ready
func ReadinessCheck(c *fiber.Ctx) error {
	checks := make(map[string]string)
	allHealthy := true

{{- if ne .DatabaseDriver ""}}
	checks["database"] = "healthy"
{{- end}}

	status := "ready"
	if !allHealthy {
		status = "not ready"
		c.Status(fiber.StatusServiceUnavailable)
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Checks:    checks,
	}

	return c.JSON(response)
}

{{- else if eq .Framework "chi"}}

// HealthCheck handles GET /health
func HealthCheck(w http.ResponseWriter, r *http.Request) {
	response := HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// ReadinessCheck handles GET /ready
func ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	checks := make(map[string]string)
	allHealthy := true

{{- if ne .DatabaseDriver ""}}
	checks["database"] = "healthy"
{{- end}}

	status := "ready"
	httpStatus := http.StatusOK

	if !allHealthy {
		status = "not ready"
		httpStatus = http.StatusServiceUnavailable
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Checks:    checks,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(httpStatus)
	json.NewEncoder(w).Encode(response)
}

{{- else if eq .Framework "stdlib"}}

// HealthCheck handles GET /health
func HealthCheck(w http.ResponseWriter, r *http.Request) {
	response := HealthResponse{
		Status:    "healthy",
		Timestamp: time.Now(),
		Version:   "1.0.0",
	}
	
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// ReadinessCheck handles GET /ready
func ReadinessCheck(w http.ResponseWriter, r *http.Request) {
	checks := make(map[string]string)
	allHealthy := true

{{- if ne .DatabaseDriver ""}}
	checks["database"] = "healthy"
{{- end}}

	status := "ready"
	httpStatus := http.StatusOK

	if !allHealthy {
		status = "not ready"
		httpStatus = http.StatusServiceUnavailable
	}

	response := HealthResponse{
		Status:    status,
		Timestamp: time.Now(),
		Checks:    checks,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(httpStatus)
	json.NewEncoder(w).Encode(response)
}

{{- end}}

{{- if ne .DatabaseDriver ""}}

// UserHandler contains user-related handler methods
type UserHandler struct {
	userService services.UserService
}

// NewUserHandler creates a new user handler
func NewUserHandler(userService services.UserService) *UserHandler {
	return &UserHandler{
		userService: userService,
	}
}

{{- if eq .Framework "gin"}}

// GetUsers handles GET /users
func (h *UserHandler) GetUsers(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "Get users endpoint"})
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(c *gin.Context) {
	id := c.Param("id")
	c.JSON(http.StatusOK, gin.H{"message": "Get user endpoint", "id": id})
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(c *gin.Context) {
	c.JSON(http.StatusCreated, gin.H{"message": "Create user endpoint"})
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(c *gin.Context) {
	id := c.Param("id")
	c.JSON(http.StatusOK, gin.H{"message": "Update user endpoint", "id": id})
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(c *gin.Context) {
	id := c.Param("id")
	c.JSON(http.StatusOK, gin.H{"message": "Delete user endpoint", "id": id})
}

{{- else if eq .Framework "echo"}}

// GetUsers handles GET /users
func (h *UserHandler) GetUsers(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]string{"message": "Get users endpoint"})
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(c echo.Context) error {
	id := c.Param("id")
	return c.JSON(http.StatusOK, map[string]string{"message": "Get user endpoint", "id": id})
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(c echo.Context) error {
	return c.JSON(http.StatusCreated, map[string]string{"message": "Create user endpoint"})
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(c echo.Context) error {
	id := c.Param("id")
	return c.JSON(http.StatusOK, map[string]string{"message": "Update user endpoint", "id": id})
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(c echo.Context) error {
	id := c.Param("id")
	return c.JSON(http.StatusOK, map[string]string{"message": "Delete user endpoint", "id": id})
}

{{- else if eq .Framework "fiber"}}

// GetUsers handles GET /users
func (h *UserHandler) GetUsers(c *fiber.Ctx) error {
	return c.JSON(map[string]string{"message": "Get users endpoint"})
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(c *fiber.Ctx) error {
	id := c.Params("id")
	return c.JSON(map[string]string{"message": "Get user endpoint", "id": id})
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(c *fiber.Ctx) error {
	return c.Status(fiber.StatusCreated).JSON(map[string]string{"message": "Create user endpoint"})
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(c *fiber.Ctx) error {
	id := c.Params("id")
	return c.JSON(map[string]string{"message": "Update user endpoint", "id": id})
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(c *fiber.Ctx) error {
	id := c.Params("id")
	return c.JSON(map[string]string{"message": "Delete user endpoint", "id": id})
}

{{- else if or (eq .Framework "chi") (eq .Framework "stdlib")}}

// GetUsers handles GET /users
func (h *UserHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "Get users endpoint"})
}

// GetUser handles GET /users/:id
func (h *UserHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	// Extract ID from URL path
	id := "placeholder" // In real implementation, extract from URL
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "Get user endpoint", "id": id})
}

// CreateUser handles POST /users
func (h *UserHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{"message": "Create user endpoint"})
}

// UpdateUser handles PUT /users/:id
func (h *UserHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	id := "placeholder" // In real implementation, extract from URL
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "Update user endpoint", "id": id})
}

// DeleteUser handles DELETE /users/:id
func (h *UserHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	id := "placeholder" // In real implementation, extract from URL
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "Delete user endpoint", "id": id})
}

{{- end}}
{{- end}}

{{- if and (ne .AuthType "") (ne .AuthType "none")}}

// AuthHandler contains authentication-related handler methods
type AuthHandler struct {
	authService services.AuthService
{{- if eq .Framework "gin"}}
	errorHandler *errors.ErrorHandler
{{- end}}
}

// NewAuthHandler creates a new auth handler
func NewAuthHandler(authService services.AuthService{{- if eq .Framework "gin"}}, errorHandler *errors.ErrorHandler{{- end}}) *AuthHandler {
	return &AuthHandler{
		authService: authService,
{{- if eq .Framework "gin"}}
		errorHandler: errorHandler,
{{- end}}
	}
}

{{- if eq .Framework "gin"}}

// Login handles POST /auth/login
func (h *AuthHandler) Login(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "Login endpoint"})
}

// Register handles POST /auth/register
func (h *AuthHandler) Register(c *gin.Context) {
	c.JSON(http.StatusCreated, gin.H{"message": "Register endpoint"})
}

{{- else if eq .Framework "echo"}}

// Login handles POST /auth/login
func (h *AuthHandler) Login(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]string{"message": "Login endpoint"})
}

// Register handles POST /auth/register
func (h *AuthHandler) Register(c echo.Context) error {
	return c.JSON(http.StatusCreated, map[string]string{"message": "Register endpoint"})
}

{{- else if eq .Framework "fiber"}}

// Login handles POST /auth/login
func (h *AuthHandler) Login(c *fiber.Ctx) error {
	return c.JSON(map[string]string{"message": "Login endpoint"})
}

// Register handles POST /auth/register
func (h *AuthHandler) Register(c *fiber.Ctx) error {
	return c.Status(fiber.StatusCreated).JSON(map[string]string{"message": "Register endpoint"})
}

{{- else if or (eq .Framework "chi") (eq .Framework "stdlib")}}

// Login handles POST /auth/login
func (h *AuthHandler) Login(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{"message": "Login endpoint"})
}

// Register handles POST /auth/register
func (h *AuthHandler) Register(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(map[string]string{"message": "Register endpoint"})
}

{{- end}}
{{- end}}