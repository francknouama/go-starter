{{- if ne .DatabaseDriver ""}}
package handlers

import (
	"net/http"
	"strconv"

	"github.com/gofiber/fiber/v2"
	"{{.ModulePath}}/internal/models"
	"{{.ModulePath}}/internal/services"
)

// UsersHandler handles user-related HTTP requests
type UsersHandler struct {
	userService services.UserService
}

// NewUserHandler creates a new users handler
func NewUserHandler(userService services.UserService) *UsersHandler {
	return &UsersHandler{
		userService: userService,
	}
}

// NewUsersHandler creates a new users handler (alias for compatibility)
func NewUsersHandler(userService services.UserService) *UsersHandler {
	return NewUserHandler(userService)
}

// GetUsers handles GET /api/v1/users
func (h *UsersHandler) GetUsers(c *fiber.Ctx) error {
	// Parse pagination parameters
	page := 1
	if p := c.Query("page"); p != "" {
		if parsed, err := strconv.Atoi(p); err == nil && parsed > 0 {
			page = parsed
		}
	}

	limit := 10
	if l := c.Query("limit"); l != "" {
		if parsed, err := strconv.Atoi(l); err == nil && parsed > 0 && parsed <= 100 {
			limit = parsed
		}
	}

	users, total, err := h.userService.GetUsers(page, limit)
	if err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to retrieve users",
			"code":  "USERS_FETCH_ERROR",
		})
	}

	totalPages := (total + limit - 1) / limit

	return c.JSON(fiber.Map{
		"data": users,
		"pagination": fiber.Map{
			"page":  page,
			"limit": limit,
			"total": total,
			"pages": totalPages,
		},
	})
}

// GetUser handles GET /api/v1/users/:id
func (h *UsersHandler) GetUser(c *fiber.Ctx) error {
	idStr := c.Params("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid user ID",
			"code":  "INVALID_USER_ID",
		})
	}

	user, err := h.userService.GetUserByID(uint(id))
	if err != nil {
		if err.Error() == "user not found" {
			return c.Status(http.StatusNotFound).JSON(fiber.Map{
				"error": "User not found",
				"code":  "USER_NOT_FOUND",
			})
		}
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to retrieve user",
			"code":  "USER_FETCH_ERROR",
		})
	}

	return c.JSON(fiber.Map{
		"data": user,
	})
}

// CreateUser handles POST /api/v1/users
func (h *UsersHandler) CreateUser(c *fiber.Ctx) error {
	var req models.CreateUserRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid request data",
			"code":  "INVALID_REQUEST_DATA",
		})
	}

	user, err := h.userService.CreateUser(req)
	if err != nil {
		if err.Error() == "user already exists" {
			return c.Status(http.StatusConflict).JSON(fiber.Map{
				"error": "User already exists",
				"code":  "USER_EXISTS",
			})
		}
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to create user",
			"code":  "USER_CREATE_ERROR",
		})
	}

	return c.Status(http.StatusCreated).JSON(fiber.Map{
		"data": user,
	})
}

// UpdateUser handles PUT /api/v1/users/:id
func (h *UsersHandler) UpdateUser(c *fiber.Ctx) error {
	idStr := c.Params("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid user ID",
			"code":  "INVALID_USER_ID",
		})
	}

	var req models.UpdateUserRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid request data",
			"code":  "INVALID_REQUEST_DATA",
		})
	}

	user, err := h.userService.UpdateUser(uint(id), req)
	if err != nil {
		if err.Error() == "user not found" {
			return c.Status(http.StatusNotFound).JSON(fiber.Map{
				"error": "User not found",
				"code":  "USER_NOT_FOUND",
			})
		}
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to update user",
			"code":  "USER_UPDATE_ERROR",
		})
	}

	return c.JSON(fiber.Map{
		"data": user,
	})
}

// DeleteUser handles DELETE /api/v1/users/:id
func (h *UsersHandler) DeleteUser(c *fiber.Ctx) error {
	idStr := c.Params("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "Invalid user ID",
			"code":  "INVALID_USER_ID",
		})
	}

	err = h.userService.DeleteUser(uint(id))
	if err != nil {
		if err.Error() == "user not found" {
			return c.Status(http.StatusNotFound).JSON(fiber.Map{
				"error": "User not found",
				"code":  "USER_NOT_FOUND",
			})
		}
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "Failed to delete user",
			"code":  "USER_DELETE_ERROR",
		})
	}

	return c.SendStatus(http.StatusNoContent)
}
{{- end}}