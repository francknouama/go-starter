openapi: 3.0.3
info:
  title: {{.ProjectName}} API
  description: |
    {{.ProjectName}} RESTful API built with Go and Gin framework.
    
    ## Authentication
    {{- if eq .AuthType "jwt"}}
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    {{- else if ne .AuthType ""}}
    This API uses {{.AuthType}} authentication.
    {{- else}}
    Authentication is not currently configured for this API.
    {{- end}}
    
    ## Error Handling
    The API uses standard HTTP status codes and returns errors in the following format:
    ```json
    {
      "error": "Error message",
      "code": "ERROR_CODE"
    }
    ```
  version: 1.0.0
  contact:
    name: {{.Author}}
    {{- if ne .Email ""}}
    email: {{.Email}}
    {{- end}}
  license:
    name: {{.License}}

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.{{lower .ProjectName}}.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check
      description: Returns the health status of the service
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /ready:
    get:
      summary: Readiness check
      description: Returns whether the service is ready to accept requests
      tags:
        - Health
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

{{- if ne .AuthType ""}}
  /api/v1/auth/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/register:
    post:
      summary: User registration
      description: Register a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
{{- end}}

{{- if ne .DatabaseDriver ""}}
  /api/v1/users:
    get:
      summary: List users
      description: Get a paginated list of users
      tags:
        - Users
      {{- if ne .AuthType ""}}
      security:
        - bearerAuth: []
      {{- end}}
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        {{- if ne .AuthType ""}}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- end}}

    post:
      summary: Create user
      description: Create a new user
      tags:
        - Users
      {{- if ne .AuthType ""}}
      security:
        - bearerAuth: []
      {{- end}}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- if ne .AuthType ""}}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- end}}

  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      description: Get a specific user by their ID
      tags:
        - Users
      {{- if ne .AuthType ""}}
      security:
        - bearerAuth: []
      {{- end}}
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- if ne .AuthType ""}}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- end}}

    put:
      summary: Update user
      description: Update an existing user
      tags:
        - Users
      {{- if ne .AuthType ""}}
      security:
        - bearerAuth: []
      {{- end}}
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- if ne .AuthType ""}}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- end}}

    delete:
      summary: Delete user
      description: Delete a user by their ID
      tags:
        - Users
      {{- if ne .AuthType ""}}
      security:
        - bearerAuth: []
      {{- end}}
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- if ne .AuthType ""}}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        {{- end}}
{{- end}}

components:
  {{- if ne .AuthType ""}}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  {{- end}}

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
        checks:
          type: object
          additionalProperties:
            type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code

    {{- if ne .AuthType ""}}
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        user:
          $ref: '#/components/schemas/User'

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"
    {{- end}}

    {{- if ne .DatabaseDriver ""}}
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'

    UsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          maxLength: 100
          example: "password123"
          description: "Optional password field - used internally by auth service"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "user@example.com"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        pages:
          type: integer
          example: 10
    {{- end}}

tags:
  - name: Health
    description: Health check endpoints
  {{- if ne .AuthType ""}}
  - name: Authentication
    description: User authentication endpoints
  {{- end}}
  {{- if ne .DatabaseDriver ""}}
  - name: Users
    description: User management endpoints
  {{- end}}