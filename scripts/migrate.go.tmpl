package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"{{.ModulePath}}/internal/adapters/secondary/persistence"
	"{{.ModulePath}}/internal/infrastructure/config"
)

var (
	configPath = flag.String("config", "config.yaml", "Path to configuration file")
	direction  = flag.String("direction", "up", "Migration direction: up or down")
	steps      = flag.Int("steps", 0, "Number of migration steps (0 for all)")
	force      = flag.Bool("force", false, "Force migration even if there are conflicts")
)

func main() {
	flag.Parse()

	// Load configuration
	cfg, err := config.LoadConfig(*configPath)
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Create database connection
	db, err := persistence.NewDatabase(cfg)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	// Create migration runner
	migrator := NewMigrator(db, cfg)

	ctx := context.Background()

	switch *direction {
	case "up":
		if err := migrator.Up(ctx, *steps); err != nil {
			log.Fatalf("Migration up failed: %v", err)
		}
		fmt.Println("Migration up completed successfully")
	case "down":
		if err := migrator.Down(ctx, *steps); err != nil {
			log.Fatalf("Migration down failed: %v", err)
		}
		fmt.Println("Migration down completed successfully")
	case "status":
		if err := migrator.Status(ctx); err != nil {
			log.Fatalf("Migration status failed: %v", err)
		}
	case "reset":
		if !*force {
			fmt.Print("Are you sure you want to reset the database? This will drop all tables. (y/N): ")
			var response string
			fmt.Scanln(&response)
			if response != "y" && response != "Y" {
				fmt.Println("Reset cancelled")
				return
			}
		}
		if err := migrator.Reset(ctx); err != nil {
			log.Fatalf("Migration reset failed: %v", err)
		}
		fmt.Println("Database reset completed successfully")
	default:
		log.Fatalf("Unknown direction: %s. Use 'up', 'down', 'status', or 'reset'", *direction)
	}
}

// Migrator handles database migrations
type Migrator struct {
	db     *persistence.Database
	config *config.Config
}

// NewMigrator creates a new migrator instance
func NewMigrator(db *persistence.Database, cfg *config.Config) *Migrator {
	return &Migrator{
		db:     db,
		config: cfg,
	}
}

// Up runs migrations up
func (m *Migrator) Up(ctx context.Context, steps int) error {
	migrations := m.getMigrations()
	
	if err := m.createMigrationTable(ctx); err != nil {
		return fmt.Errorf("failed to create migration table: %w", err)
	}

	appliedMigrations, err := m.getAppliedMigrations(ctx)
	if err != nil {
		return fmt.Errorf("failed to get applied migrations: %w", err)
	}

	count := 0
	for _, migration := range migrations {
		if steps > 0 && count >= steps {
			break
		}

		if appliedMigrations[migration.Name] {
			continue
		}

		fmt.Printf("Applying migration: %s\n", migration.Name)
		if err := m.applyMigration(ctx, migration); err != nil {
			return fmt.Errorf("failed to apply migration %s: %w", migration.Name, err)
		}
		count++
	}

	return nil
}

// Down runs migrations down
func (m *Migrator) Down(ctx context.Context, steps int) error {
	migrations := m.getMigrations()
	
	appliedMigrations, err := m.getAppliedMigrations(ctx)
	if err != nil {
		return fmt.Errorf("failed to get applied migrations: %w", err)
	}

	// Reverse the order for down migrations
	count := 0
	for i := len(migrations) - 1; i >= 0; i-- {
		migration := migrations[i]
		
		if steps > 0 && count >= steps {
			break
		}

		if !appliedMigrations[migration.Name] {
			continue
		}

		fmt.Printf("Reverting migration: %s\n", migration.Name)
		if err := m.revertMigration(ctx, migration); err != nil {
			return fmt.Errorf("failed to revert migration %s: %w", migration.Name, err)
		}
		count++
	}

	return nil
}

// Status shows migration status
func (m *Migrator) Status(ctx context.Context) error {
	migrations := m.getMigrations()
	
	if err := m.createMigrationTable(ctx); err != nil {
		return fmt.Errorf("failed to create migration table: %w", err)
	}

	appliedMigrations, err := m.getAppliedMigrations(ctx)
	if err != nil {
		return fmt.Errorf("failed to get applied migrations: %w", err)
	}

	fmt.Println("Migration Status:")
	fmt.Println("==================")
	for _, migration := range migrations {
		status := "Pending"
		if appliedMigrations[migration.Name] {
			status = "Applied"
		}
		fmt.Printf("%-50s %s\n", migration.Name, status)
	}

	return nil
}

// Reset drops all tables and recreates them
func (m *Migrator) Reset(ctx context.Context) error {
	fmt.Println("Resetting database...")
	
	// Drop all tables
	if err := m.dropAllTables(ctx); err != nil {
		return fmt.Errorf("failed to drop tables: %w", err)
	}

	// Run all migrations
	return m.Up(ctx, 0)
}

// Migration represents a database migration
type Migration struct {
	Name string
	Up   string
	Down string
}

// getMigrations returns all available migrations
func (m *Migrator) getMigrations() []Migration {
	migrations := []Migration{
		{
			Name: "001_create_users_table",
			Up: `
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);
`,
			Down: `DROP TABLE IF EXISTS users;`,
		},
		{{- if ne .AuthType ""}}
		{
			Name: "002_create_auth_sessions_table",
			Up: `
CREATE TABLE IF NOT EXISTS auth_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token VARCHAR(255) UNIQUE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_auth_sessions_user_id ON auth_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_auth_sessions_token ON auth_sessions(token);
CREATE INDEX IF NOT EXISTS idx_auth_sessions_expires_at ON auth_sessions(expires_at);
`,
			Down: `DROP TABLE IF EXISTS auth_sessions;`,
		},
		{
			Name: "003_create_refresh_tokens_table",
			Up: `
CREATE TABLE IF NOT EXISTS refresh_tokens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token VARCHAR(255) UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id ON refresh_tokens(user_id);
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_token ON refresh_tokens(token);
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_expires_at ON refresh_tokens(expires_at);
`,
			Down: `DROP TABLE IF EXISTS refresh_tokens;`,
		},
		{
			Name: "004_create_password_reset_tokens_table",
			Up: `
CREATE TABLE IF NOT EXISTS password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token VARCHAR(255) UNIQUE NOT NULL,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    used_at TIMESTAMP WITH TIME ZONE NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);
CREATE INDEX IF NOT EXISTS idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX IF NOT EXISTS idx_password_reset_tokens_expires_at ON password_reset_tokens(expires_at);
`,
			Down: `DROP TABLE IF EXISTS password_reset_tokens;`,
		},
		{{- end}}
	}

	{{- if eq .DatabaseDriver "mysql"}}
	// MySQL-specific adjustments
	for i := range migrations {
		// Replace PostgreSQL-specific syntax with MySQL equivalent
		migrations[i].Up = mysqlCompatible(migrations[i].Up)
		migrations[i].Down = mysqlCompatible(migrations[i].Down)
	}
	{{- else if eq .DatabaseDriver "sqlite"}}
	// SQLite-specific adjustments
	for i := range migrations {
		// Replace PostgreSQL-specific syntax with SQLite equivalent
		migrations[i].Up = sqliteCompatible(migrations[i].Up)
		migrations[i].Down = sqliteCompatible(migrations[i].Down)
	}
	{{- end}}

	return migrations
}

{{- if eq .DatabaseDriver "mysql"}}
// mysqlCompatible converts PostgreSQL SQL to MySQL-compatible SQL
func mysqlCompatible(sql string) string {
	// Replace UUID with CHAR(36) for MySQL
	sql = strings.ReplaceAll(sql, "UUID", "CHAR(36)")
	sql = strings.ReplaceAll(sql, "gen_random_uuid()", "UUID()")
	sql = strings.ReplaceAll(sql, "TIMESTAMP WITH TIME ZONE", "TIMESTAMP")
	sql = strings.ReplaceAll(sql, "CURRENT_TIMESTAMP", "CURRENT_TIMESTAMP()")
	return sql
}
{{- else if eq .DatabaseDriver "sqlite"}}
// sqliteCompatible converts PostgreSQL SQL to SQLite-compatible SQL
func sqliteCompatible(sql string) string {
	// Replace UUID with TEXT for SQLite
	sql = strings.ReplaceAll(sql, "UUID", "TEXT")
	sql = strings.ReplaceAll(sql, "gen_random_uuid()", "lower(hex(randomblob(16)))")
	sql = strings.ReplaceAll(sql, "TIMESTAMP WITH TIME ZONE", "DATETIME")
	sql = strings.ReplaceAll(sql, "VARCHAR(255)", "TEXT")
	sql = strings.ReplaceAll(sql, "VARCHAR(100)", "TEXT")
	return sql
}
{{- end}}

// createMigrationTable creates the migration tracking table
func (m *Migrator) createMigrationTable(ctx context.Context) error {
	query := `
CREATE TABLE IF NOT EXISTS schema_migrations (
    name VARCHAR(255) PRIMARY KEY,
    applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);`

	{{- if eq .DatabaseDriver "mysql"}}
	query = mysqlCompatible(query)
	{{- else if eq .DatabaseDriver "sqlite"}}
	query = sqliteCompatible(query)
	{{- end}}

	{{- if eq .DatabaseORM "gorm"}}
	return m.db.GORM().Exec(query).Error
	{{- else}}
	_, err := m.db.SQL().ExecContext(ctx, query)
	return err
	{{- end}}
}

// getAppliedMigrations returns a map of applied migrations
func (m *Migrator) getAppliedMigrations(ctx context.Context) (map[string]bool, error) {
	query := "SELECT name FROM schema_migrations"
	
	{{- if eq .DatabaseORM "gorm"}}
	var names []string
	if err := m.db.GORM().Raw(query).Scan(&names).Error; err != nil {
		return nil, err
	}
	{{- else}}
	rows, err := m.db.SQL().QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var names []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		names = append(names, name)
	}

	if err := rows.Err(); err != nil {
		return nil, err
	}
	{{- end}}

	applied := make(map[string]bool)
	for _, name := range names {
		applied[name] = true
	}

	return applied, nil
}

// applyMigration applies a single migration
func (m *Migrator) applyMigration(ctx context.Context, migration Migration) error {
	{{- if eq .DatabaseORM "gorm"}}
	tx := m.db.GORM().Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Exec(migration.Up).Error; err != nil {
		tx.Rollback()
		return err
	}

	if err := tx.Exec("INSERT INTO schema_migrations (name) VALUES (?)", migration.Name).Error; err != nil {
		tx.Rollback()
		return err
	}

	return tx.Commit().Error
	{{- else}}
	tx, err := m.db.SQL().BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	if _, err := tx.ExecContext(ctx, migration.Up); err != nil {
		return err
	}

	if _, err := tx.ExecContext(ctx, "INSERT INTO schema_migrations (name) VALUES ($1)", migration.Name); err != nil {
		return err
	}

	return tx.Commit()
	{{- end}}
}

// revertMigration reverts a single migration
func (m *Migrator) revertMigration(ctx context.Context, migration Migration) error {
	{{- if eq .DatabaseORM "gorm"}}
	tx := m.db.GORM().Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	if err := tx.Exec(migration.Down).Error; err != nil {
		tx.Rollback()
		return err
	}

	if err := tx.Exec("DELETE FROM schema_migrations WHERE name = ?", migration.Name).Error; err != nil {
		tx.Rollback()
		return err
	}

	return tx.Commit().Error
	{{- else}}
	tx, err := m.db.SQL().BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	if _, err := tx.ExecContext(ctx, migration.Down); err != nil {
		return err
	}

	if _, err := tx.ExecContext(ctx, "DELETE FROM schema_migrations WHERE name = $1", migration.Name); err != nil {
		return err
	}

	return tx.Commit()
	{{- end}}
}

// dropAllTables drops all tables in the database
func (m *Migrator) dropAllTables(ctx context.Context) error {
	var tables []string

	{{- if eq .DatabaseDriver "postgres"}}
	query := `
SELECT tablename FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename NOT LIKE 'pg_%' 
AND tablename NOT LIKE 'information_%'
ORDER BY tablename;`
	{{- else if eq .DatabaseDriver "mysql"}}
	query := "SHOW TABLES"
	{{- else if eq .DatabaseDriver "sqlite"}}
	query := "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'"
	{{- end}}

	{{- if eq .DatabaseORM "gorm"}}
	if err := m.db.GORM().Raw(query).Scan(&tables).Error; err != nil {
		return err
	}
	{{- else}}
	rows, err := m.db.SQL().QueryContext(ctx, query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var table string
		if err := rows.Scan(&table); err != nil {
			return err
		}
		tables = append(tables, table)
	}

	if err := rows.Err(); err != nil {
		return err
	}
	{{- end}}

	// Drop tables in reverse order to handle foreign key constraints
	for i := len(tables) - 1; i >= 0; i-- {
		table := tables[i]
		dropQuery := fmt.Sprintf("DROP TABLE IF EXISTS %s {{- if eq .DatabaseDriver "postgres"}} CASCADE{{- end}}", table)
		
		{{- if eq .DatabaseORM "gorm"}}
		if err := m.db.GORM().Exec(dropQuery).Error; err != nil {
			return fmt.Errorf("failed to drop table %s: %w", table, err)
		}
		{{- else}}
		if _, err := m.db.SQL().ExecContext(ctx, dropQuery); err != nil {
			return fmt.Errorf("failed to drop table %s: %w", table, err)
		}
		{{- end}}
	}

	return nil
}

func init() {
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s [options]\n", filepath.Base(os.Args[0]))
		fmt.Fprintf(os.Stderr, "\nDatabase migration utility for {{.ProjectName}}\n\n")
		fmt.Fprintf(os.Stderr, "Options:\n")
		flag.PrintDefaults()
		fmt.Fprintf(os.Stderr, "\nExamples:\n")
		fmt.Fprintf(os.Stderr, "  %s -direction=up              # Apply all pending migrations\n", filepath.Base(os.Args[0]))
		fmt.Fprintf(os.Stderr, "  %s -direction=up -steps=1     # Apply next migration\n", filepath.Base(os.Args[0]))
		fmt.Fprintf(os.Stderr, "  %s -direction=down -steps=1   # Revert last migration\n", filepath.Base(os.Args[0]))
		fmt.Fprintf(os.Stderr, "  %s -direction=status          # Show migration status\n", filepath.Base(os.Args[0]))
		fmt.Fprintf(os.Stderr, "  %s -direction=reset -force    # Reset database\n", filepath.Base(os.Args[0]))
	}
}